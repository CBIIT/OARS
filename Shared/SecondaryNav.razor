@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.ViewModels;
@using TheradexPortal.Data;
<Div Class="nci-secondary-nav">
<Bar Mode="BarMode.VerticalInline"
    CollapseMode="BarCollapseMode.Small"
    ThemeContrast="ThemeContrast.Light"
    @bind-Visible=IsVisible
    Background="Background.Light">
    <BarMenu>
        <BarStart>
            <BarItem>
                <BarLink @onclick="ToggleNavbar">
                    <BarIcon IconName="@(IsVisible ? IconName.ArrowLeft : IconName.ArrowRight)" />
                    Hide
                </BarLink>
            </BarItem>
            @if(Actions.Count > 0)
            {
                <Divider Class="my-0" />
            }
            @foreach(var action in Actions)
            {
                <BarItem Background="Background.White">
                    @if(action.To != null){
                        <BarLink To="@action.To">
                            <BarIcon IconName="action.IconName" />
                            @action.Label
                        </BarLink>
                    }
                    else
                    {
                        <BarLink @onclick="() => HandleActionClick(action)">
                            <BarIcon IconName="action.IconName" />
                            @action.Label
                        </BarLink>
                    }
                </BarItem>
            }
            @if(Reports.Count > 0)
            {
                <Divider Class="my-0" />
            }

            @{
                for (int x = 0; x < Reports.Count(); x++)
                {
                    var curReport = Reports[x];
                    //var 
                    @if (!StudyTypesExist(curReport, Reports))
                    {
                        <BarItem>
                            <BarLink To="@GetReportLink(curReport)">
                                <BarIcon IconName="@GetReportIcon(curReport)" />
                                @curReport.Name
                            </BarLink>
                        </BarItem>
                    }
                    else
                    {
                        var nextReport = Reports[x+1];
                        x++;
                        <BarItem>
                            <BarDropdown>
                                <BarDropdownToggle>
                                    <BarIcon IconName=@GetReportIcon(curReport) />
                                    @curReport.Name
                                </BarDropdownToggle>
                                <BarDropdownMenu>
                                    <BarDropdownItem Style="padding:0px 0px 0px 0px; margin:0px 0px 0px 0px;">
                                        <BarLink To="@GetReportLink(curReport)" Style="margin-left:0px;padding-left:10px;">
                                            @curReport.StudyType
                                        </BarLink>
                                    </BarDropdownItem>
                                    <BarDropdownItem Style="padding:0px 0px 0px 0px; margin:0px 0px 0px 0px;">
                                        <BarLink To="@GetReportLink(nextReport)" Style="margin-left:0px;padding-left:10px;">
                                            @nextReport.StudyType
                                        </BarLink>
                                    </BarDropdownItem>
                                </BarDropdownMenu>
                            </BarDropdown>
                        </BarItem>                            
                    }
                }
            }
        </BarStart>
    </BarMenu>
</Bar>
</Div>

@code {
    [Parameter] public IList<SecondaryNavAction> Actions { get; set; } = new List<SecondaryNavAction>();
    [Parameter] public IList<Report> Reports { get; set; } = new List<Report>();

    private bool IsVisible = true;
    private string defaultIcon = "fa-columns"; // https://blazorise.com/docs/extensions/icons-available

    protected void ToggleNavbar()
    {
        IsVisible = !IsVisible;
    }

    protected void HandleActionClick(SecondaryNavAction action)
    {
        if(action.OnClick != null)
        {
            action.OnClick.Invoke();
        }
    }

    protected string GetReportLink(Report report)
    {
        if(report.CustomPagePath != null)
        {
            return report.CustomPagePath;
        }
        else
        {
            return $"{WrConstants.DASHBOARD_PAGE_PATH}/{report.DashboardId}/{report.WRReportId}";
        }
    }

    protected string GetReportIcon(Report report)
    {
        return report.DisplayIconName ?? "defaultIcon";
    }

    protected bool StudyTypesExist(Report report, IList<Report> reports)
    {
        var dupeReports = reports.Count(r => r.Name == report.Name);
        return dupeReports > 1;
    }
}
