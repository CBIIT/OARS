@inject IHttpContextAccessor httpContextAccessor
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.ViewModels;
@using TheradexPortal.Data;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;

<Div Class="nci-secondary-nav">
<Bar Mode="BarMode.VerticalInline"
    CollapseMode="BarCollapseMode.Small"
    ThemeContrast="ThemeContrast.Light"
    @bind-Visible=IsVisible
    Background="Background.Light">
    <BarMenu>
        <BarStart>
            <BarItem>
                <BarLink @onclick="ToggleNavbar">
                    <BarIcon IconName="@(IsVisible ? IconName.ArrowLeft : IconName.ArrowRight)" />
                    Hide
                </BarLink>
            </BarItem>
            @if(Actions.Count > 0)
            {
                <Divider Class="my-0" />
            }
            @foreach(var action in Actions)
            {
                    @if (action.Label == "Add to Favorites" )
                    {
                        @if (!IsReportFavorite())
                        {
                            <BarItem Class="nci-secondary-nav-special">
                                <BarLink @onclick="() => HandleActionClick(action)">
                                    <BarIcon IconName="action.IconName" />
                                    @action.Label
                                </BarLink>
                            </BarItem>
                        }
                    }
                    else
                    {
                        @if (action.ShowAction)
                        {
                            <BarItem Class="nci-secondary-nav-special">
                            @if(action.To != null){
                                <BarLink To="@action.To" Class="action-link">
                                    <BarIcon IconName="action.IconName" />
                                    @action.Label
                                </BarLink>
                            }
                            else
                            {
                                <BarLink @onclick="() => HandleActionClick(action)">
                                    <BarIcon IconName="action.IconName" />
                                    @action.Label
                                </BarLink>
                            }
                            </BarItem>
                        }
                    }
            }
            @if(Reports.Count > 0)
            {
                <Divider Class="my-0" />
                <Divider DividerType="DividerType.Solid" />
            }
            @for (int x = 0; x < Reports.Count(); x=x)
            {
                var curReport = Reports[x];
                var reportCount = Level3Reports(curReport, Reports);

                @if (reportCount == 1)
                {
                    <BarItem>
                        <BarLink To="@GetReportLink(curReport)" Target="@GetReportTarget(curReport)">
                                @if (IsReportFavorite(curReport))
                                {
                                    <BarIcon IconName=IconName.Star />
                                }
                            <BarIcon IconName="@GetReportIcon(curReport)" />
                            @curReport.Name
                        </BarLink>
                    </BarItem>
                }
                else
                {
                    var startingIndex = x;
                    var subReportCount = reportCount;
                    <BarItem>
                        <BarDropdown>
                            <BarDropdownToggle>
                                @if (IsReportFavorite(curReport))
                                {
                                    <BarIcon IconName=IconName.Star />
                                }
                                <BarIcon IconName=@GetReportIcon(curReport) />
                                @curReport.Name
                            </BarDropdownToggle>
                            <BarDropdownMenu Style="margin-left: -35px;">
                                <TertiaryNav DashboardId="@curReport.DashboardId" Level2Name="@curReport.Name"></TertiaryNav>
                            </BarDropdownMenu>
                        </BarDropdown>
                    </BarItem>
                }
                x = x + reportCount;
            }
        </BarStart>
    </BarMenu>
</Bar>
</Div>

@code {
    [Inject] private IUserService userService { get; set; } = null!;
    [Parameter] public IList<SecondaryNavAction> Actions { get; set; } = new List<SecondaryNavAction>();
    [Parameter] public IList<Report> Reports { get; set; } = new List<Report>();
    [Parameter] public int ReportId { get; set; }

    private bool IsVisible = true;
    private string defaultIcon = "fa-columns"; // https://blazorise.com/docs/extensions/icons-available

    protected void ToggleNavbar()
    {
        IsVisible = !IsVisible;
    }

    protected void HandleActionClick(SecondaryNavAction action)
    {
        if(action.OnClick != null)
        {
            action.OnClick.Invoke();
        }
    }

    protected string GetReportLink(Report report)
    {
        // if(report.CustomPagePath != null)
        // {
        //     return $"{report.CustomPagePath}/{report.DashboardId}/{report.ReportId}";
        //     //return report.CustomPagePath;
        // }
        // else
        // {
             return $"{ThorConstants.DASHBOARD_PAGE_PATH}/{report.DashboardId}/{report.ReportId}";
        // }
    }

    protected string GetReportIcon(Report report)
    {
        return report.DisplayIconName ?? "defaultIcon";
    }

    protected bool IsReportFavorite(Report report)
    {
        if (httpContextAccessor != null && httpContextAccessor.HttpContext != null && httpContextAccessor.HttpContext.User != null && httpContextAccessor.HttpContext.User.Claims.Count() > 0)
        {
            int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
            return userService.IsReportFavorite(userId, report.ReportId);
        }
        else
            return false;

    }

    protected bool IsReportFavorite()
    {
        if (httpContextAccessor != null && httpContextAccessor.HttpContext != null && httpContextAccessor.HttpContext.User != null && httpContextAccessor.HttpContext.User.Claims.Count() > 0)
        {
            int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
            return userService.IsReportFavorite(userId, ReportId);
        }
        else
            return false;
    }

    protected Target GetReportTarget(Report report)
    {
        if (!String.IsNullOrEmpty(report.CustomPagePath) && report.CustomPagePath.StartsWith("http"))
            return Target.Blank;
        else
            return Target.Self;
    }

    protected int Level3Reports(Report report, IList<Report> reports)
    {
        return reports.Count(r => r.Name == report.Name);
    }

    protected List<Report> reports = new List<Report>();

    protected List<Report> GetTertiaryReports(int startingIndex, int count)
    {
        reports.Clear();
        for (int cnt = 0; cnt < count; cnt++)
        {
            if (startingIndex + cnt < Reports.Count())
                reports.Add(Reports[startingIndex + cnt]);
        }
        return reports;
    }
}
