@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services;
@using TheradexPortal.Data;
@using TheradexPortal.Data.Services.Abstract;

@if (activeAlerts.Count > 0)
{
    @foreach (var alert in activeAlerts)
    {
        <Alert Color="Color.Warning" Visible>
            <AlertDescription TextOverflow="TextOverflow.Wrap">@alert.AlertText</AlertDescription>
            <CloseButton @onclick="() => dismissAlert(alert)" />
        </Alert>
    }
}
else
{
    <Alert Color="Color.Info" Visible>
        <AlertDescription TextOverflow="TextOverflow.Wrap">No current alerts.</AlertDescription>
    </Alert>
}

@code {
    [Parameter] public bool Alert { get; set; } = false;
    [Parameter] public bool Note { get; set; } = false;
    [Parameter] public bool LoginScreen { get; set; } = false;
    [Parameter] public bool System { get; set; } = false;
    [Parameter] public bool Dashboard { get; set; } = false;
    [Parameter] public Dashboard SelectedDashboard { get; set; } = null!;

    private bool alertsHidden;
    private bool notesHidden;
    [Inject] private IAlertService alertService { get; set; } = null!;
    private BarItem? alertsItem;
    private BarItem? notesItem;
    private Color currentColor = Color.Info;
    private Color alertColor = Color.Warning;
    private Color noteColor = Color.Info;
    private IList<WRAlert> activeAlerts = new List<WRAlert>();

    protected override async Task OnInitializedAsync()
    {
        this.setCurrentColor();
        this.getSystemAlerts();
        this.getLoginAlerts();
        this.getDashboardAlerts();
        await base.OnInitializedAsync();
    }

    public void UpdateDashboard(Dashboard dashboard)
    {
        this.SelectedDashboard = dashboard;
        this.getDashboardAlerts();
    }

    private async void getSystemAlerts()
    {
        if (System)
        {
            if (Alert)
            {
                this.activeAlerts = await alertService.GetActiveSystemAlertsAsync();
            }
            if (Note)
            {
                this.activeAlerts = await alertService.GetActiveSystemNotesAsync();
            }
        }
    }

    private async void getLoginAlerts()
    {
        if (LoginScreen)
        {
            if (Alert)
            {
                this.activeAlerts = await alertService.GetActiveLoginAlertsAsync();
            }
            if (Note)
            {
                this.activeAlerts = await alertService.GetActiveLoginNotesAsync();
            }
        }
    }

    private async void getDashboardAlerts()
    {
        if (Dashboard)
        {
            if (Alert && this.SelectedDashboard != null)
            {
                this.activeAlerts = await alertService.GetActiveDashboardAlertsByIdAsync(this.SelectedDashboard.WRDashboardId);
            }
            if (Note && this.SelectedDashboard != null)
            {
                this.activeAlerts = await alertService.GetActiveDashboardNotesByIdAsync(this.SelectedDashboard.WRDashboardId);
            }
        }
    }

    private async void setCurrentColor()
    {
        if (Alert)
        {
            this.currentColor = this.alertColor;
        }
        if (Note)
        {
            this.currentColor = this.noteColor;
        }
    }

    private async Task dismissAlert(WRAlert alert)
    {

    }
}