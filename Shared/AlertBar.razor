@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services;
@using TheradexPortal.Data;
@using TheradexPortal.Data.Services.Abstract;

<BarItem @ref="@alertsItem" hidden="@alertsHidden">
    <BarDropdown RightAligned=System Visible="true">
        <BarDropdownToggle>
            <BarIcon IconName="IconName.ExclamationCircle" />
            Alerts
        </BarDropdownToggle>
        <BarDropdownMenu>
            @if (activeAlerts.Count > 0)
            {
                foreach (var alert in activeAlerts)
                {
                    <BarDropdownItem>@alert.AlertText</BarDropdownItem>
                }
            }
            else
            {
                <BarDropdownItem>No current alerts.</BarDropdownItem>
            }
        </BarDropdownMenu>
    </BarDropdown>
</BarItem>
<BarItem @ref="@notesItem" hidden="@notesHidden">
    <BarDropdown RightAligned=System>
        <BarDropdownToggle>
            <BarIcon IconName="IconName.InfoCircle" />
            Notes
        </BarDropdownToggle>
        <BarDropdownMenu>
            @if (activeNotes.Count > 0)
            {
                @foreach (var note in activeNotes)
                {
                    <BarDropdownItem>@note.AlertText</BarDropdownItem>
                }
            }
            else
            {
                <BarDropdownItem>No current notes.</BarDropdownItem>
            }
        </BarDropdownMenu>
    </BarDropdown>
</BarItem>

@code {
    private BarItem? alertsItem;
    private BarItem? notesItem;
    private bool alertsHidden;
    private bool notesHidden;
    [Parameter] public bool LoginScreen { get; set; } = false;
    [Parameter] public bool System { get; set; } = false;
    [Parameter] public bool Dashboard { get; set; } = false;
    [Parameter] public Dashboard SelectedDashboard { get; set; } = null!;
    [Inject] private IAlertService alertService { get; set; } = null!;
    private IList<WRAlert> activeAlerts = new List<WRAlert>();
    private IList<WRAlert> activeNotes = new List<WRAlert>();

    protected override async Task OnInitializedAsync()
    {
        this.getSystemAlerts();
        this.getLoginAlerts();
        this.getDashboardAlerts();
        await base.OnInitializedAsync();
    }

    public void UpdateDashboard(Dashboard dashboard)
    {
        this.SelectedDashboard = dashboard;
        this.getDashboardAlerts();
    }

    private async void getSystemAlerts()
    {
        if (System)
        {
            this.activeAlerts = await alertService.GetActiveSystemAlertsAsync();
            this.activeNotes = await alertService.GetActiveSystemNotesAsync();
        }
    }

    private async void getLoginAlerts()
    {
        if (LoginScreen)
        {
            this.activeAlerts = await alertService.GetActiveLoginAlertsAsync();
            this.activeNotes = await alertService.GetActiveLoginNotesAsync();
        }
    }

    private async void getDashboardAlerts()
    {
        if (Dashboard)
        {
            this.notesHidden = true;

            if (this.SelectedDashboard != null)
            {
                this.activeAlerts = await alertService.GetActiveDashboardAlertsByIdAsync(this.SelectedDashboard.WRDashboardId);
            }
        }
    }
}