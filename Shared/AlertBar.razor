@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services;
@using TheradexPortal.Data;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage SessionData

@if (this.NoAlertsMessage && this.Alert)
{
    <Alert Color="infoColor" Visible="@this.defaultAlertVisible">
        <AlertDescription TextOverflow="TextOverflow.Wrap">No current alerts.</AlertDescription>
    </Alert>
}
@if (this.NoAlertsMessage && this.Note)
{
    <Alert Color="infoColor" Visible="@this.defaultAlertVisible">
        <AlertDescription TextOverflow="TextOverflow.Wrap">No current notes.</AlertDescription>
    </Alert>
}

@if (this.activeAlerts.Count > 0)
{
    if (this.alertsSessionLoaded)
    {
        foreach (var alert in activeAlerts)
        {
            if (!this.Dismissable || !this.alertDismissed(this.dismissedAlerts!, alert) && alertService.AlertDatesValid(alert.StartDate, alert.EndDate))
            {
                <Alert Color="currentColor" Visible Class="@CSS">
                    <AlertDescription TextOverflow="TextOverflow.Wrap">@((MarkupString)alert.AlertText!)</AlertDescription>
                    @if (this.Dismissable && !this.Toggleable)
                    {
                        <CloseButton @onclick="() => dismissAlert(alert)" Class="nci-alert-closebutton" />
                    }
                    @if (this.Toggleable && !this.Dismissable)
                    {
                        <CloseButton @onclick="() => toggleAlert(alert)" Class="nci-alert-closebutton" />
                    }
                </Alert>
            }
        }
    }
    else
    {
        <Alert Color="infoColor" Visible>
            <AlertDescription TextOverflow="TextOverflow.Wrap">Loading Alerts...</AlertDescription>
        </Alert>
    }
}
else
{
    this.defaultAlertVisible = true;
}

@code {
    [Parameter] public bool Alert { get; set; } = false;
    [Parameter] public bool Note { get; set; } = false;
    [Parameter] public bool LoginScreen { get; set; } = false;
    [Parameter] public bool System { get; set; } = false;
    [Parameter] public bool Dashboard { get; set; } = false;
    [Parameter] public bool Dismissable { get; set; } = false;
    [Parameter] public bool Toggleable { get; set; } = false;
    [Parameter] public bool NoAlertsMessage { get; set; } = false;
    [Parameter] public string CSS { get; set; } = string.Empty;
    [Parameter] public EventCallback<int> AlertsCountChanged { get; set; }
    [Parameter] public EventCallback AlertBarToggled { get; set; }

    private bool alertsHidden;
    private bool notesHidden;
    private bool defaultAlertVisible;
    private bool alertsSessionLoaded;
    private bool pageLoaded;
    [Inject] private IAlertService alertService { get; set; } = null!;
    private BarItem? alertsItem;
    private BarItem? notesItem;
    private Color? currentColor;
    private Color? alertColor;
    private Color? noteColor;
    private Color? infoColor;
    private Dashboard selectedDashboard { get; set; } = null!;
    private IList<ThorAlert> activeAlerts = new List<ThorAlert>();
    private string? dismissedAlerts = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        this.pageLoaded = false;
        this.alertsSessionLoaded = false;
        await this.getSystemAlerts();
        await this.getLoginAlerts();
        await this.getDashboardAlerts();
        this.alertColor = await alertService.AlertColor();
        this.noteColor = await alertService.NoteColor();
        this.infoColor = await alertService.InfoColor();
        this.currentColor = this.noteColor;
        this.setCurrentColor();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadSessionAlerts();
            if (this.System)
            {
                await this.updateAlertsCount(this.getActiveAlertsCount());
            }
            this.pageLoaded = true;
            StateHasChanged();
        }
    }

    public async void UpdateDashboard(Dashboard dashboard)
    {
        this.selectedDashboard = dashboard;
        await this.getDashboardAlerts();
        StateHasChanged();
    }

    public void Clear()
    {
        this.selectedDashboard = new Data.Models.Dashboard() { DashboardId = 0 };
        this.activeAlerts = new List<ThorAlert>();
        StateHasChanged();
    }

    private async Task getSystemAlerts()
    {
        if (System)
        {
            if (Alert)
            {
                this.activeAlerts = await alertService.GetActiveSystemAlertsAsync();
            }
            if (Note)
            {
                this.activeAlerts = await alertService.GetActiveSystemNotesAsync();
            }
        }
    }

    private async Task getLoginAlerts()
    {
        if (LoginScreen)
        {
            if (Alert)
            {
                this.activeAlerts = await alertService.GetActiveLoginAlertsAsync();
            }
            if (Note)
            {
                this.activeAlerts = await alertService.GetActiveLoginNotesAsync();
            }
        }
    }

    private async Task getDashboardAlerts()
    {
        if (Dashboard)
        {
            if (Alert && this.selectedDashboard != null && this.selectedDashboard.DashboardId != 0)
            {
                this.activeAlerts = await alertService.GetActiveDashboardAlertsByIdAsync(this.selectedDashboard.DashboardId);
            }
            else
            {
                this.activeAlerts = new List<ThorAlert>();
            }
        }
    }

    private void setCurrentColor()
    {
        if (Alert)
        {
            this.currentColor = this.alertColor;
        }
        if (Note)
        {
            this.currentColor = this.noteColor;
        }
    }

    private bool alertDismissed(string dismissedAlerts, ThorAlert alert)
    {
        return dismissedAlerts.Split('|').Any(x => x == alert.AlertId.ToString());
    }

    private int getActiveAlertsCount()
    {
        var alertsCount = 0;

        foreach (var activeAlert in this.activeAlerts)
        {
            if (!this.alertDismissed(this.dismissedAlerts!, activeAlert))
            {
                alertsCount++;
            }
        }

        return alertsCount;
    }

    private async Task dismissAlert(ThorAlert alert)
    {
        if (!this.pageLoaded)
        {
            return;
        }

        var alertId = alert.AlertId.ToString();

        if (alert != null && !this.dismissedAlerts!.Contains(alertId))
        {
            if (this.dismissedAlerts.Length > 0)
            {
                this.dismissedAlerts += '|';
            }
            this.dismissedAlerts += alertId;
            await this.saveSessionAlerts(this.dismissedAlerts);
            await this.countSystemAlerts();
        }
    }

    private async Task toggleAlert(ThorAlert alert)
    {
        if (!this.pageLoaded)
        {
            return;
        }

        await this.AlertBarToggled.InvokeAsync();
    }

    private async Task LoadSessionAlerts()
    {
        var sessionDismissedAlerts = await SessionData.GetAsync<string>("dismissedAlerts");
        this.dismissedAlerts = sessionDismissedAlerts.Success ? sessionDismissedAlerts.Value : "";
        this.alertsSessionLoaded = true;
    }

    private async Task saveSessionAlerts(string newData)
    {
        await SessionData.SetAsync("dismissedAlerts", newData);
    }

    private async Task updateAlertsCount(int alertsCount)
    {
        await this.AlertsCountChanged.InvokeAsync(alertsCount);
    }

    private async Task countSystemAlerts()
    {
        if (this.System)
        {
            var alertsCount = this.getActiveAlertsCount();
            if (alertsCount.Equals(0))
            {
                this.defaultAlertVisible = true;
            }
            await this.updateAlertsCount(alertsCount);
        }
    }
}