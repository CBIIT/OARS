@using TheradexPortal.Data.Models
@using TheradexPortal.Data
@using TheradexPortal.Data.Services
@using Newtonsoft.Json
@using Microsoft.JSInterop;

<Row Background="Background.Light">
    <Column ColumnSize="ColumnSize.IsFull">
        <DataGrid TItem="Protocol"
                    Class=""
                    Data="@studyList"
                    SelectionMode="DataGridSelectionMode.Multiple"
                    SelectedRows="@selectedStudies"
                    Responsive
                    Filterable
                    Striped
                    ShowPager
                    FixedHeader
                    FixedHeaderDataGridHeight="calc(100vh - 350px)"
                    FixedHeaderDataGridMaxHeight="calc(100vh - 350px)"
                    PageSize="25"
                    CommandMode="DataGridCommandMode.ButtonRow">
                <DataGridColumns>
                    <DataGridMultiSelectColumn Width="30px"> </DataGridMultiSelectColumn>
                    <DataGridCommandColumn />
                    <DataGridColumn Field="@nameof(Protocol.StudyId)" Caption="Study ID"/>
                    <DataGridColumn Field="@nameof(Protocol.StudyDrug)" Caption="Primary Agent" />
                    <DataGridColumn Field="@nameof(Protocol.ProtocolTitle)" Caption="Title" />
                    <DataGridDateColumn Field="@nameof(Protocol.ActivationDT)" Caption="Activation Date">
                        <DisplayTemplate>
                            @{
                                var date = (context as Protocol)?.ActivationDT;

                                if (date != null)
                                {
                                    @(date.Value.ToShortDateString())
                                }
                            }
                        </DisplayTemplate>
                    </DataGridDateColumn>
                    <DataGridColumn Field="@nameof(Protocol.CurrentStatus)" Caption="Protocol Status" />
                    <DataGridColumn Field="@nameof(Protocol.StudyId)" Sortable="false" Filterable="false" Width="120px">
                        <DisplayTemplate>
                            <Button Color="Color.Info" Clicked="@(()=>OnOverviewClicked(context as Protocol))">
                                Overview
                            </Button>
                        </DisplayTemplate>
                    </DataGridColumn>
                </DataGridColumns>
            <ButtonRowTemplate>
                <Button Color="Color.Primary" Clicked="@Save">Save Studies</Button>
            </ButtonRowTemplate>

        </DataGrid>
    </Column>
</Row>


<Modal @ref="overviewRef">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Overview</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Table Hoverable>
                <TableBody>
                    <TableRow>
                        <TableRowHeader>Study ID</TableRowHeader>
                        <TableRowCell>@(overviewProtocol.StudyId)</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Title</TableRowHeader>
                        <TableRowCell>@(overviewProtocol.ProtocolTitle)</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Primary Investigator</TableRowHeader>
                        <TableRowCell>@(overviewProtocol.Investigator)</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Monitoring Method</TableRowHeader>
                        <TableRowCell>@(overviewProtocol.MonitoringMethod)</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Accrual (Screening/Intervention/Other)</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Date of Last EDC Update</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Total Patients In Web Reporting</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Total Patients Treated In Web Reporting</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Recent Enrollment In Web Reporting</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Subsequent Phase Activation Date</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                </TableBody>
            </Table>
        </ModalBody>
        <ModalFooter></ModalFooter>
    </ModalContent>
</Modal>

    @code {
    [Inject] StudyService studyService { get; set; } = null!;
    [Inject] IJSRuntime jsRuntime { get; set; }
    [Inject] INotificationService? notificationService { get; set; } = null!;

    [Parameter] public Action<List<Protocol>?>? OnSave { get; set; } = null!;

    private IList<Protocol>? studyList;
    private List<Protocol>? selectedStudies;
    private IReadOnlyList<DateTime?> selectedDates;
    private Modal? overviewRef;
    private Protocol overviewProtocol = new Protocol();
    // get studies for grid
    protected override async Task OnInitializedAsync()
    {
        studyList = await studyService.GetAllProtocolsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // apply filters from localstorage
            // TODO load selection from database
            string? json = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "selectedStudies");
            if (json != null)
            {
                var storedProtocols = JsonConvert.DeserializeObject<List<Protocol>>(json);
                if (storedProtocols != null)
                {
                    var ids = storedProtocols.Select(x => x.StudyId).ToList();
                    selectedStudies = studyList.Where(x => ids.Contains(x.StudyId)).ToList();
                    StateHasChanged();
                }
            }
        }
    }

    // filter by dates
    private Task FilterByDates() 
    {
        studyList = studyList.Where(x => selectedDates.Contains(x.ActivationDT)).ToList();
        return Task.CompletedTask;
    }

    // drop down menu for protocol status


    // study selection handler
    private bool RowSelectableHandler(RowSelectableEventArgs<Protocol> rowSelectableEventArgs)
    => rowSelectableEventArgs.SelectReason is not DataGridSelectReason.RowClick;

    private async void Save()
    {
        // TODO save selection to database
        string json = JsonConvert.SerializeObject(selectedStudies, Formatting.Indented);
        Console.WriteLine(json);
        await jsRuntime.InvokeVoidAsync("localStorage.setItem", "selectedStudies", json);

        // Notify user
        if(notificationService != null)
        {
            await notificationService.Success("Studies Updated");
        }

        // Notify calling component
        if(OnSave != null)
        {
            OnSave.Invoke(selectedStudies);
        }
    }

    private Task OnOverviewClicked(Protocol p)
    {
        //feed protocol to overview modal
        overviewProtocol = p;
        return overviewRef.Show();
    }


    // checkbox X
    // study id X
    // primary agent X
    // secondary agent
    // other (list of other agents--must be searchable)
    // title (study title) X
    // protocol status X (multi-select)


    // Overview
        // Protocol
        // Protocol Title 
        // Primary Investigator 
        // Monitoring Method
        // Accrual (Screening/Intervention/Other)
        // Date of Last EDC Update
        // Total Patients in Web Reporting
        // Total Patients Treated in Web Reporting
        // Recent Enrollment in Web Reporting
        // Subsequent Phase Activation Date
}