@using TheradexPortal.Data.Models
@using TheradexPortal.Data
@using TheradexPortal.Data.Services
@using Newtonsoft.Json
@using Microsoft.JSInterop;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@inject IHttpContextAccessor httpContextAccessor

<Alert Color="Color.Warning" @bind-Visible="@alertVisible">
    <AlertMessage>
        Please select at least one study.&nbsp;&nbsp;
    </AlertMessage>
    <CloseButton />
</Alert>
<Row Background="Background.Light">
    <Column ColumnSize="ColumnSize.IsFull">
        <DataGrid @ref="datagridRef"
                    TItem="Protocol"
                    Data="@studyList"
                    SelectionMode="DataGridSelectionMode.Multiple"
                    @bind-SelectedRows="@selectedStudies"
                    Responsive
                    Filterable
                    Editable
                    Striped
                    ShowPager
                    FixedHeader
                    FixedHeaderDataGridHeight="calc(100vh - 350px)"
                    FixedHeaderDataGridMaxHeight="calc(100vh - 350px)"
                    PageSize="25"
                    CommandMode="DataGridCommandMode.ButtonRow">
                <DataGridColumns>
                    <DataGridMultiSelectColumn Width="30px"> </DataGridMultiSelectColumn>
                    <DataGridCommandColumn Caption="Teddddd" />
                    <DataGridColumn Field="@nameof(Protocol.StudyId)" Caption="Study ID"/>
                    <DataGridColumn Field="@nameof(Protocol.StudyDrug)" Caption="Primary Agent" />
                    <DataGridColumn Field="@nameof(Protocol.ProtocolTitle)" Caption="Title" />
                    <DataGridDateColumn Field="@nameof(Protocol.ActivationDT)" Caption="Activation Date">
                        <DisplayTemplate>
                            @{
                                var date = (context as Protocol)?.ActivationDT;

                                if (date != null)
                                {   
                                    @(date.Value.ToString("dd-MMM-yyyy"))
                                }
                            }
                        </DisplayTemplate>
                    </DataGridDateColumn>
                    <DataGridColumn Field="@nameof(Protocol.CurrentStatus)" Caption="Protocol Status" />
                    <DataGridColumn Field="@nameof(Protocol.StudyId)" Sortable="false" Filterable="false" Width="120px">
                        <DisplayTemplate>
                            <Button Color="Color.Info" Clicked="@(()=>OnOverviewClicked(context as Protocol))">
                                Overview
                            </Button>
                        </DisplayTemplate>
                    </DataGridColumn>
                </DataGridColumns>
            <ButtonRowTemplate>
                <Button Color="Color.Primary" Clicked="@Save">Load Studies</Button>
            </ButtonRowTemplate>
        </DataGrid>
    </Column>
</Row>

<Modal @ref="overviewRef">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Overview</ModalTitle>
            <CloseButton TextColor="TextColor.White" Background="Background.White" />
        </ModalHeader>
        <ModalBody>
            <Table Hoverable>
                <TableBody>
                    <TableRow>
                        <TableRowHeader>Study ID</TableRowHeader>
                        <TableRowCell>@(overviewProtocol.StudyId)</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Title</TableRowHeader>
                        <TableRowCell>@(overviewProtocol.ProtocolTitle)</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Primary Investigator</TableRowHeader>
                        <TableRowCell>@(overviewProtocol.Investigator)</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Monitoring Method</TableRowHeader>
                        <TableRowCell>@(overviewProtocol.MonitoringMethod)</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Accrual (Screening/Intervention/Other)</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Date of Last EDC Update</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Total Patients In Web Reporting</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Total Patients Treated In Web Reporting</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Recent Enrollment In Web Reporting</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Subsequent Phase Activation Date</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                </TableBody>
            </Table>
        </ModalBody>
        <ModalFooter></ModalFooter>
    </ModalContent>
</Modal>

    @code {
    [Inject] IStudyService studyService { get; set; } = null!;
    [Inject] IJSRuntime jsRuntime { get; set; }
    [Inject] INotificationService? notificationService { get; set; } = null!;
    [Inject] private IUserService userService { get; set; } = null!;
    [Inject] private NavigationManager navigation {get; set; } = null!;

    [Parameter] public Action<List<Protocol>?>? OnSave { get; set; } = null!;

    private IList<Protocol>? studyList;
    private List<Protocol>? selectedStudies;
    private IReadOnlyList<DateTime?> selectedDates;
    private Modal? overviewRef;
    private Protocol overviewProtocol = new Protocol();
    protected DataGrid<Protocol> datagridRef;

    private bool alertVisible = false;

    // get studies for grid
    protected override async Task OnInitializedAsync()
    {
        alertVisible = false;
        bool isAdmin = httpContextAccessor.HttpContext.User.HasClaim(WRClaimType.IsAdmin, "True");
        int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(WRClaimType.UserId).Value);
        studyList = studyService.GetProtocolsForUserAsync(userId, isAdmin);

        // Get the selected studies from the user
        //IList<Protocol> protocols = studyService.GetFilteredStudiesForUser(userId);
        //await datagridRef.Refresh();
        //datagridRef
        //selectedStudies = protocols.ToList();

        //await InvokeAsync( StateHasChanged );
    }

    //protected async Task OnReadData(DataGridReadDataEventArgs<Protocol> e)
    //{
    //    StateHasChanged();
    //}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        alertVisible = false;
        if (firstRender)
        {
            //forach (var row in datagridRef.DetailRowTemplate.Target)
            //await datagridRef.Reload();
            //datagridRef.SelectedRows = selectedStudies;
            //datagridRef
            //await InvokeAsync( StateHasChanged );

            //datagridRef.SelectedRows.Select(selectedStudies);
            //    int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(WRClaimType.UserId).Value);
            //    List<Protocol> protocols = studyService.GetFilteredStudiesForUser(userId);
            //    selectedStudies = protocols.ToList();

            //    StateHasChanged();
        }

        //if (firstRender)
        //{
        //    // apply filters from localstorage
        //    // TODO load selection from database
        //    string? json = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "selectedStudies");
        //    if (json != null)
        //    {
        //        var storedProtocols = JsonConvert.DeserializeObject<List<Protocol>>(json);
        //        if (storedProtocols != null)
        //        {
        //            var ids = storedProtocols.Select(x => x.StudyId).ToList();
        //            selectedStudies = studyList.Where(x => ids.Contains(x.StudyId)).ToList();
        //            StateHasChanged();
        //        }
        //    }
        //}
    }

    // filter by dates
    private Task FilterByDates() 
    {
        studyList = studyList.Where(x => selectedDates.Contains(x.ActivationDT)).ToList();
        return Task.CompletedTask;
    }

    // drop down menu for protocol status


    // study selection handler
    private bool RowSelectableHandler(RowSelectableEventArgs<Protocol> rowSelectableEventArgs)
    => rowSelectableEventArgs.SelectReason is not DataGridSelectReason.RowClick;

    private async void Save()
    {
        if (selectedStudies != null && selectedStudies.Count > 0)
        {
            string studiesToSave = "";
            foreach (Protocol study in selectedStudies)
            {
                studiesToSave += study.StudyId + ",";
            }
            studiesToSave = studiesToSave.TrimEnd(',');

            int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(WRClaimType.UserId).Value);
            bool saved = userService.SaveSelectedStudies(userId, studiesToSave);

            // Navigate to first dashboard
            if (OnSave == null)
            {
                string dashboards = httpContextAccessor.HttpContext.User.FindFirst(WRClaimType.Dashboards).Value;
                dashboards = dashboards.TrimStart('|').Split('|')[0];
                navigation.NavigateTo($"{WrConstants.DASHBOARD_PAGE_PATH}/{dashboards}", new NavigationOptions { ReplaceHistoryEntry = true });
            }
            else
                OnSave.Invoke(selectedStudies);


            // Notify user
            //if (notificationService != null)
            //{
            //    if (saved)
            //        await notificationService.Success("Studies Updated");
            //    else
            //        await notificationService.Error("Save Failed");
            //}



            // Notify calling component
            //if (OnSave != null)
            //{
            //    OnSave.Invoke(selectedStudies);
            //}
        }
        else
        {
            alertVisible = true;
        }
    }

    private Task OnOverviewClicked(Protocol p)
    {
        //feed protocol to overview modal
        overviewProtocol = p;
        return overviewRef.Show();
    }


    // checkbox X
    // study id X
    // primary agent X
    // secondary agent
    // other (list of other agents--must be searchable)
    // title (study title) X
    // protocol status X (multi-select)


    // Overview
        // Protocol
        // Protocol Title 
        // Primary Investigator 
        // Monitoring Method
        // Accrual (Screening/Intervention/Other)
        // Date of Last EDC Update
        // Total Patients in Web Reporting
        // Total Patients Treated in Web Reporting
        // Recent Enrollment in Web Reporting
        // Subsequent Phase Activation Date
}