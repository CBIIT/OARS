@using TheradexPortal.Data.Models
@using TheradexPortal.Data
@using TheradexPortal.Data.Services
@using Newtonsoft.Json
@using Microsoft.JSInterop;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@inject IHttpContextAccessor httpContextAccessor
@inject IConfiguration configuration

<Alert Color="Color.Warning" @bind-Visible="@alertVisible">
    <AlertMessage>
        Please select at least one study to continue.&nbsp;&nbsp;
    </AlertMessage>
    <CloseButton />
</Alert>
        <DataGrid @ref="datagridRef"
                    Class="studygrid"
                    TItem="Protocol"
                    Data="@studyList"
                    SelectionMode="DataGridSelectionMode.Multiple"
                    @bind-SelectedRow="@selectedStudy"
                    @bind-SelectedRows="selectedStudies"
                    Responsive
                    Sortable
                    SortMode="DataGridSortMode.Single"
                    Filterable
                    Editable
                    Striped
                    ShowPager
                    ShowPageSizes
                    MaxPaginationLinks="5"
                    PagerPosition="DataGridPagerPosition.Bottom"
                    PagerOptions="new(){ButtonSize=Size.Default, 
                                  PaginationPosition=PagerElementPosition.Default,
                                  TotalItemsPosition=PagerElementPosition.End,
                                  }"
                    FixedHeader
                    FixedHeaderDataGridHeight="calc(100vh - 240px)"
                    FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
                    CommandMode="DataGridCommandMode.ButtonRow">
                <DataGridColumns>
                    <DataGridMultiSelectColumn Width="30px">
                    </DataGridMultiSelectColumn>
                    <DataGridCommandColumn />
                    <DataGridColumn Width="50px" Caption="Hx" Filterable="false" Field="@nameof(Protocol.RecentOrder)" SortDirection="SortDirection.Descending">
                        <DisplayTemplate>
                            <Figure Size="FigureSize.Is32x32" Class="mx-auto">
                                <FigureImage Source="img/recent.jpg" Class="mx-auto" Visibility="@CheckRecentStudy(context as Protocol)" AlternateText="Recently Selected" />
                            </Figure>
                        </DisplayTemplate>
                    </DataGridColumn> 
                    <DataGridColumn Width="100px" Field="@nameof(Protocol.StudyId)" Caption="Study ID" />
                    <DataGridColumn Field="@nameof(Protocol.PrimaryAgent)" Caption="Primary Agent" />
                    <DataGridColumn Field="@nameof(Protocol.OtherAgents)" Caption="Other Agents" >
                        <DisplayTemplate> 
                            @{
                            var otherAgents = (context as Protocol)?.OtherAgents;
                            var newItemMark = '-';
                            if (otherAgents != null)
                            {
                                var otherAgentsList = otherAgents.Split(',').ToList();
                                @if (otherAgentsList.Count > 1)
                                {
                                    @foreach (var agent in otherAgentsList)
                                    {
                                        @newItemMark @agent
                                        <br/>
                                    }
                                }
                                else
                                {
                                    var agent = otherAgentsList.FirstOrDefault();
                                    @agent
                                }
                            }
                            else
                            {
                                
                            }
                            }
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(Protocol.ProtocolTitle)" Caption="Title" />
                    <DataGridDateColumn Width="150px" Field="@nameof(Protocol.ActivationDT)" Caption="Activation Date">
                        <DisplayTemplate>
                            @{
                                var date = (context as Protocol)?.ActivationDT;

                                if (date != null)
                                {   
                                    @(date.Value.ToString("dd-MMM-yyyy"))
                                }
                            }
                        </DisplayTemplate>
                    </DataGridDateColumn>
                    <DataGridColumn Width="200px" Field="@nameof(Protocol.CurrentStatus)" Caption="Protocol Status" />
                    <DataGridColumn Width="120px" Field="@nameof(Protocol.StudyId)" Sortable="false" Filterable="false">
                        <DisplayTemplate>
                            <div @onclick:stopPropagation="true" @onclick:preventDefault="true">
                                <Button Color="Color.Info" Size="Size.Small" Clicked="@(()=>OnOverviewClicked(context as Protocol))">
                                    Overview
                                </Button>
                            </div>
                        </DisplayTemplate>
                    </DataGridColumn>
                </DataGridColumns>
            <ButtonRowTemplate>
                <Button Color="Color.Primary" Clicked="@Save">Load Studies</Button>
            </ButtonRowTemplate>
        </DataGrid>

<StudyOverview @ref="studyOverview" />

@code {
    [Inject] IStudyService studyService { get; set; } = null!;
    [Inject] IJSRuntime jsRuntime { get; set; }
    [Inject] INotificationService? notificationService { get; set; } = null!;
    [Inject] private IUserService userService { get; set; } = null!;
    [Inject] private NavigationManager navigation {get; set; } = null!;

    [Parameter] public Action<List<Protocol>?>? OnSave { get; set; } = null!;

    private List<Protocol> studyList;
    private Protocol selectedStudy;
    private List<Protocol> selectedStudies;
    private IReadOnlyList<DateTime?> selectedDates;
    private StudyOverview? studyOverview;
    private Protocol overviewProtocol = new Protocol();
    protected DataGrid<Protocol>? datagridRef;
    private IList<string> recentStudies;
    //private bool saveNavigationLog = true;
    private TimeSpan currentOffset;
    private String timeZoneAbbrev;

    private bool alertVisible = false;

    // get studies for grid
    protected override async Task OnInitializedAsync()
    {
        alertVisible = false;
        //bool isAdmin = httpContextAccessor.HttpContext.User.HasClaim(ThorClaimType.IsAdmin, "True");
        int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
        User curUser = await userService.GetUserAsync(userId);
        studyList = studyService.GetProtocolsForUserAsync(userId, curUser.AllStudies).ToList();

        List<Protocol> defaultStudies = studyService.GetSelectedStudiesForUser(userId);
        if (defaultStudies.Count == 0)
            alertVisible = true;

        int recentCount = configuration.GetValue<int>("System:RecentHistoryCount");
        recentStudies = await userService.GetProtocolHistoryAsync(userId, recentCount);
        for (int iOrder=1; iOrder <= recentStudies.Count; iOrder++)
        {
            Protocol? foundStudy = studyList.FirstOrDefault(p => p.StudyId == recentStudies[iOrder-1]);
            if (foundStudy != null)
                foundStudy.RecentOrder = recentStudies.Count - iOrder + 1;  // Show most recent first
        }

        // Get the selected studies from the user
        //selectedStudies = studyService.GetSelectedStudiesForUser(userId);

        await base.OnInitializedAsync();

        // TRYING TO RE_SELECT SELECTED STUDIES

        //IList<Protocol> protocols = studyService.GetProtocolsForUserAsync(1, false);
        //await datagridRef.Select(protocols[0]);
        //await datagridRef.Refresh();
        //datagridRef
        //List<Protocol> curProts = studyService.GetSelectedStudiesForUser(userId);

        //selectedStudies = curProts;
        //datagridRef.Refresh();
        //selectedStudies = studyList.ToList();  //.Intersect(curProts).ToList(); //studyService.GetSelectedStudiesForUser(userId).ToList();

        //await InvokeAsync( StateHasChanged );
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        alertVisible = false;
        if (firstRender)
        {
            int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);

            // Since this is the first page after logging in, here is where we will pull the TimeZone info
            try
            {
                TimeZoneService tzs = new TimeZoneService(jsRuntime);
                Tuple<string, TimeSpan> timeInfo = await tzs.GetZoneAndOffset();
                timeZoneAbbrev = timeInfo.Item1;
                currentOffset = timeInfo.Item2;

                userService.SaveTimeZoneInfo(userId, timeZoneAbbrev, currentOffset);
            }
            catch (Exception ex)
            {
                // Write to error log - could not retrieve timezone
            }
            //if (saveNavigationLog)
            //{
            //    int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
            //    userService.SaveActivityLog(userId, WRActivityType.Navigation, "Dashboard", "My Studies");
            //}

            //IList<Protocol> protocols = studyService.GetProtocolsForUserAsync(1, false);
            //await datagridRef.Select(protocols[0]);
            //datagridRef.SelectedRowChanged();
            //forach (var row in datagridRef.DetailRowTemplate.Target)
            //await datagridRef.Reload();
            //datagridRef.SelectedRows = selectedStudies;
            //datagridRef
            //await InvokeAsync( StateHasChanged );

            //datagridRef.SelectedRows.Select(selectedStudies);
            //    int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
            //    List<Protocol> protocols = studyService.GetFilteredStudiesForUser(userId);
            //    selectedStudies = protocols.ToList();

            //    StateHasChanged();
        }

        //if (firstRender)
        //{
        //    // apply filters from localstorage
        //    // TODO load selection from database
        //    string? json = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "selectedStudies");
        //    if (json != null)
        //    {
        //        var storedProtocols = JsonConvert.DeserializeObject<List<Protocol>>(json);
        //        if (storedProtocols != null)
        //        {
        //            var ids = storedProtocols.Select(x => x.StudyId).ToList();
        //            selectedStudies = studyList.Where(x => ids.Contains(x.StudyId)).ToList();
        //            StateHasChanged();
        //        }
        //    }
        //}
    }

    // filter by dates
    private Task FilterByDates() 
    {
        studyList = studyList.Where(x => selectedDates.Contains(x.ActivationDT)).ToList();
        return Task.CompletedTask;
    }

    // drop down menu for protocol status


    // study selection handler
    private bool RowSelectableHandler(RowSelectableEventArgs<Protocol> rowSelectableEventArgs)
    => rowSelectableEventArgs.SelectReason is not DataGridSelectReason.RowClick;

    private async void Save()
    {
        if (selectedStudies != null && selectedStudies.Count > 0)
        {
            string studiesToSave = "";
            string firstStudy = "";
            foreach (Protocol study in selectedStudies)
            {
                firstStudy = firstStudy == "" ? study.StudyId : firstStudy;
                studiesToSave += study.StudyId + ",";
            }
            studiesToSave = studiesToSave.TrimEnd(',');

            int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
            bool saved = userService.SaveSelectedStudies(userId, studiesToSave, true);
            saved = userService.SaveActivityLog(userId, ThorActivityType.Study, "Filter Studies", studiesToSave);
            saved = userService.SaveActivityLog(userId, ThorActivityType.Study, "Default Study", firstStudy);

            // Navigate to first dashboard
            if (OnSave == null)
            {
                string dashboards = httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.Dashboards).Value;
                dashboards = dashboards.TrimStart('|').Split('|')[0];
                navigation.NavigateTo($"{ThorConstants.DASHBOARD_PAGE_PATH}/{dashboards}", new NavigationOptions { ReplaceHistoryEntry = true });
            }
            else
                OnSave.Invoke(selectedStudies);


            // Notify user
            //if (notificationService != null)
            //{
            //    if (saved)
            //        await notificationService.Success("Studies Updated");
            //    else
            //        await notificationService.Error("Save Failed");
            //}



            // Notify calling component
            //if (OnSave != null)
            //{
            //    OnSave.Invoke(selectedStudies);
            //}
        }
        else
        {
            alertVisible = true;
        }
    }

    private Task OnOverviewClicked(Protocol p)
    {
        //feed protocol to overview modal
        overviewProtocol = p;
        studyOverview?.ShowStudy(overviewProtocol);

        return Task.CompletedTask;
    }

    private Blazorise.Visibility CheckRecentStudy(Protocol p)
    {
        if (p.RecentOrder >= 1)
            return Visibility.Visible;
        else
            return Visibility.Invisible;
    }

    // checkbox X
    // study id X
    // primary agent X
    // secondary agent
    // other (list of other agents--must be searchable)
    // title (study title) X
    // protocol status X (multi-select)


    // Overview
        // Protocol
        // Protocol Title 
        // Primary Investigator 
        // Monitoring Method
        // Accrual (Screening/Intervention/Other)
        // Date of Last EDC Update
    // Total Patients in Theradex Oncology Reporting
    // Total Patients Treated in Theradex Oncology Reporting
    // Recent Enrollment in Theradex Oncology Reporting
    // Subsequent Phase Activation Date
}