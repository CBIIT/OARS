@using TheradexPortal.Data.Models
@using TheradexPortal.Data
@using TheradexPortal.Data.Services
@using Newtonsoft.Json
@using Microsoft.JSInterop;

@inject StudyService studyService
@inject IJSRuntime jsRuntime


<DataGrid TItem="Protocol" class="bg-dark"
            Data="@studyList"
            SelectionMode="DataGridSelectionMode.Multiple"
            SelectedRows="@selectedStudies"
            Responsive
            Filterable
            Striped
            FixedHeader
            FixedHeaderDataGridMaxHeight="500px"
            ShowPager
            PageSize="5"
            PagerPosition="DataGridPagerPosition.Top"
            PagerOptions="new(){ ButtonSize=Size.Small }">
        <DataGridColumns>
            <DataGridMultiSelectColumn Width="30px"> </DataGridMultiSelectColumn>
            <DataGridCommandColumn />
            <DataGridColumn Field="@nameof(Protocol.Study_Id)" Caption="Study ID" Filterable="false"/>
            <DataGridColumn Field="@nameof(Protocol.Study_Drug)" Caption="Primary Agent" />
            <DataGridColumn Field="@nameof(Protocol.Protocol_Title)" Caption="Title" />
            <DataGridDateColumn Field="@nameof(Protocol.Activation_DT)" Caption="Activation Date">
                <DisplayTemplate>
                    @{
                        var date = (context as Protocol)?.Activation_DT;

                        if (date != null)
                        {
                            @(date.Value.ToShortDateString())
                        }
                    }
                </DisplayTemplate>
                <FilterTemplate>
                    <DatePicker @bind-Dates="selectedDates" TValue="DateTime?" InputMode="DateInputMode.Date" SelectionMode="DateInputSelectionMode.Range" />
                </FilterTemplate>
            </DataGridDateColumn>
            <DataGridColumn Field="@nameof(Protocol.Current_Status)" Caption="Protocol Status" />
            <DataGridColumn Field="@nameof(Protocol.Study_Id)" Sortable="false" Filterable="false" Caption="Overview" Width="120px">
                <DisplayTemplate>
                    <Button Color="Color.Primary" Clicked="@(()=>OnOverviewClicked(context as Protocol))">
                        Overview
                    </Button>
                </DisplayTemplate>
            </DataGridColumn>
        </DataGridColumns>
                    
        <PageButtonTemplate>
            <Span TextColor="TextColor.Success">
                @context.PageNumber
            </Span>
        </PageButtonTemplate>
        <NextPageButtonTemplate><Icon Name="IconName.StepForward" TextColor="TextColor.Success" /></NextPageButtonTemplate>
        <PreviousPageButtonTemplate><Icon Name="IconName.StepBackward" TextColor="TextColor.Success" /></PreviousPageButtonTemplate>
        <LastPageButtonTemplate><Icon Name="IconName.Forward" TextColor="TextColor.Success" /></LastPageButtonTemplate>
        <FirstPageButtonTemplate><Icon Name="IconName.Backward" TextColor="TextColor.Success" /></FirstPageButtonTemplate>
        <TotalItemsTemplate><Badge Color="Color.Success">@context.TotalItems total items</Badge></TotalItemsTemplate>
        <TotalItemsShortTemplate><Badge Color="Color.Success">@context.TotalItems</Badge></TotalItemsShortTemplate>
        <PageSelectorTemplate>
            <Select TextColor="TextColor.Success" @bind-SelectedValue="@context.CurrentPage" Size="Size.Small">
                @for ( int i = context.FirstVisiblePage; i <= context.LastVisiblePage; ++i )
                {
                    var pageNumber = i;
                    <SelectItem Value="@pageNumber">@pageNumber</SelectItem>
                }
            </Select>
        </PageSelectorTemplate>
        <PageSizesTemplate>
            <Select TextColor="TextColor.Success" @bind-SelectedValue="@context.CurrentPageSize" Size="Size.Small">
                @foreach (var curPageSize in context.PageSizes)
                {
                    <SelectItem Value="@curPageSize">@curPageSize</SelectItem>
                }
            </Select>
        </PageSizesTemplate>
</DataGrid>
<Button Color="Color.Secondary" Clicked="@Save">Load Selections</Button>


<Modal @ref="overviewRef">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Overview</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Table Hoverable>
                <TableBody>
                    <TableRow>
                        <TableRowHeader>Study ID</TableRowHeader>
                        <TableRowCell>@(overviewProtocol.Study_Id)</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Title</TableRowHeader>
                        <TableRowCell>@(overviewProtocol.Protocol_Title)</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Primary Investigator</TableRowHeader>
                        <TableRowCell>@(overviewProtocol.Investigator)</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Monitoring Method</TableRowHeader>
                        <TableRowCell>@(overviewProtocol.Monitoring_Method)</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Accrual (Screening/Intervention/Other)</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Date of Last EDC Update</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Total Patients In Web Reporting</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Total Patients Treated In Web Reporting</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Recent Enrollment In Web Reporting</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Subsequent Phase Activation Date</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                </TableBody>
            </Table>
        </ModalBody>
        <ModalFooter></ModalFooter>
    </ModalContent>
</Modal>

    @code {
    [Parameter]
    public Action<List<Protocol>?>? OnSave { get; set; }

    private IList<Protocol>? studyList;
    private List<Protocol>? selectedStudies;
    private IReadOnlyList<DateTime?> selectedDates;
    private Modal? overviewRef;
    private Protocol overviewProtocol = new Protocol();
    // get studies for grid
    protected override async Task OnInitializedAsync()
    {
        studyList = await studyService.GetAllProtocolsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // apply filters from localstorage
            // TODO load selection from database
            string? json = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "selectedStudies");
            if (json != null)
            {
                var storedProtocols = JsonConvert.DeserializeObject<List<Protocol>>(json);
                if (storedProtocols != null)
                {
                    var ids = storedProtocols.Select(x => x.Study_Id).ToList();
                    selectedStudies = studyList.Where(x => ids.Contains(x.Study_Id)).ToList();
                    StateHasChanged();
                }
            }
        }
    }

    // filter by dates
    private Task FilterByDates() 
    {
        studyList = studyList.Where(x => selectedDates.Contains(x.Activation_DT)).ToList();
        return Task.CompletedTask;
    }

    // drop down menu for protocol status


    // study selection handler
    private bool RowSelectableHandler(RowSelectableEventArgs<Protocol> rowSelectableEventArgs)
    => rowSelectableEventArgs.SelectReason is not DataGridSelectReason.RowClick;

    private async void Save()
    {
        // TODO save selection to database
        string json = JsonConvert.SerializeObject(selectedStudies, Formatting.Indented);
        Console.WriteLine(json);
        await jsRuntime.InvokeVoidAsync("localStorage.setItem", "selectedStudies", json);

        // Notify calling component
        if(OnSave != null)
        {
            OnSave.Invoke(selectedStudies);
        }
    }

    private Task OnOverviewClicked(Protocol p)
    {
        //feed protocol to overview modal
        overviewProtocol = p;
        return overviewRef.Show();
    }


    // checkbox X
    // study id X
    // primary agent X
    // secondary agent
    // other (list of other agents--must be searchable)
    // title (study title) X
    // protocol status X (multi-select)


    // Overview
        // Protocol
        // Protocol Title 
        // Primary Investigator 
        // Monitoring Method
        // Accrual (Screening/Intervention/Other)
        // Date of Last EDC Update
        // Total Patients in Web Reporting
        // Total Patients Treated in Web Reporting
        // Recent Enrollment in Web Reporting
        // Subsequent Phase Activation Date
}