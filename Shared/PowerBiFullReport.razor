@using System.Net.Http
@using System.Threading.Tasks
@using Microsoft.Extensions.Options;
@using TheradexPortal.Data
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.PowerBI
@using TheradexPortal.Data.PowerBI.Abstract;
@using TheradexPortal.Data.PowerBI.Models;
@using TheradexPortal.Data.Static;
@using TheradexPortal.Data.Services;
@using TheradexPortal.Data.Services.Abstract;
@inject IHttpContextAccessor httpContextAccessor;

<div @ref="@pbiElement" class="pbi-embed-container" />


@code {
    [Inject] private IJSRuntime js { get; set; } = null!;
    [Inject] private IOptions<PowerBI> powerBiConfig { get; set; } = null!;
    [Inject] private IPbiEmbedService pbiEmbedService { get; set; } = null!;
    [Inject] private IStudyService studyService { get; set; } = null!;
    [Inject] private IUserService userService { get; set; } = null!;
    [Inject] private IDashboardService dashboardService { get; set; } = null!;

    [Parameter] public Dashboard? Dashboard { get; set; }
    [Parameter] public Report? Report {get; set; }
    [CascadingParameter] LoadingIndicator loadingIndicator { get; set; } = null!;

    private ElementReference pbiElement;
    private IJSObjectReference? pbiEmbedModule;
    private IJSObjectReference? reportRef;
    private DotNetObjectReference<PowerBiFullReport>? objRef;
    private static Func<string, Task> UpdateFilterActionAsync;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UpdateFilterActionAsync= LocalChangUpdateFilterValueAsync;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await loadingIndicator.Show();
        pbiEmbedModule = await js.InvokeAsync<IJSObjectReference>("import", "./js/powerbi-embed-fullreport.js");
        objRef = DotNetObjectReference.Create(this);
        await EmbedFullReportJS();
        await loadingIndicator.Hide();
    }

    public async Task Update()
    {
        if (reportRef != null)
        {
            await loadingIndicator.Show();
            await EmbedFullReportJS();
            await loadingIndicator.Hide();
        }
    }

    public async Task EmbedFullReportJS()
    {
        var userEmail = httpContextAccessor.HttpContext?.User?.FindFirst("preferred_username")?.Value;
        bool isAdmin = httpContextAccessor.HttpContext.User.HasClaim(WRClaimType.IsAdmin, "True");
        int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(WRClaimType.UserId).Value);
        var currentStudy = "";

        IList<Protocol> protocols = studyService.GetCurrentStudiesForUser(userId);

        // For now, limit to one study filter at a time.
        if (protocols.Count == 0)
            currentStudy = null;
        else
            currentStudy = protocols[0].StudyId;

        string[] filteredStudiesArray; //= studyService.GetFilteredStudyIdsForUser(userId, isAdmin).Split(',');
        string filteredStudies = studyService.GetSelectedStudyIdsForUser(userId);

        if (filteredStudies != "")
            filteredStudiesArray = filteredStudies.Split(',');
        else
            filteredStudiesArray = new string[] { };

        if (string.IsNullOrEmpty(userEmail))
            throw new ArgumentNullException("Email address not found");

        EmbedParams embedParams;
        if (powerBiConfig.Value.UseRowLevelSecurity)
        {
            embedParams = pbiEmbedService.GetEmbedParams(new Guid(powerBiConfig.Value.WorkspaceId), new Guid(Dashboard.PowerBIReportId), userEmail, powerBiConfig.Value.IdentityRoles);
        }
        else
        {
            embedParams = pbiEmbedService.GetEmbedParams(new Guid(powerBiConfig.Value.WorkspaceId), new Guid(Dashboard.PowerBIReportId));
        }

        var embedUrl = embedParams.EmbedReport[0].EmbedUrl + "&pageName=" + Report.PowerBIPageName;
        var visuals = await dashboardService.GetAllVisualsByReportIdAsync(Report.WRReportId);
        Visual studySlicer = visuals.Where(v => v.VisualDescription == "STUDYID" && v.VisualType == "slicer").SingleOrDefault();
        var slicerGuid = "";

        if (studySlicer == null)
        {
            currentStudy = "";
            slicerGuid = "";
        }
        else
        {
            slicerGuid = studySlicer.PowerBIVisualId;
        }

        reportRef = await pbiEmbedModule.InvokeAsync<IJSObjectReference>(
            "embedFullReport",
            pbiElement,
            embedParams.EmbedToken.Token,
            WrConstants.PBI_STUDY_FILTER_TARGETS.ToArray(),
            embedUrl,
            embedParams.EmbedReport[0].ReportId.ToString(),
            filteredStudies == "" ? "" : filteredStudies.Split(','),
            //filteredStudiesArray,
            currentStudy,
            slicerGuid
        );
    }

    private async Task LocalChangUpdateFilterValueAsync(string value)
    {
        int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(WRClaimType.UserId).Value);
        bool saved = userService.SaveSelectedStudies(userId, value);
    }

    [JSInvokable]
    public static async Task SaveStudyFromSlicer(string study)
    {
        await UpdateFilterActionAsync.Invoke(study);
    }
}