@using System.Net.Http
@using System.Threading.Tasks
@using Microsoft.Extensions.Options;
@using TheradexPortal.Data
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.PowerBI
@using TheradexPortal.Data.PowerBI.Abstract;
@using TheradexPortal.Data.PowerBI.Models;

<div @ref="@pbiElement" class="pbi-embed-container" />


@code {
    [Inject] private IJSRuntime js { get; set; } = null!;
    [Inject] private IOptions<PowerBI> powerBiConfig { get; set; } = null!;
    [Inject] private IPbiEmbedService pbiEmbedService { get; set; } = null!;

    [Parameter] public Dashboard? Dashboard { get; set; }
    [Parameter] public Report? Report {get; set; }
    [CascadingParameter] LoadingIndicator loadingIndicator { get; set; } = null!;

    private ElementReference pbiElement;
    private IJSObjectReference? pbiEmbedModule;
    private IJSObjectReference? reportRef;
    private DotNetObjectReference<PowerBiFullReport>? objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await loadingIndicator.Show();
        pbiEmbedModule = await js.InvokeAsync<IJSObjectReference>("import", "./js/powerbi-embed-fullreport.js");
        objRef = DotNetObjectReference.Create(this);
        await EmbedFullReportJS();
        await loadingIndicator.Hide();
    }

    public async Task Update()
    {
        if (reportRef != null)
        {
            await loadingIndicator.Show();
            await EmbedFullReportJS();
            await loadingIndicator.Hide();
        }
    }

    public async Task EmbedFullReportJS()
    {
        // TODO - get email from current user
        var userEmail = "jbidwell@innovativesol.com"; //httpContextAccessor.HttpContext?.User?.FindFirst(ClaimTypes.Email)?.Value;
        if (string.IsNullOrEmpty(userEmail))
            throw new ArgumentNullException("Email address not found");

        EmbedParams embedParams;
        if (powerBiConfig.Value.UseRowLevelSecurity)
        {
            embedParams = pbiEmbedService.GetEmbedParams(new Guid(powerBiConfig.Value.WorkspaceId), new Guid(Dashboard.PowerBIReportId), userEmail, powerBiConfig.Value.IdentityRoles);
        }
        else
        {
            embedParams = pbiEmbedService.GetEmbedParams(new Guid(powerBiConfig.Value.WorkspaceId), new Guid(Dashboard.PowerBIReportId));
        }

        reportRef = await pbiEmbedModule.InvokeAsync<IJSObjectReference>(
            "embedFullReport",
            pbiElement,
            embedParams.EmbedToken.Token,
            WrConstants.PBI_STUDY_FILTER_TARGETS.ToArray(),
            embedParams.EmbedReport[0].EmbedUrl,
            embedParams.EmbedReport[0].ReportId.ToString()
        );
    }
}