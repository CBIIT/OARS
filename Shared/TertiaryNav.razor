@inject IHttpContextAccessor httpContextAccessor
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.ViewModels;
@using TheradexPortal.Data;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@inject IHttpContextAccessor httpContextAccessor

@{
    foreach (Report report in Reports)
    {
        <BarDropdownItem Style="padding:0px 0px 0px 0px; margin:0px 0px 0px 0px;">
            <BarLink To="@GetReportLink(report)" Class="tertiary-bar-link" Target="@GetReportTarget(report)">
                @if (IsReportFavorite(report))
                {
                    <BarIcon IconName=IconName.Star />
                }
                <BarIcon IconName="@GetReportIcon(report)" Class="tertiary-bar-icon" />
                @report.SubMenuName
            </BarLink>
        </BarDropdownItem>
    }
}

@code {
    //[Parameter] public IList<Report> Reports { get; set; } = new List<Report>();
    [Inject] private IUserService userService { get; set; } = null!;
    [Parameter] public int DashboardId { get; set; } = 0;
    [Parameter] public string Level2Name { get; set; } = "";

    [Inject] IDashboardService dashboardService { get; set; } = null!;

    IList<Report> Reports;
    protected override async Task OnParametersSetAsync()
    {
        bool isAdmin = httpContextAccessor.HttpContext.User.HasClaim(ThorClaimType.IsAdmin, "True");
        int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);

        Reports = await dashboardService.GetReportsByDashboardIdAndName(DashboardId, Level2Name, userId, isAdmin);
    }

    protected string GetReportLink(Report report)
    {
        if(report.CustomPagePath != null)
        {
            return report.CustomPagePath;
        }
        else
        {
            return $"{ThorConstants.DASHBOARD_PAGE_PATH}/{report.DashboardId}/{report.ReportId}";
        }
    }

    protected Target GetReportTarget(Report report)
    {
        if (!String.IsNullOrEmpty(report.CustomPagePath) && report.CustomPagePath.StartsWith("http"))
            return Target.Blank;
        else
            return Target.Self;
    }

    protected string GetReportIcon(Report report)
    {
        return report.DisplayIconName ?? "defaultIcon";
    }

    protected bool IsReportFavorite(Report report)
    {
        if (httpContextAccessor != null && httpContextAccessor.HttpContext != null && httpContextAccessor.HttpContext.User != null && httpContextAccessor.HttpContext.User.Claims.Count() > 0)
        {
            //System.Security.Claims.Claim? myClaim = 
            //bool is1 = httpContextAccessor.HttpContext.User.HasClaim(ThorClaimType.UserId, "1");  //.FindFirst(ThorClaimType.UserId);
            //if (myClaim != null)
            //    userId = myClaim.Value;

            //int userId1 = httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId) == null ? 0 : Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
            int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
            return userService.IsReportFavorite(userId, report.ReportId);
        }
        else
            return false;
    }
}
