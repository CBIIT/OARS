@using TheradexPortal.Data.Models
@using TheradexPortal.Data
@using TheradexPortal.Data.Services
@using Newtonsoft.Json
@using Microsoft.JSInterop;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@inject IHttpContextAccessor httpContextAccessor
@inject IConfiguration configuration

<Modal @ref="overviewModal" >
    <ModalContent Size="ModalSize.ExtraLarge">
        <ModalHeader Background="Background.Primary">
            <ModalTitle TextColor="TextColor.White">Overview</ModalTitle>
            <CloseButton TextColor="TextColor.White" />
        </ModalHeader>
        <ModalBody Class="overview-Modal-Body">
            <Table Hoverable>
                <TableBody>
                    <TableRow>
                        <TableRowHeader Background="Background.Light" Class="overview-Row-Header">Study ID</TableRowHeader>
                        @foreach (var study in SelectedStudies)
                        {
                            <TableRowCell>@(getDefaultIfEmpty(study.StudyId!))</TableRowCell>
                        }
                    </TableRow>
                    <TableRow>
                        <TableRowHeader Background="Background.Light" Class="overview-Row-Header">Title</TableRowHeader>
                        @foreach (var study in SelectedStudies)
                        {
                            <TableRowCell>@(getDefaultIfEmpty(study.ProtocolTitle!))</TableRowCell>
                        }
                    </TableRow>
                    <TableRow>
                        <TableRowHeader Background="Background.Light" Class="overview-Row-Header">Status</TableRowHeader>
                        @foreach (var study in SelectedStudies)
                        {
                            <TableRowCell>@(getDefaultIfEmpty(study.CurrentStatus!))</TableRowCell>
                        }
                    </TableRow>
                    <TableRow>
                        <TableRowHeader Background="Background.Light" Class="overview-Row-Header">Primary Investigator</TableRowHeader>
                        @foreach (var study in SelectedStudies)
                        {
                            <TableRowCell>@(getDefaultIfEmpty(study.Investigator!))</TableRowCell>
                        }
                    </TableRow>
                    <TableRow>
                        <TableRowHeader Background="Background.Light" Class="overview-Row-Header">Monitoring Method</TableRowHeader>
                        @foreach (var study in SelectedStudies)
                        {
                            <TableRowCell>@(getDefaultIfEmpty(study.MonitoringMethod!))</TableRowCell>
                        }
                    </TableRow>
                    <TableRow>
                        <TableRowHeader Background="Background.Light" Class="overview-Row-Header">Medical Monitor</TableRowHeader>
                        @foreach (var study in SelectedStudies)
                        {
                            <TableRowCell>@(getDefaultIfEmpty(""))</TableRowCell>
                        }
                    </TableRow>
                    <TableRow>
                        <TableRowHeader Background="Background.Light" Class="overview-Row-Header">Accrual (Screening/Intervention/Other)</TableRowHeader>
                        @foreach (var study in SelectedStudies)
                        {
                            <TableRowCell>@(getDefaultIfEmpty(accrual(study.TotalScreeningCount!, study.TotalInterventionCount!, study.TotalOtherCount!)))</TableRowCell>
                        }
                    </TableRow>
                    <TableRow>
                        <TableRowHeader Background="Background.Light" Class="overview-Row-Header">Start Date</TableRowHeader>
                        @foreach (var study in SelectedStudies)
                        {
                            <TableRowCell>
                                @* @{
                                    if (study. != null)
                                    {
                                        @(study..Value.ToString("dd-MMM-yyyy"))
                                    }
                                    else
                                    {
                                        @defaultValue
                                    }
                                } *@
                                @getDefaultIfEmpty("")
                            </TableRowCell>
                        }
                    </TableRow>
                    <TableRow>
                        <TableRowHeader Background="Background.Light" Class="overview-Row-Header">Date of Last EDC Update</TableRowHeader>
                        @foreach (var study in SelectedStudies)
                        {
                            <TableRowCell>
                                @if (study.DateOfEDCUpdate != null)
                                {
                                    @(study.DateOfEDCUpdate.Value.ToString("dd-MMM-yyyy"))
                                }
                                else
                                {
                                    @defaultValue
                                }
                            </TableRowCell>
                        }
                    </TableRow>
                    <TableRow>
                        <TableRowHeader Background="Background.Light" Class="overview-Row-Header">End Date</TableRowHeader>
                        @foreach (var study in SelectedStudies)
                        {
                            <TableRowCell>
                                @* @{
                                    if (study. != null)
                                    {
                                        @(study..Value.ToString("dd-MMM-yyyy"))
                                    }
                                    else
                                    {
                                        @defaultValue
                                    }
                                } *@
                                @getDefaultIfEmpty("")
                            </TableRowCell>
                        }
                    </TableRow>
                    <TableRow>
                        <TableRowHeader Background="Background.Light" Class="overview-Row-Header">Total Patients</TableRowHeader>
                        @foreach (var study in SelectedStudies)
                        {
                            <TableRowCell>@(getDefaultIfEmpty(study.PatientsEnrolled!))</TableRowCell>
                        }
                    </TableRow>
                    <TableRow>
                        <TableRowHeader Background="Background.Light" Class="overview-Row-Header">Total Patients Treated</TableRowHeader>
                        @foreach (var study in SelectedStudies)
                        {
                            <TableRowCell>@(getDefaultIfEmpty(study.PatientTreated!))</TableRowCell>
                        }
                    </TableRow>
                    <TableRow>
                        <TableRowHeader Background="Background.Light" Class="overview-Row-Header">Recent Enrollment</TableRowHeader>
                        @foreach (var study in SelectedStudies)
                        {
                            <TableRowCell>
                                @{
                                    if (study.DateOfLastRegistration != null)
                                    {
                                        @(study.DateOfLastRegistration.Value.ToString("dd-MMM-yyyy"))
                                    }
                                    else
                                    {
                                        @defaultValue
                                    }
                                }
                            </TableRowCell>
                        }
                    </TableRow>
                    <TableRow>
                        <TableRowHeader Background="Background.Light" Class="overview-Row-Header">Subsequent Phase Activation Date</TableRowHeader>
                        @foreach (var study in SelectedStudies)
                        {
                            <TableRowCell>
                                @{
                                    if (study.PhaseActivationDate != null)
                                    {
                                        @(getDefaultIfEmpty(study.PhaseActivationDate.Value.ToString("dd-MMM-yyyy")))
                                    }
                                    else
                                    {
                                        @defaultValue
                                    }
                                }
                            </TableRowCell>
                        }
                    </TableRow>
                    <TableRow>
                        <TableRowHeader Background="Background.Light" Class="overview-Row-Header">Subgroup</TableRowHeader>
                        @foreach (var study in SelectedStudies)
                        {
                            <TableRowCell>
                                @*@if (Study Has Multiple Subgroups) *@
                                    <Accordion Class="overview-accordion">
                                        <Collapse>
                                            <CollapseHeader>
                                                <AccordionToggle>
                                                    @subgroupExample.Count Subgroups
                                                </AccordionToggle>
                                            </CollapseHeader>
                                            <CollapseBody>
                                                <Table Hoverable>
                                                    <TableHeader>
                                                        <TableHeaderCell>Subgroup</TableHeaderCell>
                                                        <TableHeaderCell>Description</TableHeaderCell>
                                                    </TableHeader>
                                                    <TableBody>
                                                        @foreach (var subgroup in subgroupExample)
                                                        {
                                                            <TableRow>
                                                                <TableRowCell>@subgroupExample.IndexOf(subgroup)</TableRowCell>
                                                                <TableRowCell>@subgroup</TableRowCell>
                                                            </TableRow>
                                                        }
                                                    </TableBody>
                                                </Table>
                                            </CollapseBody>
                                        </Collapse>
                                    </Accordion>
                            </TableRowCell>
                        }
                    </TableRow>
                    <TableRow>
                        <TableRowHeader Background="Background.Light" Class="overview-Row-Header">Drug / Agents</TableRowHeader>
                        @foreach (var study in SelectedStudies)
                        {
                            <TableRowCell>@getDefaultIfEmpty(drugAgents("", ""))</TableRowCell>
                        }
                    </TableRow>
                    <TableRow>
                        <TableRowHeader Background="Background.Light" Class="overview-Row-Header">TAC</TableRowHeader>
                        @foreach (var study in SelectedStudies)
                        {
                            <TableRowCell>@getDefaultIfEmpty("")</TableRowCell>
                        }
                    </TableRow>
                    <TableRow>
                        <TableRowHeader Background="Background.Light" Class="overview-Row-Header">Count</TableRowHeader>
                        @foreach (var study in SelectedStudies)
                        {
                            <TableRowCell>@getDefaultIfEmpty("")</TableRowCell>
                        }
                    </TableRow>
                </TableBody>
            </Table>
        </ModalBody>
        <ModalFooter></ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter] public List<Protocol> SelectedStudies { get; set; } = new List<Protocol>();
    private Modal? overviewModal;
    private string defaultValue = "N/A";

    private List<string> subgroupExample = new List<string>() { "description 1", "Description2", "desc3", "the fourth description"};

    public void ShowStudy(Protocol study)
    {
        SelectedStudies.Clear();
        SelectedStudies.Add(study);
        showModal();
    }

    public void ShowStudies(List<Protocol> studies)
    {
        SelectedStudies = studies;
        showModal();
    }

    private void showModal()
    {
        StateHasChanged();
        overviewModal!.Show();
    }

    private string getDefaultIfEmpty(string field)
    {
        if (field == null || field.Equals(string.Empty))
        {
            field = defaultValue;
        }

        return field;
    }

    private string accrual(string screening, string intervention, string other)
    {
        var accrual = string.Empty;
        if ((screening != null && !screening.Equals(string.Empty)) && (intervention != null && !intervention.Equals(string.Empty)) 
            && (other != null && !other.Equals(string.Empty)))
        {
            accrual = screening + '/' + intervention + '/' + other;
        }
        return accrual;
    }

    private string subgroup(string subgroup, string subgroupDescription)
    {
        var subgroupString = string.Empty;
        if ((subgroup != null && !subgroup.Equals(string.Empty)) && (subgroupDescription != null && !subgroupDescription.Equals(string.Empty)))
        {
            subgroupString = subgroup + ": " + subgroupDescription;
        }
        return subgroupString;
    }

    private string drugAgents(string drug, string agents)
    {
        var drugAgents = string.Empty;
        if ((drug != null && !drug.Equals(string.Empty)) && (agents != null && !agents.Equals(string.Empty)))
        {
            drugAgents = drug + ": " + agents;
        }
        return drugAgents;
    }
}
