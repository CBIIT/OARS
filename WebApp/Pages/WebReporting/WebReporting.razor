@page "/webreporting/{dashboardid:int?}"
@layout SecondaryNavLayout
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JSRuntime;
@inject IConfiguration configuration

@using OARS.Data.Models;
@using OARS.Data.ViewModels;
@using OARS.Data.Services.Abstract;
@using OARS.Data.Static;

@if(notFound)
{
    <LayoutContent>
        <Container Fluid Class="mt-2 text-center">
            <NotFound />
        </Container>
    </LayoutContent>
}
else
{
    <LayoutContent>
        <Container Fluid Class="mt-2">
            <Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1 mb-3"><h2>Web Reporting</h2></Div>
            <Div Padding="Padding.Is2">
                <Div Display="@connectDiv">
                    Please wait while we connect you to Web Reporting...
                </Div>
                <Div Display="@failureDiv">
                    There was an issue connecting to Web Reporting.  Please use 'Contact Us' to send a support email.
                </Div>
                <Div Display="@successDiv">Redirecting to Web Reporting.<br /><br />
                    If you close the Web Reporting tab, you can re-sign in by refreshing this page or navigating away then back.     
                </Div>
            </Div>
        </Container>
    </LayoutContent>
}
<StudyOverview @ref="studyOverview" />

@code {
    [Inject] private IStudyService studyService { get; set; } = null!;
    [Inject] private IDashboardService dashboardService { get; set; } = null!;
    [Inject] private IUserService userService { get; set; } = null!;

    [Parameter] public int DashboardId { get; set; }
    [Parameter] public int ReportId { get; set; }

    [CascadingParameter]
    public PrimaryNavLayout PrimaryNavLayout { get; set; }

    private int userId;
    private bool notFound = false;
    private StudyOverview? studyOverview;
    private IList<Report> allReports = new List<Report>();
    private OARS.Data.Models.Dashboard? dashboard;
    private Report? report;
    private string ssoToken;
    IFluentDisplay connectDiv = Display.Block;
    IFluentDisplay failureDiv = Display.None;
    IFluentDisplay successDiv = Display.None;

    protected override async Task OnParametersSetAsync()
    {
        bool isAdmin = httpContextAccessor.HttpContext.User.HasClaim(ThorClaimType.IsAdmin, "True");
        userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
        string userDashboards = httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.Dashboards).Value;
        string userReports = httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.Reports).Value;
        dashboard = await dashboardService.GetDashboardByIdAsync(DashboardId, userDashboards, isAdmin);
        allReports = await dashboardService.GetReportsByDashboardIdForUserAsync(DashboardId, userId, isAdmin);

        notFound = false;
        await PrimaryNavLayout.UpdateDashboard(dashboard);

        if (dashboard == null && !isAdmin)
        {
            notFound = true;
            return;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string wrSite = configuration.GetValue<string>("WebReporting:WRUrl");
            string wrUsername = configuration.GetValue<string>("WebReporting:Username");
            string wrPassword = configuration.GetValue<string>("WebReporting:Password");
            string username = httpContextAccessor.HttpContext.User.FindFirst(c => c.Type == "preferred_username").Value;

            try
            {
                userService.SaveActivityLog(userId, ThorActivityType.Navigation, "Web Reporting");
                WebReportingSSO.WebReportingSSOSoapClient newSSO = new WebReportingSSO.WebReportingSSOSoapClient(WebReportingSSO.WebReportingSSOSoapClient.EndpointConfiguration.WebReportingSSOSoap, wrSite + "WebReportingSSO.asmx");

                var tokenRequest = await newSSO.GetTokenAsync(wrUsername, wrPassword, username);
                ssoToken = tokenRequest.Body.GetTokenResult;

                if (ssoToken != null && ssoToken != new Guid().ToString())
                {
                    successDiv = Display.Block;
                    connectDiv = Display.None;
                    StateHasChanged();
                    //JSRuntime.InvokeAsync<string>("open", wrSite + "ThorSSO.aspx?id=" + ssoToken + "&dash=NCI%20Standard%20Dashboards%5CETCTN%20Data%20uploads", "_blank");
                    JSRuntime.InvokeAsync<string>("open", wrSite + "ThorSSO.aspx?id=" + ssoToken, "_blank");
                }
                else
                {
                    failureDiv = Display.Block;
                    connectDiv = Display.None;
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                failureDiv = Display.Block;
                connectDiv = Display.None;
                StateHasChanged();
            }
        }
    }
}
