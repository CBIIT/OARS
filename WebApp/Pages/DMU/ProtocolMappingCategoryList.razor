@using OARS.Data.Models;
@using OARS.Data.Services.Abstract;
@using OARS.Data.Identity;
@inject IHttpContextAccessor httpContextAccessor
@inject IConfiguration configuration
@layout SecondaryNavLayout
@page "/dmu/category-list-map/{protocolMappingId:int}"
<AdminRoleCheck AllowedRoles="@(new List<string> { "IT" })" AllowedTHORRoles="@(new List<string> { "DMU Study Mapping", "DMU Study Admin", "DMU Global Admin" })"></AdminRoleCheck>
<LayoutContent>
    <Container Fluid>
        <Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1"><h2>DMU Mapping</h2></Div>
        <LoadingIndicator @ref="loadingIndicator">
            <Row Background="Background.Light" Style="padding-bottom:10px;">
                <Row Style="padding-top:10px">
                    <Column ColumnSize="ColumnSize.Is1">
                        <Button Clicked="@Back" Color="Color.Primary"><Icon Name="IconName.ArrowLeft" /> Back</Button>
                    </Column>
                    <Column><Text><b>Protocol:</b> @protocolMapping.THORStudyId - @protocolMapping.ProtocolTitle</Text></Column>
                </Row>
                <Row>
                    <Column>
                        <Text><b>Copy Mappings From:</b></Text>
                        <SelectList TItem="ProtocolMapping" TValue="int?" Data="@copyFromList" TextField="@((item) => item.THORStudyId)" ValueField="@((item) => item.ProtocolMappingId)" SelectedValue="sourceMappingId" SelectedValueChanged="@((v) => {sourceMappingId = v;})" Disabled="@(MappingStatus() != "Not Started")" DefaultItemText="Select a Protocol" DefaultItemValue="0"></SelectList>
                        <Button Color="Color.Primary" Clicked="@(() => CopyMapping(sourceMappingId))" Disabled="@(MappingStatus() != "Not Started" || sourceMappingId == 0)">Copy Mapping</Button>
                    </Column>
                </Row>
                <Row>
                    <Column><Text><b>Data Mapping Status:</b> @MappingStatus()</Text></Column>
                    <Column><Text><b>Data Mapping Version:</b> @protocolMapping.Profile.ProfileName</Text></Column>
                    <Column><Text><b>Lead Protocol Organization:</b> @protocolMapping.Sponsor</Text></Column>
                    <Column><Button Color="Color.Primary" Clicked="@GenerateMapping">Generate Mapping Document</Button></Column>

                </Row>
            </Row>
            <DataGrid @ref=dataGridRef
                TItem="ProtocolDataCategory"
                Class="admindatagrid"
                Data="@protocolDataCategoryList"
                Editable
                Responsive
                Striped
                ShowPager
                ShowPageSizes
                MaxPaginationLinks="5"
                PagerPosition="DataGridPagerPosition.Bottom"
                PagerOptions="new(){ButtonSize=Size.Default,
                    PaginationPosition=PagerElementPosition.Default,
                    TotalItemsPosition=PagerElementPosition.End,
                }"
                FixedHeader
                FixedHeaderDataGridHeight="calc(100vh - 420px)"
                FixedHeaderDataGridMaxHeight="calc(100vh - 420px)">
                <DataGridColumns>
                     <DataGridColumn Field="THORDataCategory.CategoryName" Width="50%" Caption="Data Category" Filterable="true">
                     </DataGridColumn>
                     <DataGridColumn Field="ProtocolCategoryStatus.CategoryStatusName" Width="30%" Caption="Data Mapping Status">
                     </DataGridColumn>
                     <DataGridColumn Field="@nameof(ProtocolDataCategory.UpdateDate)" Width="30%" Caption="Last Updated">
                     </DataGridColumn>
                     <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="false">
                         <EditCommandTemplate>
                             <Button><Icon Name="IconName.Edit" Clicked="@(() => EditCategory(context.Item))" /></Button>
                         </EditCommandTemplate>
                     </DataGridCommandColumn>
                 </DataGridColumns>
                 <EmptyTemplate>
                     <div class="box">
                         No data categories found.
                     </div>
                 </EmptyTemplate>
             </DataGrid>
         </LoadingIndicator>
     </Container>
 </LayoutContent>

 @code {
    [Inject] IProtocolDataCategoryService protocolDataCategoryService { get; set; } = null!;
    [Inject] IProtocolMappingService protocolMappingService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] INotificationService notificationService { get; set; }
    [Inject] private IMessageService messageService { get; set; } = null!;
    [Inject] IUserService userService { get; set; } = null!;

    [Parameter] public int protocolMappingId { get; set; }

    private int? sourceMappingId = 0;

    private DataGrid<ProtocolDataCategory> dataGridRef;
    private IList<ProtocolDataCategory> protocolDataCategoryList;
    private ProtocolMapping protocolMapping;
    private IList<ProtocolMapping> copyFromList;
    private LoadingIndicator loadingIndicator;

    protected override async Task OnInitializedAsync()
    {
        if (protocolMappingId != null)
        {
            this.protocolDataCategoryList = await protocolDataCategoryService.GetCategoriesByMappingProfile(protocolMappingId);
            this.protocolMapping = await protocolMappingService.GetProtocolMapping(protocolMappingId);
        }

        if (this.protocolMapping.SourceProtocolMappingId > 0)
        {
            this.sourceMappingId = this.protocolMapping.SourceProtocolMappingId;
        }

        List<string> allowed = new List<string> { "DMU Study Admin", "DMU Global Admin" };
        List<string> adminRole = new List<string> { "IT" };
        if (httpContextAccessor?.HttpContext?.User.HasAnyTHORRole(allowed.ToArray()) == false && httpContextAccessor?.HttpContext?.User.HasAnyAdminRole(adminRole.ToArray()) == false)
        {
            var studyIds = userService.GetProtocolAccessForUser(httpContextAccessor.HttpContext.User.GetUserId());

            if (!studyIds.Contains(protocolMapping.THORStudyId))
            {
                await notificationService.Error("You do not have access to this protocol");
                navigation.NavigateTo("/dmu/study-mapping");
            }

            copyFromList = await protocolMappingService.GetProtocolMappings(studyIds, false);
        }
        else
        {
            copyFromList = await protocolMappingService.GetProtocolMappings(false);
        }

        copyFromList = copyFromList
            .GroupBy(obj => obj.THORStudyId)
            .Select(group => group.OrderByDescending(obj => obj.MappingVersion).First())
            .ToList();
    }


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        this.protocolDataCategoryList = await protocolDataCategoryService.GetCategoriesByMappingProfile(protocolMappingId);

        await base.OnAfterRenderAsync(firstRender);
    }


    public async void EditCategory(ProtocolDataCategory category)
    {
        if (category.ProtocolCategoryId == 0)
        {
            await protocolDataCategoryService.SaveCategory(category, this.protocolMappingId);
        }
        navigation.NavigateTo($"/dmu/form-field-mapping/{category.ProtocolCategoryId}");
    }

    public string MappingStatus()
    {
        // Determine the overall mapping status of the categories
        int notStarted = 0;
        int completed = 0;
        foreach (var category in protocolDataCategoryList)
        {
            if (category.ProtocolCategoryStatusId == 1)
            {
                notStarted++;
            }
            else if (category.ProtocolCategoryStatusId == 2)
            {
                return "Incomplete";
            }
            else if (category.ProtocolCategoryStatusId == 3)
            {
                completed++;
            }
        }

        if (notStarted == protocolDataCategoryList.Count)
        {
            return "Not Started";
        }
        else if (notStarted > 0 && completed > 0)
        {
            return "Incomplete";
        }

        return "Complete";
    }

    public async void CopyMapping(int? mappingId)
    {
        if (mappingId != null)
        {
            await loadingIndicator.Show();
            if (await messageService.Confirm("Are you sure you want to copy the selected mapping?", "Confirm Source Mapping Copy"))
            {
                var copyResult = await protocolMappingService.CopyMapping(mappingId.Value, protocolMappingId);

                if (copyResult)
                {
                    navigation.NavigateTo($"admin/dmu/category-list-map/{protocolMappingId}", true);
                }
                else
                {
                    await notificationService.Error("Error copying mapping");
                }
            }
            await loadingIndicator.Hide();
        }
    }

    public void GenerateMapping()
    {
        // placeholder for generating the mapping document
    }

    private void Back()
    {
        navigation.NavigateTo("/dmu/study-mapping");
    }
}