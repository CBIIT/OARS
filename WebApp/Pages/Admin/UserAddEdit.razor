@using System.Diagnostics.CodeAnalysis
@using OARS.Data.Models;
@using OARS.Data.Services.Abstract;
@using OARS.Data.Static;
@using OARS.Data.Models.Configuration;
@using Microsoft.Extensions.Options;
@inject IOptions<EmailSettings> emailSettings;
@inject IHttpContextAccessor httpContextAccessor
@layout AdminLayout

@page "/admin/user/{userid:int?}"
<AdminRoleCheck AllowedRoles="@(new List<string> { "IT", "Biz" })"></AdminRoleCheck>
<Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1 mb-3"><h2>@AddOrEdit</h2></Div>
<Steps @ref="stepsRef" SelectedStep="@selectedStep" SelectedStepChanged="@OnSelectedStepChanged" NavigationAllowed="NavigationAllowed">
    <Items>
        <Step Name="step1">User info</Step>
        <Step Name="step2">Roles</Step>
        <Step Name="step3">Studies & Groups</Step>
        <Step Name="step4">
            <Marker>
                <Icon Name="IconName.Flag" />
            </Marker>
            <Caption>
                Review & Save
            </Caption>
        </Step>
    </Items>
    <Content>
        <StepPanel Name="step1">
            <h4>User Information</h4>
            <Divider />
            <Div Flex="Flex.AlignItems.Start" Margin="Margin.Is3.FromBottom" Background="Background.Light">
                <Div Padding="Padding.Is4" Style="@flexContainerStyle">
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">First Name</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is6">
                            <TextEdit Placeholder="First Name" MaxLength="50" Text="@firstName" TextChanged="@OnFirstNameChanged" />
                        </FieldBody>
                    </Field>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Last Name</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is6">
                            <TextEdit Placeholder="Last Name" MaxLength="50" Text="@lastName" TextChanged="@OnLastNameChanged" />
                        </FieldBody>
                    </Field>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Email Address</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is6">
                            <TextEdit Placeholder="Email Address" MaxLength="255" Text="@email" TextChanged="@OnEmailChanged" />
                        </FieldBody>
                    </Field>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Title</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is6">
                            <TextEdit Placeholder="Title" MaxLength="50" @bind-Text="@title" />
                        </FieldBody>
                    </Field>
                </Div>
                <Div Padding="Padding.Is4" Style="@flexContainerStyle">
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Is CTEP User</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is6">
                            <Switch TValue="bool" Checked="@isCTEPUser" CheckedChanged="@OnCTEPChanged"></Switch>
                        </FieldBody>
                    </Field>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">CTEP Username</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is6">
                            <TextEdit Placeholder="CTEP Username" MaxLength="100" @bind-Text="@ctepUserId" />
                        </FieldBody>
                    </Field>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Is Active</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is6">
                            <Switch TValue="bool" Checked="@isActive" CheckedChanged="@OnActiveChanged"></Switch>
                        </FieldBody>
                    </Field>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">OKTA User Status</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is6">
                            <TextEdit  Disabled Text="@oktaUserStatus" />&nbsp;&nbsp;<Button Color="Color.Primary" Display="@isUserLocked" Clicked="@UnlockUser"> Unlock User</Button>
                        </FieldBody>
                    </Field>
                </Div>
            </Div>
        </StepPanel>
        <StepPanel Name="step2">
            <h4>Role Assignment</h4>
            <Divider />
            <Div Flex="Flex.JustifyContent.Start" Margin="Margin.Is4.FromBottom" Background="Background.Light">
                <Div Padding="Padding.Is2" Style="@flexItemStylePrimRole">
                    <Field>
                        <FieldLabel ColumnSize="ColumnSize.Is12" TextWeight="TextWeight.Bold">Primary Role</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is4" Margin="Margin.IsAuto">
                            <SelectList TItem="Role"
                            TValue="int"
                            Data="@primaryRoles"
                            TextField="@((role)=>role.RoleName)"
                            ValueField="@((role)=>role.RoleId)"
                            SelectedValue = "@primaryRoleId"
                            SelectedValueChanged = "@OnChangeRole"        
                            DefaultItemText="Select the Primary Role"
                            Disabled="@primaryRoleDisabled" />
                        </FieldBody>
                    </Field>
                </Div>
                <Div Style="@flexItemStyleSpacer"></Div>
                <Div Padding="Padding.Is2" Style="@flexItemStyleSecRole" Display="@showSecondaryRoles">
                    <Field>
                        <FieldLabel ColumnSize="ColumnSize.Is10" TextWeight="TextWeight.Bold">Available Secondary Roles</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is4" Margin="Margin.IsAuto">
                            <SelectList TItem="Role"
                            TValue="int"
                            Data="@rolesAvailable"
                            TextField="@((role)=>role.RoleName)"
                            ValueField="@((role)=>role.RoleId)"
                            @bind-SelectedValues="@availableRolesSelected"
                            MaxVisibleItems = "12"
                            Multiple />
                        </FieldBody>
                    </Field>
                    <Button Color="Color.Primary" Clicked="@MoveToSelectedRole">Add to Assigned</Button>
                </Div>
                <Div Padding="Padding.Is2" Style="@flexItemStyleSecRole2" Display="@showSecondaryRoles">
                    <Field>
                        <FieldLabel TextWeight="TextWeight.Bold">Assigned Secondary Roles</FieldLabel>
                        <FieldBody>
                            <DataGrid TItem="UserRole"
                            @ref=assignedSecondaryRoles
                            Class="admindataeditgrid"
                            Data="@selectedUserRoleList"
                            @bind-SelectedRow="@selectedUserRole"
                            @bind-SelectedRows="@selectedUserRoles"
                            Editable
                            Responsive
                            PageSize="2000"
                            FixedHeader
                            FixedHeaderDataGridHeight="278px"
                            FixedHeaderDataGridMaxHeight="278px"
                            SelectionMode = "DataGridSelectionMode.Multiple"
                            CommandMode="DataGridCommandMode.Commands"
                            EditMode="DataGridEditMode.Inline">
                                <DataGridColumns>
                                    <DataGridColumn Width="260px"  Caption="Role Name">
                                        <DisplayTemplate>
                                            <Text>@GetRoleName((context as UserRole).RoleId)</Text>
                                        </DisplayTemplate>
                                    </DataGridColumn> 
                                    <DataGridColumn Field="@nameof(UserRole.ExpirationDate)" Width="150" Caption="Last Access Date" Editable DisplayFormat="{0:dd-MMM-yyyy}">
                                    </DataGridColumn>
                                    <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="false">
                                        <SaveCommandTemplate>
                                            <Button ElementId="btnSave" Size="Size.ExtraSmall" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                                        </SaveCommandTemplate>
                                        <CancelCommandTemplate>
                                            <Button ElementId="btnCancel" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@context.Clicked">Cancel</Button>
                                        </CancelCommandTemplate>
                                    </DataGridCommandColumn>
                                </DataGridColumns>
                                <ButtonRowTemplate>
                                    <Button Color="Color.Primary" Size="Size.ExtraSmall" Disabled="(selectedUserRole is null)" Clicked="context.EditCommand.Clicked">Edit</Button>
                                </ButtonRowTemplate>
                            </DataGrid>
                        </FieldBody>
                    </Field>
                    <Button Color="Color.Primary" Clicked="@RemoveFromSelectedRole">Remove from Assigned</Button>                    
                </Div>
            </Div>
        </StepPanel>
        <StepPanel Name="step3">
            <h4>Study and Group Assignment</h4>
            <Divider />
            <Div Display="@showStudies">
                <Div Padding="Padding.Is2">
                    <Field ColumnSize="ColumnSize.Is4">
                        <FieldLabel ColumnSize="ColumnSize.Is8" TextWeight="TextWeight.Bold">Study Assignment options</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is2" Margin="Margin.IsAuto">
                            <Select TValue="int" SelectedValue="@studySelectionType" SelectedValueChanged="@OnStudySelectionChanged">
                                <SelectItem Value="0">Please select an option</SelectItem>
                                <SelectItem Value="1">Access by Study and Group Assignments</SelectItem>
                                <SelectItem Value="2">All Studies Assigned</SelectItem>
                            </Select>
                        </FieldBody>
                    </Field>
                </Div>
                <Div Flex="Flex.JustifyContent.Start" Margin="Margin.Is4.FromBottom" Background="Background.Light" Display="@studyGroupAssignmentDiv">
                    <Div Padding="Padding.Is2" Style="@flexItemStyleProts">
                        <Field>
                            <FieldLabel TextWeight="TextWeight.Bold">Available Studies</FieldLabel>
                            <FieldBody>
                                <SelectList TItem="Protocol"
                                MaxVisibleItems = "14"
                                TValue="string"
                                Data="@protocolsAvailable"
                                TextField="@((protocol)=>protocol.StudyId)"
                                ValueField="@((protocol)=>protocol.StudyId)"
                                @bind-SelectedValues="@availableSelected"
                                Multiple />
                            </FieldBody>
                        </Field>
                        <Button Color="Color.Primary" Clicked="@MoveToSelectedProtocol">Add to Assigned</Button>
                    </Div>
                    <Div Padding="Padding.Is2" Style="@flexItemStyleProtsGrid">
                        <Field>
                            <FieldLabel TextWeight="TextWeight.Bold">Assigned Studies</FieldLabel>
                            <FieldBody>
                                <DataGrid TItem="UserProtocol"
                                @ref=assignedStudies
                                Class="admindataeditgrid"
                                Data="@selectedUserProtocolList"
                                @bind-SelectedRow="@selectedUserProtocol"
                                @bind-SelectedRows="@selectedUserProtocols"
                                Editable
                                Responsive
                                PageSize="2000"
                                FixedHeader
                                FixedHeaderDataGridHeight="324px"
                                FixedHeaderDataGridMaxHeight="324px"
                                SelectionMode = "DataGridSelectionMode.Multiple"
                                CommandMode="DataGridCommandMode.Commands"
                                EditMode="DataGridEditMode.Inline">
                                    <DataGridColumns>
                                        <DataGridColumn Field="@nameof(UserProtocol.StudyId)" Width="100px" Caption="Study Id" />
                                        <DataGridColumn Field="@nameof(UserProtocol.ExpirationDate)" Width="200px" Caption="Last Access Date" Editable DisplayFormat="{0:dd-MMM-yyyy}">
                                        </DataGridColumn>
                                        <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="false">
                                            <SaveCommandTemplate>
                                                <Button ElementId="btnSave" Size="Size.ExtraSmall" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                                            </SaveCommandTemplate>
                                            <CancelCommandTemplate>
                                                <Button ElementId="btnCancel" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@context.Clicked">Cancel</Button>
                                            </CancelCommandTemplate>
                                        </DataGridCommandColumn>
                                    </DataGridColumns>
                                    <ButtonRowTemplate>
                                        <Button Color="Color.Primary" Size="Size.ExtraSmall" Disabled="(selectedUserProtocol is null)" Clicked="context.EditCommand.Clicked">Edit</Button>
                                    </ButtonRowTemplate>
                                </DataGrid>
                            </FieldBody>
                        </Field>
                        <Button Color="Color.Primary" Clicked="@RemoveFromSelectedProtocol">Remove from Assigned</Button>
                    </Div>
                    <Div Style="@flexItemStyleSpacer"></Div>
                    <Div Padding="Padding.Is2" Style="@flexItemStyleProts">
                        <Field>
                            <FieldLabel TextWeight="TextWeight.Bold">Available Groups</FieldLabel>
                            <FieldBody>
                                <SelectList TItem="Group"
                                MaxVisibleItems = "14"
                                TValue="int"
                                Data="@groupsAvailable"
                                TextField="@((group)=>group.GroupName)"
                                ValueField="@((group)=>group.GroupId)"
                                @bind-SelectedValues="@availableGroupsSelected"
                                Multiple />
                            </FieldBody>
                        </Field>
                        <Button Color="Color.Primary" Clicked="@MoveToSelectedGroup">Add to Assigned</Button>
                    </Div>
                    <Div Padding="Padding.Is2" Style="@flexItemStyleProtsGrid">
                        <Field>
                            <FieldLabel TextWeight="TextWeight.Bold">Assigned Groups</FieldLabel>
                            <FieldBody>
                                <DataGrid TItem="UserGroup"
                                @ref=assignedGroups
                                Class="admindataeditgrid"
                                Data="@selectedUserGroupList"
                                @bind-SelectedRow="@selectedUserGroup"
                                @bind-SelectedRows="@selectedUserGroups"
                                Editable
                                Responsive
                                PageSize="2000"
                                FixedHeader
                                FixedHeaderDataGridHeight="320px"
                                FixedHeaderDataGridMaxHeight="320px"
                                SelectionMode = "DataGridSelectionMode.Multiple"
                                CommandMode="DataGridCommandMode.Commands"
                                EditMode="DataGridEditMode.Inline">
                                    <DataGridColumns>
                                        <DataGridColumn Width="240px"  Caption="Group Name">
                                            <DisplayTemplate>
                                                <Text>@GetGroupName((context as UserGroup).GroupId)</Text>
                                            </DisplayTemplate>
                                        </DataGridColumn> 
                                        <DataGridColumn Field="@nameof(UserGroup.ExpirationDate)" Width="200" Caption="Last Access Date" Editable DisplayFormat="{0:dd-MMM-yyyy}">
                                        </DataGridColumn>
                                        <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="false">
                                            <SaveCommandTemplate>
                                                <Button ElementId="btnSave" Size="Size.ExtraSmall" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                                            </SaveCommandTemplate>
                                            <CancelCommandTemplate>
                                                <Button ElementId="btnCancel" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@context.Clicked">Cancel</Button>
                                            </CancelCommandTemplate>
                                        </DataGridCommandColumn>
                                    </DataGridColumns>
                                    <ButtonRowTemplate>
                                        <Button Color="Color.Primary" Size="Size.ExtraSmall" Disabled="(selectedUserGroup is null)" Clicked="context.EditCommand.Clicked">Edit</Button>
                                    </ButtonRowTemplate>
                                </DataGrid>
                            </FieldBody>
                        </Field>
                        <Button Color="Color.Primary" Clicked="@RemoveFromSelectedGroup">Remove from Assigned</Button>
                    </Div>
                </Div>
            </Div>
            <Div Padding="Padding.Is2" Background="Background.Light" Display="@showIsAdmin">
                <Text TextColor="TextColor.Dark">Admin users have permissions to all Studies by default</Text>
            </Div>
        </StepPanel>
        <StepPanel Name="step4">
            <h4>Review and Save</h4>
            <Divider/>
            <Div Flex="Flex.AlignItems.Start" Margin="Margin.Is3.FromBottom" Background="Background.Light">
                <Div Padding="Padding.Is2" Style="@flexContainerStyle">
                    <h5>User Info</h5>
                    <Table Narrow>              
                        <TableBody>
                            <TableRow>
                                <TableRowHeader>First Name</TableRowHeader>
                                <TableRowCell>@firstName</TableRowCell>
                                <TableRowCell>
                                    <Span TextColor="TextColor.Danger">
                                        @{
                                            if (firstName == "")
                                            { @("Required") }
                                            else
                                            { @("") }
                                        }
                                    </Span>
                                </TableRowCell>
                                <TableRowHeader>Is CTEP User</TableRowHeader>
                                <TableRowCell>
                                    @{
                                        if (isCTEPUser)
                                        { @("Yes") }
                                        else
                                        { @("No") }
                                    }
                                </TableRowCell>
                                <TableRowCell></TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableRowHeader>Last Name</TableRowHeader>
                                <TableRowCell>@lastName</TableRowCell>
                                <TableRowCell>
                                    <Span TextColor="TextColor.Danger">
                                        @{
                                            if (lastName == "")
                                            { @("Required") }
                                            else
                                            { @("") }
                                        }
                                    </Span>
                                </TableRowCell>
                                <TableRowHeader>CTEP Username</TableRowHeader>
                                <TableRowCell>@ctepUserId</TableRowCell>
                                <TableRowCell>
                                    <Span TextColor="TextColor.Danger">
                                        @{
                                            if (isCTEPUser && (ctepUserId == "" || ctepUserId == null))
                                            { @("Required") }
                                            else
                                            { @("") }
                                        }
                                    </Span>
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableRowHeader>Email Address</TableRowHeader>
                                <TableRowCell>@email</TableRowCell>
                                <TableRowCell>
                                    <Span TextColor="TextColor.Danger">
                                        @{
                                            if (email == "")
                                            { @("Required") }
                                            else if (!emailRegexIsValid(email))
                                            {
                                                @("Invalid Email")
                                            }
                                            else
                                            {
                                                @("")
                                            }
                                        }
                                    </Span>
                                </TableRowCell>
                                <TableRowHeader>Is Active</TableRowHeader>
                                <TableRowCell>
                                    @{
                                        if (isActive)
                                        { @("Yes") }
                                        else
                                        { @("No") }
                                    }
                                </TableRowCell>
                                <TableRowCell></TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableRowHeader>Title</TableRowHeader>
                                <TableRowCell>@title</TableRowCell>
                                <TableRowCell></TableRowCell>
                                <TableRowCell></TableRowCell>
                                <TableRowCell></TableRowCell>
                                <TableRowCell></TableRowCell>
                            </TableRow>
                        </TableBody>
                    </Table>                   
                </Div>
                <Div Padding="Padding.Is2" Style="@flexContainerStyle">
                    <h5>Role Assignments</h5>
                    <Table Narrow>              
                        <TableBody>
                            <TableRow>
                                <TableRowHeader Style="width:200px">Primary Role</TableRowHeader>
                                <TableRowCell>@roleName</TableRowCell>
                                <TableRowCell>
                                    <Span TextColor="TextColor.Danger">
                                        @{
                                            if (roleName == "")
                                            { @("Required") }
                                            else
                                            { @("") }
                                        }
                                    </Span>
                                </TableRowCell>
                            </TableRow>
                            @if (isAdmin) {
                                <TableRow>
                                    <TableRowHeader Style="width:200px">Secondary Roles</TableRowHeader>
                                    <TableRowCell>N/A</TableRowCell>
                                </TableRow>   
                            }
                            else if (selectedUserRoleList.Count == 0) {
                                <TableRow>
                                    <TableRowHeader Style="width:200px">Secondary Roles</TableRowHeader>
                                    <TableRowCell>None selected</TableRowCell>
                                </TableRow>
                            }
                            else {
                                for (int i = 0; i <= selectedUserRoleList.Count - 1; ++i)
                                {
                                    var curId = i;
                                    <TableRow>
                                        <TableRowHeader Style="width:200px">
                                            @{
                                                if (curId == 0)
                                                { @("Secondary Roles") }
                                            }
                                        </TableRowHeader>
                                        <TableRowCell Style="width:200px">@(GetRoleName(selectedUserRoleList[curId].RoleId))
                                        </TableRowCell>
                                        @{ if (selectedUserRoleList[curId].ExpirationDate != null)
                                            {
                                                <TableRowCell>
                                                    @("Until " + selectedUserRoleList[curId].ExpirationDate.Value.ToString("dd-MMM-yyyy"))
                                                </TableRowCell>
                                            }
                                            else
                                            {
                                                <TableRowCell></TableRowCell>
                                            }}
                                    </TableRow>
                                }
                            }
                        </TableBody>
                    </Table>
                </Div>
            </Div>
            <Div Flex="Flex.AlignItems.Start" Margin="Margin.Is3.FromBottom" Background="Background.Light">
                <Div Padding="Padding.Is2" Style="@flexContainerStyle">
                    <h5>Study Assignments</h5>
                    <Table Narrow>              
                        <TableBody>
                            @if (studySelectionType == 2 || isAdmin) {
                                <TableRow>
                                    <TableRowCell>All studies assigned</TableRowCell>
                                </TableRow>
                            }
                            else {
                                if (selectedUserProtocolList != null && selectedUserProtocolList.Count > 0)
                                {
                                    for (int j = 0; j <= selectedUserProtocolList.Count - 1; ++j)
                                    {
                                        var curId2 = j;
                                        <TableRow>
                                            <TableRowCell Style="width:200px">@selectedUserProtocolList[curId2].StudyId
                                            </TableRowCell>
                                            @{ if (selectedUserProtocolList[curId2].ExpirationDate != null)
                                                {
                                                    <TableRowCell>
                                                        @("Until " + selectedUserProtocolList[curId2].ExpirationDate.Value.ToString("dd-MMM-yyyy"))
                                                    </TableRowCell>
                                                }
                                                else
                                                {
                                                    <TableRowCell></TableRowCell>
                                                }}
                                        </TableRow>
                                    }
                                }
                                else
                                {
                                    <TableRow>
                                        <TableRowCell>No studies assigned</TableRowCell>
                                    </TableRow>
                                }
                            }
                        </TableBody>
                    </Table>
                </Div>
                <Div Padding="Padding.Is2" Style="@flexContainerStyle">
                    <h5>Group Assignments</h5>
                    <Table Narrow>              
                        <TableBody>
                            @if (studySelectionType == 2 || isAdmin) {
                                <TableRow>
                                    <TableRowCell>N/A</TableRowCell>
                                </TableRow>
                            }
                            else {
                                if (selectedUserGroupList != null && selectedUserGroupList.Count > 0)
                                {
                                    for (int k = 0; k <= selectedUserGroupList.Count - 1; ++k)
                                    {
                                        var curId3 = k;
                                        <TableRow>
                                            <TableRowCell Style="width:200px">@selectedUserGroupList[curId3].Group.GroupName
                                            </TableRowCell>
                                            @{ if (selectedUserGroupList[curId3].ExpirationDate != null)
                                                {
                                                    <TableRowCell>
                                                        @("Until " + selectedUserGroupList[curId3].ExpirationDate.Value.ToString("dd-MMM-yyyy"))
                                                    </TableRowCell>
                                                }
                                                else
                                                {
                                                    <TableRowCell></TableRowCell>
                                                }}
                                        </TableRow>
                                    }
                                }
                                else
                                {
                                    <TableRow>
                                        <TableRowCell>No groups assigned</TableRowCell>
                                    </TableRow>
                                }
                            }
                        </TableBody>
                    </Table>
                </Div>
            </Div>
        </StepPanel>
    </Content>
</Steps>
<Divider />
<Div Display="Display.Flex" Class="justify-content-center pe-5">
    <Button Color="Color.Light" Display="Display.Block" Clicked="@Cancel">Cancel</Button>
    <Div Class="pe-2"></Div>
    <Button Color="Color.Primary" Display="@displayPrev" Clicked="() => stepsRef.PreviousStep()"> Previous</Button>
    <Div Class="pe-2" Display="displayPrev"></Div>
    <Button Color="Color.Primary" Display="@displayNext" Clicked="() => stepsRef.NextStep()">Next</Button>
    <Button Color="Color.Danger" Display="@displaySave" Clicked="@Save">Save User</Button>
</Div>
@code {
    [Inject] IUserService userService { get; set; } = null!;
    [Inject] IUserRoleService userRoleService { get; set; } = null!;
    [Inject] IStudyService studyService { get; set; } = null!;
    [Inject] IGroupService groupService { get; set; } = null!;
    [Inject] INotificationService NotificationService { get; set; }
    [Inject]  NavigationManager navigation {get; set; } = null!;
    [Inject] IOktaService oktaService { get; set; } = null!;
    [Inject] IConfiguration configuration { get; set; } = null!;
    [Inject] IEmailService emailService { get; set; } = null!;
    [Parameter] public int? UserId { get; set; }

    // All steps
    public string AddOrEdit { get; set; }
    string selectedStep = "step1";
    [AllowNull] private Steps stepsRef;
    IFluentDisplay displayPrev = Display.None;
    IFluentDisplay displayNext = Display.Block;
    IFluentDisplay displaySave = Display.None;
    string flexContainerStyle = $"width:50%;";
    string flexItemStylePrimRole = $"width:300px;";
    string flexItemStyleSecRole = $"width:340px;";
    string flexItemStyleSecRole2 = $"width:600px;";
    string flexItemStyleProts = $"width:300px;";
    string flexItemStyleProtsGrid = $"width:500px;";
    string flexItemStyleSpacer = $"width:1px;background-color: gray;";

    // Step 1 vars (User Info)
    string firstName = "";
    string lastName = "";
    string email = "";
    string origEmail = "";
    string title = "";
    bool isActive = false;
    bool activeChanged = false;
    bool isCTEPUser = false;
    string ctepUserId = "";
    bool isAdmin = false;
    string oktaUserStatus = "";
    bool userInfoChanged = false;
    bool ctepChanged = false;
    IFluentDisplay isUserLocked = Display.None;

    // Step 2 vars (Role assignment)
    IFluentDisplay showSecondaryRoles = Display.None;
    int primaryRoleId = 0;
    List<Role> allRoles;
    IList<Role> primaryRoles;
    IList<Role> rolesAvailable;
    IReadOnlyList<int> availableRolesSelected { get; set; }
    IList<UserRole> selectedUserRoleList = new List<UserRole>();
    private UserRole selectedUserRole;
    List<UserRole> selectedUserRoles { get; set; }
    bool primaryRoleDisabled = false;
    private DataGrid<UserRole> assignedSecondaryRoles;

    // Step 3 vars (Protocol & Group Assignment)
    IFluentDisplay showStudies = Display.None;
    IFluentDisplay showIsAdmin = Display.None;
    IFluentDisplay studyGroupAssignmentDiv = Display.None;
    private DataGrid<UserProtocol> assignedStudies;
    private DataGrid<UserGroup> assignedGroups;

    // Step 4 vars (Review page)
    private string roleName = "";

    //  Protocol vars
    int studySelectionType = 2;
    List<Group> allGroups;
    IList<Protocol> protocolsAvailable;
    IReadOnlyList<string> availableSelected { get; set; }
    IList<UserProtocol> selectedUserProtocolList = new List<UserProtocol>();
    private UserProtocol selectedUserProtocol;
    List<UserProtocol> selectedUserProtocols { get; set; }
    // Group vars
    IList<Group> groupsAvailable;
    IReadOnlyList<int> availableGroupsSelected { get; set; }
    IList<UserGroup> selectedUserGroupList = new List<UserGroup>();
    private UserGroup selectedUserGroup;
    List<UserGroup> selectedUserGroups { get; set; }
    User loggedinUser;
    bool loggedinUserIsITAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        if (UserId == null )
        {
            AddOrEdit = "Create User";
        }
        else
        {
            AddOrEdit = "Edit User";
        }

        allRoles = (await userRoleService.GetAllRolesAsync()).ToList();
        primaryRoles = allRoles.ToList().Where(p => p.IsPrimary).ToList();
        rolesAvailable = allRoles.ToList().Where(p => !p.IsPrimary).ToList();

        protocolsAvailable = (await studyService.GetAllProtocolsAsync()).OrderBy(p=>p.StudyId).ToList();
        groupsAvailable = (await groupService.GetAllGroupsAsync()).OrderBy(g => g.GroupName).ToList();
        allGroups = (await groupService.GetAllGroupsAsync()).OrderBy(g => g.GroupName).ToList();

        int loginUserId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
        loggedinUser = await userService.GetUserAsync(loginUserId);
        loggedinUserIsITAdmin = loggedinUser.UserRoles.FirstOrDefault(r => r.Role.IsPrimary && r.Role.AdminType == ThorAdminType.IT) != null;

        if (UserId != null)
        {
            GetUser(UserId);
            AddOrEdit = "Edit User - " + firstName + " " + lastName;
            OnChangeRole(primaryRoleId);
        }
        else
        {
            oktaUserStatus = "N/A";
            // Detemrine if we are allowing Admin to be selected depending on the user logged in is IT Admin
            if (!loggedinUserIsITAdmin)
                RemoveITAdmins();
        }

        userService.SaveActivityLog(loginUserId, ThorActivityType.Navigation, "User", AddOrEdit);
    }

    private void RemoveITAdmins()
    {
        foreach (Role role in allRoles)
        {
            if (role.AdminType == ThorAdminType.IT)
            {
                primaryRoles.Remove(role);
            }
        }
    }

    private Task OnSelectedStepChanged( string name )
    {
        selectedStep = name;

        // Navigation buttons
        if (stepsRef.SelectedStep == "step1")
        {
            displayPrev = Display.None;
            displayNext = Display.Block;
            displaySave = Display.None;
        }
        else if (stepsRef.SelectedStep == "step4")
        {
            displayPrev = Display.Block;
            displayNext = Display.None;
            displaySave = Display.Block;
        }
        else
        {
            displayPrev = Display.Block;
            displayNext = Display.Block;
            displaySave = Display.None;
        }

        // Roles step
        if (stepsRef.SelectedStep == "step2")
        {
            if (isAdmin)
                showSecondaryRoles = Display.None;
            else
                showSecondaryRoles = Display.Block;
        }

        // Protocol & Group div
        if  (stepsRef.SelectedStep == "step3")
        {
            if (isAdmin)
            {
                showStudies = Display.None;
                showIsAdmin = Display.Block;
            }
            else
            {
                showStudies = Display.Block;
                showIsAdmin = Display.None;
            }
        }
        return Task.CompletedTask;
    }

    private bool NavigationAllowed( StepNavigationContext context )
    {
        return true;
    }

    private async void GetUser(int? userId)
    {
        User curUser = await userService.GetUserAsync(Convert.ToInt32(userId));
        List<Role> curRoles = await userRoleService.GetUserRolesAsync(Convert.ToInt32(userId));

        // Step 1
        firstName = curUser.FirstName;
        lastName = curUser.LastName;
        email = curUser.EmailAddress;
        origEmail = curUser.EmailAddress;
        title = curUser.Title;
        isActive = curUser.IsActive;
        isCTEPUser = curUser.IsCtepUser;
        ctepUserId = curUser.CtepUserId;

        // Step 1 - Get OKTA user
        Tuple<bool, string> foundOKTAUser = await oktaService.GetUserStatus(email!);

        if (foundOKTAUser.Item1)
        {
            oktaUserStatus = foundOKTAUser.Item2;
            if (oktaUserStatus == "LOCKED_OUT")
                isUserLocked = Display.Block;
        }
        else
            oktaUserStatus = "Error retrieving OKTA user";
        StateHasChanged();

        // Step 2
        // Get the primary role
        var curPrimRole = curUser.UserRoles.Where(r => r.Role.IsPrimary == true);
        roleName = curPrimRole.FirstOrDefault().Role.RoleName;
        primaryRoleId = curPrimRole.FirstOrDefault().RoleId;
        if (curPrimRole.FirstOrDefault().Role.AdminType != ThorAdminType.None)
            isAdmin = true;

        // determine the functionality of the Primary Role drop down.  If logged in user is not IT admin, limit admin assignment ability

        // Current user not IT admin
        //      Adding user     : hide IT Admin roles from dropdown (handled in OnInitializedAsync)
        //      Editing user    : user being edited is IT admin, disable the control
        //                      : user being edited in not IT admin, remove IT admins from control

        // Determine if logged in user is IT Admin or not
        if (!loggedinUserIsITAdmin)
        {
            if (curPrimRole.FirstOrDefault().Role.AdminType != ThorAdminType.IT)
                RemoveITAdmins();
            else
                primaryRoleDisabled = true;
        }

        // Get the secondary roles
        var curSecondaryRoles = curUser.UserRoles.Where(r=>r.Role.IsPrimary == false);
        selectedUserRoleList = curSecondaryRoles.ToList();
        // Remove assigned from role list
        foreach (UserRole ur in selectedUserRoleList)
        {
            Role? foundRole = rolesAvailable.FirstOrDefault(r=>r.RoleId == ur.RoleId);
            if (foundRole != null){
                rolesAvailable.Remove(foundRole);
            }
        }

        // Step 3
        if (curPrimRole.FirstOrDefault()?.Role.AdminType == ThorAdminType.None && curUser.AllStudies)
            studySelectionType = 2;
        else
            studySelectionType = 1;

        await OnStudySelectionChanged(studySelectionType);

        // Add to assigned studies
        selectedUserProtocolList = curUser.UserProtocols.ToList();
        // Remove assigned from study list
        foreach (UserProtocol up in selectedUserProtocolList)
        {
            Protocol? foundProtocol = protocolsAvailable.FirstOrDefault(p => p.StudyId == up.StudyId);
            if (foundProtocol != null){
                protocolsAvailable.Remove(foundProtocol);
            }
        }

        // Add to assigned groups
        selectedUserGroupList = curUser.UserGroups.ToList();
        // Remove assigned from group list
        foreach (UserGroup ug in selectedUserGroupList)
        {
            Group? foundGroup = groupsAvailable.FirstOrDefault(g=>g.GroupId == ug.GroupId);
            if (foundGroup != null){
                groupsAvailable.Remove(foundGroup);
            }
        }
    }

    private Task OnChangeRole( int value )
    {
        primaryRoleId = value;
        Role selectedRole = allRoles.FirstOrDefault(r => r.RoleId == primaryRoleId);
        if (selectedRole != null)
            roleName = selectedRole.RoleName;
        else
            roleName = "";

        if (selectedRole != null && selectedRole.AdminType != ThorAdminType.None)
            isAdmin = true;
        else
            isAdmin = false;

        if (isAdmin)
            showSecondaryRoles = Display.None;
        else
            showSecondaryRoles = Display.Block;

        return Task.CompletedTask;
    }

    private async void MoveToSelectedProtocol()
    {
        // Add studies to assigned grid
        if (availableSelected != null)
        {
            foreach (string availStudy in availableSelected)
            {
                // Remove from Available list
                Protocol? foundProtocol = protocolsAvailable.FirstOrDefault(p => p.StudyId == availStudy);
                if (foundProtocol != null)
                {
                    protocolsAvailable.Remove(foundProtocol);
                    // Add to Assigned list
                    UserProtocol newUP = new UserProtocol();
                    newUP.StudyId = foundProtocol.StudyId;
                    selectedUserProtocolList.Add(newUP);
                }
            }
            selectedUserProtocolList = selectedUserProtocolList.OrderBy(sup => sup.StudyId).ToList();
        }
        availableSelected = null;
        await assignedStudies.Reload();
    }

    private async void RemoveFromSelectedProtocol()
    {
        // Remove studies from assigned grid
        if (selectedUserProtocols != null)
        {
            foreach (UserProtocol selProtocol in selectedUserProtocols)
            {
                // Remove from Assigned list
                selectedUserProtocolList.Remove(selProtocol);

                //Add to Available list
                Protocol newP = new Protocol();
                newP.StudyId = selProtocol.StudyId;
                protocolsAvailable.Add(newP);
            }
            protocolsAvailable = protocolsAvailable.OrderBy(pa => pa.StudyId).ToList();
        }
        selectedUserProtocols = null;
        await assignedStudies.Reload();
    }

    private Task OnStudySelectionChanged(int value)
    {
        studySelectionType = value;
        if (studySelectionType == 1)
            studyGroupAssignmentDiv = Display.Block;
        else
            studyGroupAssignmentDiv = Display.None;

        return Task.CompletedTask;
    }

    private string GetGroupName(int groupId)
    {
        return allGroups.Find(g => g.GroupId == groupId).GroupName;
    }

    private async void MoveToSelectedGroup()
    {
        if (availableGroupsSelected != null)
        {
            foreach (int selGroup in availableGroupsSelected)
            {
                // Add to assigned list
                Group? foundGroup = groupsAvailable.FirstOrDefault(g=>g.GroupId == selGroup);
                if (foundGroup != null)
                {
                    groupsAvailable.Remove(foundGroup);
                    // Remove from available list
                    UserGroup newUG = new UserGroup();
                    newUG.GroupId = foundGroup.GroupId;
                    newUG.Group = foundGroup;
                    selectedUserGroupList.Add(newUG);
                }
            }
        }
        availableGroupsSelected = null;
        await assignedGroups.Reload();
    }

    private async void RemoveFromSelectedGroup()
    {
        // Remove groups from assigned grid
        if (selectedUserGroups != null)
        {
            foreach(UserGroup selUserGroup in selectedUserGroups)
            {
                // Remove from Assigned List
                selectedUserGroupList.Remove(selUserGroup);

                //Add to Available list
                Group newG = new Group();
                newG.GroupId = selUserGroup.GroupId;
                newG.GroupName = allGroups.Find(g => g.GroupId == selUserGroup.GroupId).GroupName;
                groupsAvailable.Add(newG);
            }
        }
        selectedUserGroups = null;
        await assignedGroups.Reload();
    }

    private string GetRoleName(int roleId)
    {
        return allRoles.Find(r => r.RoleId == roleId).RoleName;
    }

    private async void MoveToSelectedRole()
    {
        if (availableRolesSelected != null)
        {
            foreach (int selRole in availableRolesSelected)
            {
                // Add to assigned list
                Role? foundRole = rolesAvailable.FirstOrDefault(r => r.RoleId == selRole);
                if (foundRole != null)
                {
                    rolesAvailable.Remove(foundRole);
                    // Remove from available list
                    UserRole newUR = new UserRole();
                    newUR.RoleId = foundRole.RoleId;
                    newUR.Role = foundRole;
                    selectedUserRoleList.Add(newUR);
                }
            }
        }
        availableRolesSelected = null;
        await assignedSecondaryRoles.Reload();
    }

    private async void RemoveFromSelectedRole()
    {
        // Remove roles from assigned grid
        if (selectedUserRoles != null)
        {
            foreach(UserRole selUserRole in selectedUserRoles)
            {
                // Remove from Assigned List
                selectedUserRoleList.Remove(selUserRole);

                //Add to Available list
                Role newR = new Role();
                newR.RoleId = selUserRole.RoleId;
                newR.RoleName = allRoles.Find(r => r.RoleId == selUserRole.RoleId).RoleName;
                rolesAvailable.Add(newR);
            }
        }
        selectedUserRoles = null;
        await assignedSecondaryRoles.Reload();
    }

    private DateTime? ExpirationDate()
    {
        return selectedUserProtocol.ExpirationDate ;
    }

    private async void Save()
    {
        if (firstName == "" || lastName == "" || email == "" || !emailRegexIsValid(email) || (isCTEPUser && String.IsNullOrEmpty(ctepUserId)) || primaryRoleId == 0)
        {
            await NotificationService.Error( "Please fix all errors to save.");
            return;
        }

        // Check for duplicate email address
        if (!userService.CheckEmailAddress(email, (int)(UserId != null ? UserId : 0)))
        {
            await NotificationService.Error( "Email Address already exists.");
            return;
        }

        bool saved = false;
        DateTime createDateTime = DateTime.UtcNow;

        // Step 1 - user info
        User saveUser = new User();
        if (UserId != null)
            saveUser.UserId = (int)UserId;
        saveUser.FirstName = firstName;
        saveUser.LastName = lastName;
        saveUser.EmailAddress = email;
        saveUser.Title = title;
        saveUser.IsActive = isActive;
        saveUser.IsCtepUser = isCTEPUser;
        saveUser.CtepUserId = ctepUserId;
        saveUser.CreateDate = createDateTime;
        saveUser.AllStudies = isAdmin;

        //Step 2 - Roles
        //  Save Primary role
        UserRole newUR = new UserRole();
        newUR.RoleId = primaryRoleId;
        newUR.CreateDate = createDateTime;
        saveUser.UserRoles.Add(newUR);

        if (!isAdmin)
        {
            //  Save Secondary Roles
            foreach (UserRole userRole in selectedUserRoleList)
            {
                UserRole newUR2 = new UserRole();
                newUR2.RoleId = userRole.RoleId;
                newUR2.ExpirationDate = userRole.ExpirationDate;
                newUR2.CreateDate = createDateTime;
                saveUser.UserRoles.Add(newUR2);
            }

            //Step 3 - Protocols & Groups
            if (studySelectionType == 1)
            {
                // Use study and protocols for assignments
                foreach (UserProtocol userProt in selectedUserProtocolList)
                {
                    UserProtocol newUP = new UserProtocol();
                    newUP.StudyId = userProt.StudyId;
                    newUP.ExpirationDate = userProt.ExpirationDate;
                    newUP.CreateDate = createDateTime;
                    saveUser.UserProtocols.Add(newUP);
                }

                foreach (UserGroup userGroup in selectedUserGroupList)
                {
                    UserGroup newUG = new UserGroup();
                    newUG.GroupId = userGroup.GroupId;
                    newUG.ExpirationDate = userGroup.ExpirationDate;
                    newUG.CreateDate = createDateTime;
                    saveUser.UserGroups.Add(newUG);
                }
            }
            else if (studySelectionType == 2)
                saveUser.AllStudies = true;
        }

        int loggedInUserId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
        saved = userService.SaveUser(saveUser, loggedInUserId);

        // Try to create or update the OKTA user
        bool oktaSuccess = true;
        bool oktaGroupSuccess = true;
        bool emailSuccess = true;
        if (saved)
        {
            if (UserId == null)
            {
                bool isProd = configuration.GetValue<string>("System:Environment").StartsWith("Prod");

                string baseURL = navigation.BaseUri;
                string initialSite = "NCI Oncology Automated Reporting System";
                string siteAcronym = "NCI Oncology Automated Reporting System";

                if (!isProd)
                {
                    initialSite = initialSite + "-" + configuration.GetValue<string>("System:Environment");
                    siteAcronym = siteAcronym + "-" + configuration.GetValue<string>("System:Environment");
                }

                // Determine if user exists in OKTA (OKTA is for multi-applications (I.e.  OARS, IWRS, etc) & environments (i.e.  DEV, UAT, etc)
                Tuple<bool, string> oktaResults = await oktaService.FindUser(email);

                // If user doesn't exist, create user and send welcome email
                // If user exists, add them to proper group and send user configured for OARS email
                // Error finding the user in OKTA
                if (oktaResults.Item1)
                {
                    // User exists - add to required group and send email
                    oktaResults = await oktaService.AddUserGroup(saveUser.EmailAddress, isCTEPUser);
                    oktaSuccess = oktaResults.Item1;
                    if (oktaSuccess)
                    {
                        if (isActive)
                            emailSuccess = await emailService.SendNewSystemEmail(initialSite, siteAcronym, "NCI-OARS", navigation.BaseUri, configuration.GetValue<string>("System:SystemColor"), saveUser);
                    }
                }
                else if (!oktaResults.Item1 && oktaResults.Item2 == "")
                {
                    // User does not exist - create the user, but deactivated
                    oktaResults = await oktaService.CreateUser(isProd, saveUser, isCTEPUser, true, baseURL, initialSite);
                    oktaSuccess = oktaResults.Item1;
                    if (oktaSuccess)
                    {
                        string userId = oktaResults.Item2;
                        // User is created - activate it - don't send email from OKTA, send via THOR
                        for (int iTry = 0; iTry < 5; iTry++)
                        {
                            oktaResults = await oktaService.UpdateActiveStatus(userId, true, isCTEPUser);
                            oktaSuccess = oktaResults.Item1;
                            if (oktaSuccess)
                                break;
                        }

                        if (isActive)
                        {
                            string activationLink = oktaResults.Item2;

                            emailSuccess = await emailService.SendNewUserEmail(initialSite, siteAcronym, "NCI-OARS", navigation.BaseUri, configuration.GetValue<string>("System:SystemColor"), saveUser, activationLink);
                        }
                     }
                }
                else
                {
                    // Error calling okta
                }
            }
            else
            {
                // Check if we need to update FirstName, LastName or EmailAddress
                if (userInfoChanged)
                {
                    Tuple<bool, string> oktaResults = await oktaService.UpdateUserInfo(origEmail, saveUser);
                    oktaSuccess = oktaResults.Item1;
                }

                // Check if we need to update groups (isCTEP changed)
                if (ctepChanged)
                {
                    Tuple<bool, string> groupResults = await oktaService.UpdateUserCTEP(email, isCTEPUser);
                    oktaGroupSuccess = groupResults.Item1;
                }
            }
        }

        if (saved && oktaSuccess && oktaGroupSuccess)
        {
            await NotificationService.Success( "User successfully saved");
            navigation.NavigateTo("/admin/users");
        }
        else if (saved && (!oktaSuccess || !oktaGroupSuccess))
        {
            await NotificationService.Success( "User successfully saved - OKTA save failed");
            navigation.NavigateTo("/admin/users");            
        }
        else
        {
            await NotificationService.Error( "Error saving user");
            navigation.NavigateTo("/admin/users");
        }
    }

    private void Cancel()
    {
        navigation.NavigateTo("/admin/users");
    }

    private void OnHelpClicked()
    {

    }

    Task OnFirstNameChanged(string text)
    {
        firstName = text;
        userInfoChanged = true;

        return Task.CompletedTask;
    }

    Task OnLastNameChanged(string text)
    {
        lastName = text;
        userInfoChanged = true;

        return Task.CompletedTask;
    }

    Task OnEmailChanged(string text)
    {
        email = text;
        userInfoChanged = true;

        return Task.CompletedTask;
    }

    Task OnCTEPChanged(bool value)
    {
        isCTEPUser = value;
        userInfoChanged = true;
        ctepChanged = true;

        return Task.CompletedTask;
    }

    async Task UnlockUser()
    {
        Tuple<bool, string> unlockSuccess = await oktaService.UnlockUser(origEmail);
        if (unlockSuccess.Item1)
        {
            oktaUserStatus = "ACTIVE";
            isUserLocked = Display.None;
            await NotificationService.Success( "User unlocked");
            StateHasChanged();
        }
        else
        {
            await NotificationService.Error("Error unlocking user");
        }
    }

    Task OnActiveChanged(bool value)
    {
        isActive = value;
        activeChanged = true;

        return Task.CompletedTask;        
    }

    private bool emailRegexIsValid(string emailAddress)
    {
        return System.Text.RegularExpressions.Regex.IsMatch(emailAddress, @"^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$", 
            System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    }

    private bool isDuplicateEmail(string emailAddress, int userId)
    {
        return userService.CheckEmailAddress(emailAddress, userId);
    }
}
