@using OARS.Data.Models;
@using OARS.Data.Services.Abstract;
@inject IHttpContextAccessor httpContextAccessor
@inject IConfiguration configuration
@layout AdminLayout

<Div Padding="Padding.Is4" Margin="Margin.Is3.FromBottom">
	<Row Padding="Padding.Is2">
		<LoadingIndicator @ref="loading">
			<Field>
				<FieldBody Margin="Margin.IsAuto">
					<Button Block Disabled="@preventEdit" Color="Color.Primary" onclick="@PublishProtocol">Publish Study</Button>
				</FieldBody>
			</Field>
		</LoadingIndicator>
	</Row>
</Div>
@code {
	[Inject] private IMessageService messageService { get; set; } = null!;
	[Inject] private IProtocolMappingService protocolMappingService { get; set; } = null!;
	[Parameter] public int protocolMappingId { get; set; }
	[Parameter] public bool preventEdit { get; set; }

	private ProtocolMapping mapping;
	private LoadingIndicator loading;

	protected override async Task OnInitializedAsync()
	{
		var watch = System.Diagnostics.Stopwatch.StartNew();
		this.mapping = await protocolMappingService.GetProtocolMapping(protocolMappingId);
		watch.Stop();
		var elapsedMs = watch.ElapsedMilliseconds;
		System.Console.WriteLine($"Protocol Publish Elapsed time: {elapsedMs} ms");
	}

	public async void PublishProtocol()
	{
		await loading.Show();

		if(!await messageService.Confirm($"Are you sure you want to publish this study to production?", "Confirmation"))
		{
			await loading.Hide();
			return;
		}
		var result = await protocolMappingService.PublishProtocolMapping(protocolMappingId);

		await loading.Hide();

		if (result)
		{
			await messageService.Success($"Study published successfully");
		}
		else
		{
			await messageService.Error($"Error publishing study");
		}
	}
}
