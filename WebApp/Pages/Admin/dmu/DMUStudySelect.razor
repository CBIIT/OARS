@using OARS.Data.Models;
@using OARS.Data.Services.Abstract;
@using OARS.Data.Static;
@using OARS.Data.Identity
@inject IHttpContextAccessor httpContextAccessor
@layout AdminLayout
@page "/admin/dmu/select-study"
<AdminRoleCheck AllowedRoles="@(new List<string> { "IT" })" AllowedTHORRoles="@(new List<string> { "DMU Study Admin", "DMU Global Admin" })"></AdminRoleCheck>

<DataGrid @ref=dataGridRef
          TItem="ProtocolMapping"
          Class="admindatagrid"
          Data="@studyList"
          Editable
          Responsive
          Striped
          ShowPager
          ShowPageSizes
          Sortable
          SortMode="DataGridSortMode.Single"
          Filterable
           FilterMethod="DataGridFilterMethod.Contains"
           MaxPaginationLinks="5"
           PagerPosition="DataGridPagerPosition.Bottom"
           PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
          FixedHeader
           FixedHeaderDataGridHeight="calc(100vh - 240px)"
           FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
           SelectionMode="DataGridSelectionMode.Multiple"
           @bind-SelectedRows="selectedProtocols">
     <DataGridColumns>
         <DataGridMultiSelectColumn Width="30px"></DataGridMultiSelectColumn>
        <DataGridColumn Width="10%" Caption="Version" Field="@nameof(ProtocolMapping.MappingVersion)" Editable Filterable="true" Sortable="true">
            <DisplayTemplate>
                @if(context.ProtocolMappingId == 0)
				{
					<Text>N/A</Text>
				}
				else
				{
					<Text>@context.MappingVersion</Text>
				}
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Width="20%" Field="@nameof(ProtocolMapping.THORStudyId)" Sortable="true" Filterable="true" Caption="Study ID" SortDirection="SortDirection.Ascending">
        </DataGridColumn>
        <DataGridColumn Width="50%" Field="@nameof(ProtocolMapping.ProtocolTitle)" Sortable="true" Filterable="true" Caption="Title">
        </DataGridColumn>
        <DataGridColumn Width="10%" Field="Status.StatusName" Sortable="true" Filterable="true" Caption="Status">
        </DataGridColumn>
        <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="false">
            <EditCommandTemplate>
                 @if(context.Item.Status.StatusName != "Active" && context.Item.ProtocolMappingId != 0)
				 {
                    <Button><Icon Name="IconName.InfoCircle" Clicked="@(()=>EditMapping(context.Item))" /></Button>
                }
                else
				 {
					 <Button><Icon Name="IconName.Edit" Clicked="@(()=>EditMapping(context.Item))" /></Button>
				 }
            </EditCommandTemplate>
            <ClearFilterCommandTemplate>
                <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
            </ClearFilterCommandTemplate>
        </DataGridCommandColumn>
    </DataGridColumns>
    <ButtonRowTemplate>
        <Button Color="Color.Primary" Clicked="@ShowStudyModal">Create Study</Button>
        <Button Color="Color.Danger" Clicked="@ProcessSelectedStudies">Process Selected Studies</Button>
        <Button Color="Color.Secondary" Clicked="@ShowHideArchived">@(includeArchived ? "Hide Archived" : "Show Archived")</Button>
    </ButtonRowTemplate>
    <EmptyTemplate>
        <div class="box">
            No studies were found.
        </div>
    </EmptyTemplate>
</DataGrid>
<Modal @bind-Visible="@createStudyVisible">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Create Study</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Protocol</FieldLabel>
                <TextEdit Placeholder="Protocol" @bind-Text="@protocolName" />
            </Field>
            <Field>
                <FieldLabel>Profile</FieldLabel>
                <Select TValue="int" @bind-SelectedValue="@selectedProfile">
                    <SelectItem Value=0>Select Profile</SelectItem>
                    @foreach (var profile in profileList)
                    {
                        <SelectItem Value="@profile.ProfileId">@profile.ProfileName</SelectItem>
                    }
                </Select>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideStudyModal">Cancel</Button>
            <Button Color="Color.Primary" Clicked="@SaveStudyModal">Create Study</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] private IMessageService messageService { get; set; } = null!;
    [Inject] INotificationService notificationService { get; set; }
    [Inject] IProtocolMappingService protocolMappingService { get; set; }
    [Inject] IStudyService studyService { get; set; }
    [Inject] IUserService userService { get; set; }
    [Inject] IProfileService profileService { get; set; } = null!;

    private DataGrid<ProtocolMapping> dataGridRef;
    private IList<ProtocolMapping> studyList;

    private List<ProtocolMapping> selectedProtocols;
    private bool includeArchived = false;

    private bool createStudyVisible;
    private string protocolName = "";
    private int selectedProfile = 0;
    private IList<Profile> profileList = new List<Profile>();

    protected override async Task OnInitializedAsync()
    {
        List<string> allowed = new List<string> { "DMU Study Admin", "DMU Global Admin" };
        List<string> adminRole = new List<string> { "IT" };
        if (httpContextAccessor?.HttpContext?.User.HasAnyTHORRole(allowed.ToArray()) == false && httpContextAccessor?.HttpContext?.User.HasAnyAdminRole(adminRole.ToArray()) == false)
        {
            var studyIds = userService.GetProtocolAccessForUser(httpContextAccessor.HttpContext.User.GetUserId());
            studyList = await protocolMappingService.GetProtocolMappings(studyIds, includeArchived);
        }
        else
        {
            studyList = await protocolMappingService.GetProtocolMappings(includeArchived);
        }

        this.profileList = await profileService.GetProfiles();
    }

    private async Task EditMapping(ProtocolMapping mapping)
    {
        if(mapping.ProtocolMappingId > 0)
        {
            navigation.NavigateTo($"/admin/dmu/study-admin/{mapping.ProtocolMappingId}");
        }
        else
        {
            List<ProtocolPhase> phases = new List<ProtocolPhase>();
            mapping.ProtocolMappingStatusId = 1;
            await protocolMappingService.SaveProtocolMapping(mapping, phases);
            navigation.NavigateTo($"/admin/dmu/study-admin/{mapping.ProtocolMappingId}");
        }
    }

    private async void ShowHideArchived()
    {
        includeArchived = !includeArchived;
        studyList = await protocolMappingService.GetProtocolMappings(includeArchived);
        await dataGridRef.Refresh();
    }
    private async Task ProcessSelectedStudies()
    {
        //Placeholder for future functionality
    }

    private Task ShowStudyModal()
    {
        createStudyVisible = true;
        return Task.CompletedTask;
    }

    private Task HideStudyModal()
    {
        protocolName = "";
        selectedProfile = 0;
        createStudyVisible = false;
        return Task.CompletedTask;
    }

    private Task SaveStudyModal()
    {
        // Check for valid entries
        protocolName = protocolName.Trim();
        if (protocolName == "" || selectedProfile == 0)
        {
            messageService.Warning("You must enter a Protocol name and select a Profile.");
            return Task.CompletedTask;
        }
        else
        {
            // Get list of current studies - is exists, show error
            ProtocolMapping foundMapping = studyList.Where(s => s.THORStudyId.ToUpper() == protocolName.ToUpper()).SingleOrDefault();
            if (foundMapping != null)
            {
                messageService.Warning("Please enter a unique protocol name.");
            }
            else
            {
                ProtocolMapping mapping = new ProtocolMapping();
                List<ProtocolPhase> phases = new List<ProtocolPhase>();
                mapping.THORStudyId = protocolName;
                mapping.ProfileId = selectedProfile;
                mapping.ProtocolMappingStatusId = 1;
                protocolMappingService.SaveProtocolMapping(mapping, phases);
                navigation.NavigateTo($"/admin/dmu/study-admin/{mapping.ProtocolMappingId}");
            }
        }
        return Task.CompletedTask;
    }
}
