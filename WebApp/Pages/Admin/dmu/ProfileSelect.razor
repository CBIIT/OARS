@using OARS.Data.Models;
@using OARS.Data.Services.Abstract;
@inject IHttpContextAccessor httpContextAccessor
@inject IConfiguration configuration
@layout AdminLayout

@page "/admin/dmu/select-profile"
<AdminRoleCheck AllowedRoles="@(new List<string> { "IT" })" AllowedTHORRoles="@(new List<string> { "DMU Global Admin" })"></AdminRoleCheck>
<Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1"><h2>DMU Global Administration</h2></Div>
<Div Padding="Padding.Is4" Margin="Margin.Is3.FromBottom" Class="dmu-admin-subpanel">
    <Row>
        <Column ColumnSize="ColumnSize.Is9">
            <Row Padding="Padding.Is2">
                <Column ColumnSize="ColumnSize.Is4" Class="dmu-admin-label-field-container">
                    <Text>Select Mapping Profile:</Text>
                </Column>
                <Column ColumnSize="ColumnSize.Is4">
                    <Select TValue="int" @bind-SelectedValue="@selectedMappingProfileId">
                        <SelectItem Value="@invalidId">Select a Mapping Profile</SelectItem>
                        @foreach (var profile in profileList)
                        {
                            <SelectItem Value="@profile.ProfileId">@profile.ProfileName</SelectItem>
                        }
                    </Select>
                </Column>
                <Column ColumnSize="ColumnSize.Is4">
                    <Button Flex="Flex.JustifyContent.Center" Type="ButtonType.Button" Size="Size.Medium" Color="Color.Info" Class="dmu-admin-button" Clicked="@NavigateToProfileEdit">
                        Edit Mapping Profile
                    </Button>
                </Column>
            </Row>
            <Row Padding="Padding.Is2">
                <Column ColumnSize="ColumnSize.Is4" Class="dmu-admin-label-field-container">
                    <Text>New Profile name:</Text>
                </Column>
                <Column ColumnSize="ColumnSize.Is4">
                    <TextEdit Placeholder="[New Profile Name]" MaxLength="50" @bind-Text="@newMappingProfile"></TextEdit>
                </Column>
                <Column ColumnSize="ColumnSize.Is4">
                    <Button Flex="Flex.JustifyContent.Center" Type="ButtonType.Button" Size="Size.Medium" Color="Color.Info" Class="dmu-admin-button" Clicked="@SaveNewProfile">
                        New Mapping Profile
                    </Button>
                </Column>
            </Row>
        </Column>
        <Column ColumnSize="ColumnSize.Is3">
            <Div TextAlignment="TextAlignment.Center">
                <Button Flex="Flex.JustifyContent.Center" Type="ButtonType.Button" Color="Color.Danger" Size="Size.Medium" Class="dmu-admin-button-danger" Clicked="@NavigateToGlobalDMU">
                    Access Global DMU
                </Button>
            </Div>
            <Div>
                <Image Source="img/alert-icon.png" Class="nci-alert-icon" />
                <Text Class="dmu-admin-warning-text" TextColor="TextColor.Danger">Warning - Any update to the Global DMU table will potentially impact the DMI Processor and Reports in NCI-OARS. Any change could negatively impact existing mapped studies. Proceed with Caution.</Text>
            </Div>
        </Column>
    </Row>
</Div>
@code {
    [Inject] IProfileService profileService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] IUserService userService { get; set; } = null!;
    [Inject] IMessageService messageService { get; set; } = null!;

    private IList<Profile> profileList = new List<Profile>();
    private int selectedMappingProfileId = 0;
    private string? newMappingProfile = "";
    private static int invalidId = 0;

    protected override async Task OnInitializedAsync()
    {
        this.profileList = await profileService.GetProfiles();
        await base.OnInitializedAsync();
    }
    public async void SaveNewProfile()
    {
        if (!String.IsNullOrEmpty(newMappingProfile))
        {
            // Check profile list for existing profile name
            newMappingProfile = newMappingProfile.Trim();
            var foundProfile = profileList.Where(p => p.ProfileName.ToUpper() == newMappingProfile.ToUpper()).FirstOrDefault();
            if (foundProfile == null)
            {
                int? newProfileId = await profileService.SaveProfile(new Profile { ProfileName = newMappingProfile });
                if (newProfileId != null)
                {
                    NavigateToProfileNew(newProfileId.Value);
                }
            }
            else
            {
                await messageService.Warning("A profile with that name already exists.");
                return;
            }
        }
        else
        {
            await messageService.Warning("You must enter a new profile name.");
            return;
        }

    }
    private void NavigateToGlobalDMU()
    {
        navigation.NavigateTo("/admin/dmu/global-admin");
    }

    private async void NavigateToProfileEdit()
    {
        if(selectedMappingProfileId == 0)
        {
            await messageService.Warning("You must select a profile or create a new one.");
            return;
        }
        navigation.NavigateTo($"/admin/dmu/profile-categories/{selectedMappingProfileId}");
    }

    private void NavigateToProfileNew(int profileId)
    {
        navigation.NavigateTo($"/admin/dmu/profile-categories/{profileId}");
    }
}
