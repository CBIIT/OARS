@page "/internallogin"
@using OARS.Data.Models;
@using OARS.Data.Services;
@using OARS.Data;
@using OARS.Data.Services.Abstract;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage SessionData
@inject IConfiguration configuration
@inject IJSRuntime JSRuntime
@layout LoginLayout

<Div Flex="Flex.JustifyContent.Between" Class="nci-login-banner">
    <Div Padding="Padding.Is2">
        <Image Source="img/OarsLogo.svg" Height="Height.Is100"></Image>
    </Div>
    <Div Padding="Padding.Is2">
        <Image Source="img/NCIOarsSmallLogo.png" Height="Height.Is100"></Image>
    </Div>
</Div>
<div class="loginVideoDiv">
    <video id="loginVideo" src="/video/Oncology CRO Services.mp4" loop muted defaultmuted playsinline></video>
    <Div Padding="Padding.Is2" Class="nci-centered-div">
        <Card Height="Height.Auto" Class="nci-login-card">
            <CardBody>
                <CardTitle Size="5">
                    Sign in
                </CardTitle>
            </CardBody>
            <CardBody>
                 <Div Class="my-2" Flex="Flex.JustifyContent.Center">
                     <Button Flex="Flex.JustifyContent.Center" Block Color="Color.Primary" TextWeight="TextWeight.Bold" TextColor="TextColor.White" Clicked="@OnButtonClicked">Theradex Sign In</Button>
                 </Div>
                 <Div Class="my-2" TextAlignment="TextAlignment.Center" Flex="Flex.JustifyContent.Center">
                     <EnvironmentLbl />
                 </Div>
                 <Div Class="my-2" TextAlignment="TextAlignment.Center" id="loginHelp">If you need assistance, please contact us at <a href="mailTo:@supportEmail">@supportEmail</a></Div>
            </CardBody>
        </Card>
    </Div>
</div>
<Div Flex="Flex.AlignItems.Stretch" Style="@border">
    <Column>
        <Div Padding="Padding.Is2" Style="@border">
            <Accordion Class="nci-alert-accordion">
                <Collapse Visible>
                    <CollapseHeader>
                        <AccordionToggle>
                            <Image Source="img/alert-icon.png"  Class="nci-alert-icon" />
                            Alerts
                        </AccordionToggle>
                    </CollapseHeader>
                    <CollapseBody>
                        <AlertBar Alert LoginScreen NoAlertsMessage CSS="nci-alert-component" />
                     </CollapseBody>
                 </Collapse>
             </Accordion>
         </Div>
     </Column>
     <Column>
         <Div Padding="Padding.Is2" Style="@border">
             <Accordion>
                 <Collapse Visible>
                    <CollapseHeader>
                        <AccordionToggle>
                            <Image Source="img/notification-icon.png"  Class="nci-alert-icon" />
                            Notes
                        </AccordionToggle>
                    </CollapseHeader>
                    <CollapseBody Class="nci-alert-accordion">
                        <AlertBar Note LoginScreen NoAlertsMessage CSS="nci-alert-component" />
                     </CollapseBody>
                 </Collapse>
             </Accordion>
         </Div>
     </Column>
 </Div>

 @code {
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject] private IAlertService alertService { get; set; } = null!;
    private IList<ThorAlert> activeAlerts = new List<ThorAlert>();
    private IList<ThorAlert> activeNotes = new List<ThorAlert>();
    private int iconHeight = 24;
    public string CurrentEnvironment { get; set; }
    private string supportEmail = "";
    private double videoPlaybackRate = 0.75;

    string loginPaneStyle = $"width:35%";
    string border = $"width:100%;";

    protected override async Task OnInitializedAsync()
    {
        this.clearAlertSessionData();
        activeAlerts = await alertService.GetActiveLoginAlertsAsync();
        activeNotes = await alertService.GetActiveLoginNotesAsync();

        string currentEnvironment = configuration.GetValue<string>("System:Environment");
        if (currentEnvironment != "Prod")
            CurrentEnvironment = currentEnvironment;
        else
            CurrentEnvironment = "";

        supportEmail = configuration.GetValue<string>("EmailSettings:SupportEmail");

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setPlaybackRate", "loginVideo", videoPlaybackRate);
        }
    }

    Task OnButtonClicked()
    {
        Navigation.NavigateTo($"Login", true);

        return Task.CompletedTask;
    }

    private void clearAlertSessionData()
    {
        SessionData.SetAsync("dismissedAlerts", string.Empty);
        SessionData.SetAsync("systemAlertsDropdownDismissed", string.Empty);
    }
}
