@typeparam T
@using System.Diagnostics.CodeAnalysis
@using Microsoft.Extensions.Options
@using Newtonsoft.Json
@using OARS.Data.Models;
@using OARS.Data.Models.ADDR
@using OARS.Data.Services.Abstract;
@using OARS.Data.Services.Abstract.ADDR
@using OARS.Data.Static;
@using OARS.Data.Models.Configuration;

@inject IHttpContextAccessor httpContextAccessor
@inject INotesService<T> service

<div class="container">

    <Div Flex="Flex.AlignItems.Start" Margin="Margin.Is3.FromBottom" Background="Background.Light">
        <Div Padding="Padding.Is2" Style="width:50%;">
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Study</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is6" style="align-content: center">
                    @Protocol
                </FieldBody>
            </Field>
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Data Source</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is6" style="align-content: center">
                    @DataSource
                </FieldBody>
            </Field>
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Specimen ID</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is6" style="align-content: center">
                    @SpecimenId
                </FieldBody>
            </Field>
        </Div>
        <Div Padding="Padding.Is2" Style="width:50%;">
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Form</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is6" style="align-content: center">
                    @CrfDescription
                </FieldBody>
            </Field>
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Subject ID</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is6" style="align-content: center">
                    @SubjectId
                </FieldBody>
            </Field>
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Sub Specimen ID</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is6" style="align-content: center">
                    @SubSpecimenId
                </FieldBody>
            </Field>
        </Div>
    </Div>

    <Divider DividerType="DividerType.TextContent" Text="Add New Notes" />

    <div class="mb-3">
        <Validations @ref="validations" Mode="ValidationMode.Manual">
            <Validation Validator="@ValidationRule.IsNotEmpty">
                <Field>
                    <MemoEdit @bind-Text="NewNotes" Rows="3" Placeholder="Enter Notes" />
                </Field>
            </Validation>
            <Validation Validator="@ValidationRule.IsNotEmpty">
                <Field>
                    <RadioGroup TValue="string" Name="colors" @bind-CheckedValue="@NotesPriority">
                        <Radio Value="@("low")">Low</Radio>
                        <Radio Value="@("medium")">Medium</Radio>
                        <Radio Value="@("high")">High</Radio>
                        <Radio Value="@("critical")">Critical</Radio>
                    </RadioGroup>
                </Field>
            </Validation>
            <Button Color="Color.Primary" Clicked="@SaveNotes">Save Notes</Button>
            <Button Color="Color.Secondary" Clicked="@ClearNotes">Clear</Button>
        </Validations>
    </div>

    <Alert Color="Color.Warning" @bind-Visible="@IsErrorMessageVisible">
        <AlertMessage>
            Error updating notes. Please try again.&nbsp;&nbsp;
        </AlertMessage>
        <CloseButton />
    </Alert>

    <Divider DividerType="DividerType.TextContent" Text="History" />

    <Div>
        <DataGrid Class="addr-data-grid"
                  TItem="AddrNotes<T>"
                  Data="@AllNotes"
                  FixedHeaderDataGridHeight="250px"
                  FixedHeaderDataGridMaxHeight="250px"
                  PageSize="5"
                  Responsive
                  Hoverable
                  Groupable
                  ShowGrouping
                  Striped
                  Filterable
                  RowStyling="@OnRowStyling"
                  ShowPager
                  ShowPageSizes
                  Sortable
                  MaxPaginationLinks="5"
                  PagerPosition="DataGridPagerPosition.Bottom"
                  PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End
                                }"
                  FixedHeader
                  Resizable
                  FilterMode="DataGridFilterMode.Menu"
                  SortMode="DataGridSortMode.Multiple"
                  ResizeMode="TableResizeMode.Columns"
                  SelectedRowStyling="@OnSelectedRowStyling"
                  CommandMode="DataGridCommandMode.ButtonRow">
            <DataGridColumns>
                <DataGridColumn Sortable="false" Filterable="false">
                    <DisplayTemplate>
                        <Div Flex="Flex.Column.JustifyContent.Center">
                            <Span Flex="Flex.JustifyContent.Center.AlignItems.Center">
                                <Button Size="Size.ExtraSmall">
                                    <Figure Size="FigureSize.Is16x16" Class="mx-auto">
                                        <FigureImage Source="img/notes.png" Class="mx-auto" />
                                    </Figure>
                                </Button>
                            </Span>
                        </Div>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn Caption="" Filterable="false">
                    <DisplayTemplate>
                        <Badge Color="@GetStatusColor((context as AddrNotes<T>).Priority)" Pill>
                            @((context as AddrNotes<T>).Priority)
                        </Badge>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn Field="@nameof(AddrNotes<T>.Notes)" Caption="Notes" Width="55%" Filterable="false" />
                <DataGridColumn Field="@nameof(AddrNotes<T>.SpecimenId)" Groupable Caption="Specimen ID" Width="10%" Filterable="true" FilterMethod="DataGridColumnFilterMethod.Contains" />
                <DataGridColumn Field="@nameof(AddrNotes<T>.SubSpecimentId)" Groupable Caption="SubSpeciment ID" Width="10%" Filterable="true" FilterMethod="DataGridColumnFilterMethod.Contains" />
                <DataGridColumn Field="@nameof(AddrNotes<T>.CreatedBy)" Groupable Caption="Added By" Width="10%" Filterable="false" />
                <DataGridDateColumn Field="@nameof(AddrNotes<T>.CreatedOn)" Caption="Added On" Width="10%" Filterable="false">
                    <DisplayTemplate>
                        @{
                            var date = (context as AddrNotes<T>)?.CreatedOn;

                            if (date != null)
                            {
                                @(date.Value.ToString("dd-MMM-yyyy hh:mm"))
                            }
                        }
                    </DisplayTemplate>
                </DataGridDateColumn>
            </DataGridColumns>
            <EmptyTemplate>
                <div class="box">
                    No Notes !
                </div>
            </EmptyTemplate>
        </DataGrid>
    </Div>

</div>

@code {

    [Parameter]
    public string DataSource { get; set; }

    [Parameter]
    public string SubjectId { get; set; }

    [Parameter]
    public string SpecimenId { get; set; }

    [Parameter]
    public string SubSpecimenId { get; set; }

    [Parameter]
    public string Protocol { get; set; }

    [Parameter]
    public string Crf { get; set; }

    [Parameter]
    public string CrfDescription { get; set; }

    [Parameter]
    public string UserName { get; set; }

    public List<AddrNotes<T>>? AllNotes { get; set; }

    public string NewNotes { get; set; }
    public string NotesPriority { get; set; }

    public bool IsSuccessMessageVisible { get; set; } = false;
    public bool IsErrorMessageVisible { get; set; } = false;

    Validations validations;

    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(DataSource))
            return;

        int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);

        string searchKey = AddrNotes<T>.GenerateSearchKey(DataSource, Protocol, Crf, SubjectId);

        AllNotes = await service.GetAllNotesAsync(userId.ToString(), searchKey);
    }

    private async Task SaveNotes()
    {
        try
        {
            if (!await validations.ValidateAll())
                return;

            int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);

            var addrNotes = new AddrNotes<T>
                {
                    Notes = NewNotes,
                    Protocol = Protocol,
                    DataSource = DataSource,
                    SubjectId = SubjectId,
                    SpecimenId = SpecimenId,
                    SubSpecimentId = SubSpecimenId,
                    FormId = Crf,
                    UserId = userId.ToString(),
                    CreatedBy = UserName,
                    Priority = NotesPriority
                };

            await service.SaveNotesAsync(addrNotes);

            string searchKey = AddrNotes<T>.GenerateSearchKey(DataSource, Protocol, Crf, SubjectId);

            AllNotes = await service.GetAllNotesAsync(userId.ToString(), searchKey);

            NewNotes = string.Empty;

            NotesPriority = null;
        }
        catch (Exception)
        {
            IsErrorMessageVisible = true;
        }
    }

    private void ClearNotes()
    {
        NewNotes = string.Empty;
        NotesPriority = null;
    }

    private void OnRowStyling(AddrNotes<T> item, DataGridRowStyling styling)
    {
    }

    private void OnSelectedRowStyling(AddrNotes<T> item, DataGridRowStyling styling)
    {
        styling.Background = Background.Info;
    }

    private Blazorise.Color GetStatusColor(string status)
    {
        if (status == "low")
            return Color.Info;
        else if (status == "medium")
            return Color.Secondary;
        else if (status == "high")
            return Color.Warning;
        else if (status == "critical")
            return Color.Danger;
        else
            return Color.Secondary;
    }
}
