@using System.Net.Http
@using System.Threading.Tasks
@using Microsoft.Extensions.Options;
@using OARS.Data
@using OARS.Data.Models;
@using OARS.Data.PowerBI
@using OARS.Data.PowerBI.Abstract;
@using OARS.Data.PowerBI.Models;
@using OARS.Data.Static;
@using OARS.Data.Services;
@using OARS.Data.Services.Abstract;
@inject IHttpContextAccessor httpContextAccessor;

<div @ref="@pbiElement" class="pbi-embed-container" />


@code {
    [Inject] private IJSRuntime js { get; set; } = null!;
    [Inject] private IOptions<PowerBI> powerBiConfig { get; set; } = null!;
    [Inject] private IPbiEmbedService pbiEmbedService { get; set; } = null!;
    [Inject] private IStudyService studyService { get; set; } = null!;
    [Inject] private IUserService userService { get; set; } = null!;
    [Inject] private IDashboardService dashboardService { get; set; } = null!;

    [Parameter] public Dashboard? Dashboard { get; set; }
    [Parameter] public Report? Report {get; set; }
    [Parameter] public bool RefreshReport { get; set; }
    [CascadingParameter] LoadingIndicator loadingIndicator { get; set; } = null!;

    private ElementReference pbiElement;
    private IJSObjectReference? pbiEmbedModule;
    private IJSObjectReference? reportRef;
    private DotNetObjectReference<PowerBiFullReport>? objRef;
    private static Func<string[], Task> UpdateFilterActionAsync;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UpdateFilterActionAsync= LocalChangUpdateFilterValueAsync;
        RefreshReport = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (RefreshReport)
        {
            await loadingIndicator.Show();
            pbiEmbedModule = await js.InvokeAsync<IJSObjectReference>("import", "./js/powerbi-embed-fullreport.js");
            objRef = DotNetObjectReference.Create(this);
            await EmbedFullReportJS();
            await loadingIndicator.Hide();
        }
    }

    public async Task Update()
    {
        if (reportRef != null)
        {
            await loadingIndicator.Show();
            await EmbedFullReportJS();
            await loadingIndicator.Hide();
        }
    }

    public async Task EmbedFullReportJS()
    {
        var userEmail = httpContextAccessor.HttpContext?.User?.FindFirst("preferred_username")?.Value;
        bool isAdmin = httpContextAccessor.HttpContext.User.HasClaim(ThorClaimType.IsAdmin, "True");
        int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
        var currentStudy = "";
        string dataToSend = "";
        string[] filterTable;
        string[] filterColumn;
        string[] filterDisplayName;
        string[] filterType;
        string[] filterData;

        ReportFilter? reportFilter = null;
        if (Report.ReportFilterId != null)
        {
            // Set the report filters
            reportFilter = await dashboardService.GetReportFilterByIdAsync((int)Report.ReportFilterId);
            List<ReportFilterItem> orderedFilter = reportFilter.FilterItems.OrderBy(rf => rf.ReportFilterItemId).ToList();

            filterTable = new string[reportFilter.FilterItems.Count()];
            filterColumn = new string[reportFilter.FilterItems.Count()];
            filterDisplayName = new string[reportFilter.FilterItems.Count()];
            filterType = new string[reportFilter.FilterItems.Count()];
            filterData = new string[reportFilter.FilterItems.Count()];

            int arrayItem = 0;
            foreach (ReportFilterItem filterItem in orderedFilter)
            {
                switch (filterItem.Data)
                {
                    case "Selected_Studies":
                        dataToSend = studyService.GetSelectedStudyIdsForUser(userId);
                        break;
                    case "Current_Studies":
                        dataToSend = studyService.GetCurrentStudiesForUser(userId);
                        if (filterType.Contains("Single"))
                            dataToSend = dataToSend.Split(",")[0];
                        break;
                    case "User_Email":
                        dataToSend = httpContextAccessor.HttpContext?.User?.FindFirst("preferred_username")?.Value;
                        break;
                }
                filterTable[arrayItem] = filterItem.TableName;
                filterColumn[arrayItem] = filterItem.FieldName;
                filterDisplayName[arrayItem] = filterItem.DisplayName;
                filterType[arrayItem] = filterItem.DisplayType;
                filterData[arrayItem] = dataToSend;
                arrayItem++;
            }

        }
        else
        {
            filterTable = null;
            filterColumn= null;
            filterDisplayName  = null;
            filterType = null;
            filterData = null;
        }

        if (string.IsNullOrEmpty(userEmail))
            throw new ArgumentNullException("Email address not found");


        EmbedParams embedParams;
        if (powerBiConfig.Value.UseRowLevelSecurity)
        {
            embedParams = pbiEmbedService.GetEmbedParams(new Guid(powerBiConfig.Value.WorkspaceId), new Guid(Report.PowerBIReportId), userEmail, powerBiConfig.Value.IdentityRoles);
        }
        else
        {
            embedParams = pbiEmbedService.GetEmbedParams(new Guid(powerBiConfig.Value.WorkspaceId), new Guid(Report.PowerBIReportId));
        }

        var embedUrl = embedParams.EmbedReport[0].EmbedUrl + "&pageName=" + Report.PowerBIPageName;

        reportRef = await pbiEmbedModule.InvokeAsync<IJSObjectReference>(
            "embedFullReport",
            pbiElement,
            embedParams.EmbedToken.Token,
            embedUrl,
            embedParams.EmbedReport[0].ReportId.ToString(),
            filterTable,
            filterColumn,
            filterDisplayName,
            filterType,
            filterData
        );
    }

    private async Task LocalChangUpdateFilterValueAsync(string[] paramArray)
    {
        int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);

        string selectOperator = paramArray[0];
        string value = paramArray[1];

        string curStudies = studyService.GetCurrentStudiesForUser(userId);
        string selStudies = "";
        var selectedStudies = studyService.GetSelectedStudiesForUser(userId);

        // Options are All, In and NotIn
        //      All - get list from THOR_USER.SELECTED_PROTOCOLS and save as current studies
        //      In - use values returned directly from Power BI
        //      NotIn - Power BI returns the values NOT selected.  Take the list from THOR_USER.SELECTED PROTOCOLS and remove what is returned from Power BI.

        if (selectOperator == "All")
        {
            // Get the list the user has selected from the My studies page
            foreach (Protocol prot in selectedStudies)
            {
                selStudies = selStudies + prot.StudyId + ",";
            }
            selStudies = selStudies.Trim(',');
            value = selStudies;
        }
        else if (selectOperator == "NotIn")
        {
            // Loop though THOR_USER.SELECTED_PROTOCOLS.  If not in the values returned by Power BI, add to selStudies
            string[] studies = value.Split(',');
            foreach (Protocol prot in selectedStudies)
            {
                string foundValue = studies.FirstOrDefault(s=>s == prot.StudyId);
                if (foundValue == null)
                    selStudies = selStudies + prot.StudyId + ",";
            }
            selStudies = selStudies.Trim(',');
            value = selStudies;
        }
        else if (String.IsNullOrEmpty(value))
        {
            value = selectedStudies[0].StudyId;
        }

        bool saved = userService.SaveCurrentStudy(userId, value);

        if (curStudies != value && !(curStudies == null && value == ""))
            saved = userService.SaveActivityLog(userId, ThorActivityType.Study, "Select Study", value);
    }

    [JSInvokable]
    public static async Task SaveStudyFromSlicer(string study, string selectOperator)
    {
        string[] paramArray = new string[2];
        paramArray[0] = selectOperator;
        paramArray[1] = study;
        await UpdateFilterActionAsync.Invoke(paramArray);
    }
}