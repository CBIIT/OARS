@using System.Security.Claims;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using OARS.Data.Static;
@using OARS.Data.Identity
@inject IHttpContextAccessor httpContextAccessor

@code {
    [Parameter] public List<string> AllowedRoles { get; set; } = null;
    [Inject] private NavigationManager navigation { get; set; } = null!;

    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }
    protected override async Task OnInitializedAsync()
    {
        // Check if user has any roles in the AllowedRoles array
        if (httpContextAccessor?.HttpContext?.User == null)
        {
            navigation.NavigateTo("/");
            return;
        }

        bool hasPermissions = httpContextAccessor.HttpContext.User.HasAnyTHORRole(AllowedRoles.ToArray());

        if (!hasPermissions)
            navigation.NavigateTo("/");

        await base.OnInitializedAsync();
    }
}
