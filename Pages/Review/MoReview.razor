@using Amazon;
@using Amazon.Auth;
@using Amazon.SimpleEmail;
@using Amazon.SimpleEmail.Model;
@using Amazon.S3;
@using Amazon.S3.Transfer;
@using System.Text.RegularExpressions;
@using System.Web;
@using TheradexPortal.Data;
@using TheradexPortal.Data.Identity;
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Models.DTO;
@using TheradexPortal.Data.Services;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inherits LayoutComponentBase
@inject IConfiguration configuration
@inject IHttpContextAccessor httpContextAccessor
@inject ProtectedSessionStorage SessionData
@inject IJSRuntime JSRuntime

@page "/moreview/{agentid:string?}"

<script>
    function closeTab(){
    window.close();
    }
</script>

<html>
<head>
    <title>MO Review Dashboard</title>
</head>
<body>
    @if (!String.IsNullOrEmpty(AgentId) && AgentId != "0" && authorizedUsers.Contains(activeUserId))
    {
        <Row>
            <Column Style="background-image: Review-Bar.png" ColumnSize="ColumnSize.Is12">
                <Div Background="Background.Primary" TextColor="TextColor.Light" Class="px-2 py-1">
                    <Div Style="display: inline-grid; grid-template-columns: 1fr 1fr 1fr; width: 100%">
                        <Div Style="display: inline-block;"> </Div>
                        <Div Style="display: inline-block; text-align: center;"> 
                            <h4>Perform MO Review #@reviewName </h4>
                        </Div>
                        <Div Style="display: inline-block; text-align: right;">
                            <h4> MO Name: @userFirstName @userLastName </h4>
                        </Div>
                    </Div>

                    <Div Flex="Flex.JustifyContent.Between">
                        <Div>
                            <b>Status:</b> @GetReviewStatus()
                        </Div>
                        <Div style="text-align: center;"> 
                            <b>Due Date:</b> @DueDate 
                        </Div>
                        @if (daysRemaining >= 0) 
                        { 
                            <Div><b>Days Remaining:</b> @daysRemaining</Div> 
                        } 
                        else 
                        { 
                            <Div><b>Days Overdue:</b> @(daysRemaining * -1)</Div> 
                        }
                    </Div>        
                </Div>
            </Column>
        </Row>
        <Row>
            <Div Flex="Flex.JustifyContent.Center" Class="pt-2">
                <Div> 
                    @leadAgentName : @AgentId : @studyDescription
                </Div>
            </Div>
        </Row>
        <Row>
            <Div Flex="Flex.JustifyContent.Center" Class="pt-3">
                <Div Class="rounded p-2 border border-primary">
                    Please go through each item in the checklist below, complete the necessary actions as instructed, and check the box next to each item. The 'Provide Review Sign Off' button will remain disabled until all items are checked off.
                </Div>
            </Div>
        </Row>
        <Row HorizontalGutter="32" VerticalGutter="16">
            <br/>
            <Div></Div>
            <Column ColumnSize="ColumnSize.Is4">
                @foreach (var item in lstManagers)
                {
                    <Check CheckedChanged="@((bool value) => checkboxChanged(item.BoxName, value))" TValue="bool" Checked="@item.IsChecked">
                        @($"{item.BoxName}")
                    </Check>
                }
            </Column>
            <Column ColumnSize="ColumnSize.Is8">
                <Row>
                    <Div Class="pr-2">
                        <MemoEdit Rows="10" @bind-Text="@noteText" Placeholder="Enter new notes..." />
                    </Div>
                </Row>
            </Column>
        </Row>
        <Row Class="pt-2">
            <Column>
                <Button Color="Color.Primary" Clicked="@SaveChanges">Save Changes</Button>
                <Button Color="Color.Primary" Clicked="@DiscardChanges">Discard Changes</Button>
                <Button Color="Color.Primary" Clicked="@ShowContactUsModal">Send Email</Button>
                <Button Color="Color.Primary" Clicked="@ShowChangeDurationModal">Adjust Review Duration</Button>
            </Column>
            <Column Flex="Flex.JustifyContent.End">
                <Button Color="Color.Primary" Disabled="@submitIsDisabled" Clicked="@ShowSubmitReviewModal" Style="text-align: right;">Provide Review Sign Off</Button>
            </Column>
        </Row>
        <Row>
            <Div><br /></Div>
            <Div><br /></Div>
            <Div><br /></Div>
        </Row>
        <Row>
            <Column>
                <Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
                    <Items>
                        <Tab Name="notehistory">Note History</Tab>
                        <Tab Name="emailhistory">Email History</Tab>
                        <Tab Name="moAuditTrail">MO Audit Trail #@reviewName</Tab>
                        @foreach (var pi in lstPiDetails)
                        {
                            var piLastName = pi.PiName.Substring(pi.PiName.IndexOf(' ') + 1);
                            string tabName = $"piDetails{piLastName}";
                            <Tab Name="@tabName">PI:  @piLastName - Audit #@pi.periodName</Tab>
                        }
                    </Items>
                    <Content>
                        <TabPanel Name="notehistory">
                            <DataGrid Class="admindatagrid"
                            @ref="noteDataGrid"
                            TItem="TextNotes"
                            Data="@lstTextNotes"
                            AltBordered="true"
                            Responsive
                            Filterable
                            Striped
                            ShowPager
                            ShowPageSizes
                            MaxPaginationLinks="5"
                            PagerPosition="DataGridPagerPosition.Bottom"
                            PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
                            FixedHeader
                            FixedHeaderDataGridHeight="calc(100vh - 240px)"
                            FixedHeaderDataGridMaxHeight="calc(100vh - 240px)">
                                <DataGridCommandColumn />
                                <DataGridColumn TItem="TextNotes" Field="@nameof(TextNotes.Name)" Caption="User" />
                                <DataGridColumn TItem="TextNotes" Field="@nameof(TextNotes.CreationDate)" Caption="Creation Date" />
                                <DataGridColumn TItem="TextNotes" Field="@nameof(TextNotes.Note)" Caption="Note Text" />
                            </DataGrid>
                        </TabPanel>
                        <TabPanel Name="emailhistory">
                            <DataGrid TItem="EmailDetails"
                            @ref="emailDataGrid"
                            Class="admindatagrid"
                            Data="@lstEmailDetails"
                            Bordered="true"
                            AltBordered="true"
                            Responsive
                            Filterable
                            Striped
                            ShowPager
                            ShowPageSizes
                            MaxPaginationLinks="5"
                            PagerPosition="DataGridPagerPosition.Bottom"
                            PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
                            FixedHeader
                            FixedHeaderDataGridHeight="calc(100vh - 240px)"
                            FixedHeaderDataGridMaxHeight="calc(100vh - 240px)">
                                <DataGridCommandColumn />
                                <DataGridColumn TItem="EmailDetails" Field="@nameof(EmailDetails.EmailTo)" Caption="Recipient" />
                                <DataGridColumn TItem="EmailDetails" Field="@nameof(EmailDetails.Body)" Caption="Email Body" />
                                <DataGridColumn TItem="EmailDetails" Field="@nameof(EmailDetails.CreationDate)" Caption="Email Sent Date" />
                            </DataGrid>
                        </TabPanel>
                        <TabPanel Name="moAuditTrail">
                            <DataGrid @ref="moAuditDataGrid"
                            TItem="AuditTrailDTO"
                            Class="admindatagrid"
                            Data="@lstMoAudits"
                            Bordered="true"
                            AltBordered="true"
                            Responsive
                            Filterable
                            Striped
                            ShowPager
                            ShowPageSizes
                            MaxPaginationLinks="5"
                            PagerPosition="DataGridPagerPosition.Bottom"
                            PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
                            FixedHeader
                            FixedHeaderDataGridHeight="calc(100vh - 240px)"
                            FixedHeaderDataGridMaxHeight="calc(100vh - 240px)">
                                <DataGridCommandColumn />
                                <DataGridColumn TItem="AuditTrailDTO" Caption="User">
                                    <DisplayTemplate>
                                        <Div Style="white-space: nowrap;">
                                            @context.userName
                                        </Div>
                                    </DisplayTemplate>
                                </DataGridColumn>
                                <DataGridColumn TItem="AuditTrailDTO" Field="@nameof(AuditTrailDTO.userEmail)" Caption="User Email" />
                                <DataGridColumn TItem="AuditTrailDTO" Caption="Date Of Change">
                                    <DisplayTemplate>
                                        <Div Style="white-space: nowrap;">
                                            @context.dateOfChange
                                        </Div>
                                    </DisplayTemplate>
                                </DataGridColumn>
                                <DataGridColumn TItem="AuditTrailDTO" Field="@nameof(AuditTrailDTO.typeOfChange)" Caption="Type Of Change" />
                                <DataGridColumn TItem="AuditTrailDTO" Field="@nameof(AuditTrailDTO.changeField)" Caption="Changed Field" />
                                <DataGridColumn TItem="AuditTrailDTO" Caption="Previous Value">
                                    <DisplayTemplate>
                                        <Div Style="white-space: pre-wrap;">
                                            @context.previousValue
                                        </Div>
                                    </DisplayTemplate>
                                </DataGridColumn>
                                <DataGridColumn TItem="AuditTrailDTO" Caption="New Value" >
                                    <DisplayTemplate>
                                        <Div Style="display: -webkit-box; -webkit-line-clamp: 5; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis; word-wrap: break-word; white-space: pre-wrap;">
                                            @context.newValue
                                        </Div>
                                    </DisplayTemplate>
                                </DataGridColumn>
                            </DataGrid>
                        </TabPanel>
                        @foreach (var pi in lstPiDetails)
                        {
                            var piLastName = pi.PiName.Substring(pi.PiName.IndexOf(' ') + 1);
                            string tabName = $"piDetails{piLastName}";
                            <TabPanel Name="@tabName">
                                <DataGrid TItem="AuditTrailDTO"
                                Class="admindatagrid"
                                Data="@pi.lstPiAuditTrail"
                                Bordered="true"
                                AltBordered="true"
                                Responsive
                                Filterable
                                Striped
                                ShowPager
                                ShowPageSizes
                                MaxPaginationLinks="5"
                                PagerPosition="DataGridPagerPosition.Bottom"
                                PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
                                FixedHeader
                                FixedHeaderDataGridHeight="calc(100vh - 240px)"
                                FixedHeaderDataGridMaxHeight="calc(100vh - 240px)">
                                    <DataGridCommandColumn />
                                    @if(pi != null)
                                    {
                                        <DataGridColumn TItem="AuditTrailDTO" Caption="User">
                                            <DisplayTemplate>
                                                <Div Style="white-space: nowrap;">
                                                    @context.userName
                                                </Div>
                                            </DisplayTemplate>
                                        </DataGridColumn>
                                        <DataGridColumn TItem="AuditTrailDTO" Field="@nameof(AuditTrailDTO.userEmail)" Caption="User Email" />
                                        <DataGridColumn TItem="AuditTrailDTO" Caption="Date Of Change">
                                            <DisplayTemplate>
                                                <Div Style="white-space: nowrap;">
                                                    @context.dateOfChange
                                                </Div>
                                            </DisplayTemplate>
                                        </DataGridColumn>
                                        <DataGridColumn TItem="AuditTrailDTO" Field="@nameof(AuditTrailDTO.typeOfChange)" Caption="Type Of Change" />
                                        <DataGridColumn TItem="AuditTrailDTO" Field="@nameof(AuditTrailDTO.changeField)" Caption="Changed Field" />
                                        <DataGridColumn TItem="AuditTrailDTO" Caption="Previous Value">
                                            <DisplayTemplate>
                                                <Div Style="white-space: pre-wrap;">
                                                    @context.previousValue
                                                </Div>
                                            </DisplayTemplate>
                                        </DataGridColumn>
                                        <DataGridColumn TItem="AuditTrailDTO" Caption="New Value" >
                                            <DisplayTemplate>
                                                <Div Style="display: -webkit-box; -webkit-line-clamp: 5; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis; word-wrap: break-word; white-space: pre-wrap;">
                                                    @context.newValue
                                                </Div>
                                            </DisplayTemplate>
                                        </DataGridColumn>
                                    }
                                    else
                                    {
                                        <p>No data captured yet.</p>
                                    }
                                </DataGrid>
                            </TabPanel>
                        }
                    </Content>
                </Tabs>
            </Column>
        </Row>
    }
    else
    {
        <Row>
            <Column ColumnSize="ColumnSize.Is12">
                <Div Background="Background.Primary" TextColor="TextColor.Light" style="display: flex; justify-content: center; align-items: center; width: 100%; text-align: center; flex-direction: column;">
                    <span><h3>You are not authorized to view this review. </h3></span>
                    <span><h4>If you feel you have reached this page in error, please contact tech support. </h4/></span>
                </Div>
            </Column>
        </Row>
    }
    <Modal @ref="modalSubmitEmail" Closing="@OnModalClosing" Opened="@OnModalOpen">
        <ModalContent Centered Size="ModalSize.Large">
            <ModalHeader Background="Background.Primary" TextColor="TextColor.Light">
                <ModalTitle>Email</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="validations" Mode="ValidationMode.Auto" ValidateOnLoad="false">
                    <Validation Validator="@ValidationRule.IsEmail">
                        <Field>
                            <FieldLabel ColumnSize="ColumnSize.Is4" TextWeight="TextWeight.Bold">To</FieldLabel>
                            <TextEdit Placeholder="Enter recipient" @bind-Text="@emailTo">
                                <Feedback>
                                    <ValidationError>Invalid Email</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation Validator="@ValidationRule.IsNotEmpty">
                        <Field>
                            <FieldLabel ColumnSize="ColumnSize.Is4" TextWeight="TextWeight.Bold">Subject</FieldLabel>
                            <TextEdit Placeholder="Enter subject" @bind-Text="@emailTitle">
                                <Feedback>
                                    <ValidationError>Subject can't be empty</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation Validator="@ValidationRule.IsNotEmpty">
                        <Field>
                            <FieldLabel ColumnSize="ColumnSize.Is4" TextWeight="TextWeight.Bold">Description</FieldLabel>
                            <FieldBody>
                                <MemoEdit @bind-Text="@emailDescription" MaxLength="4000" Rows="3" Placeholder="Email body"
                                onkeydown="@OnDescriptionChanged">
                                    <Feedback>
                                        <ValidationError>Email body can't be empty</ValidationError>
                                    </Feedback>
                                </MemoEdit>
                                <FieldLabel ColumnSize="ColumnSize.Is5">@emailDescriptionLabel</FieldLabel>
                            </FieldBody>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Primary" Clicked="@HideContactUsModal">Cancel</Button>
                <Button Color="Color.Primary" Disabled="!emailFormIsValid" Clicked="@SendContactUsEmail">Send Email</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

    <Modal @ref="modalChangeDuration" Closing="@OnModalClosing" Opened="@OnModalOpen">
        <ModalContent Centered Size="ModalSize.Large">
            <ModalHeader Background="Background.Primary" TextColor="TextColor.Light">
                <ModalTitle>Change Review Durations</ModalTitle>
                <CloseButton Clicked="@OnDurationModalClosed" />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel ColumnSize="ColumnSize.Is4" TextWeight="TextWeight.Bold" Style="margin-bottom:25px;">PI Review Duration</FieldLabel>
                    <Div Style="position:relative;width:100%">
                        <Slider @bind-Value="@pi_duration" Step="30" Max="120" Min="30"  />
                        <Div Style="position: absolute;top:-25px;width:100%;display:flex;justify-content:space-between;">
                            <Span Style="position:absolute;left:0%;bottom:-25px;font-size:12px;">30</Span>
                            <Span Style="position:absolute;left:33%;bottom:-25px;font-size:12px;">60</Span>
                            <Span Style="position:absolute;left:65%;bottom:-25px;font-size:12px;">90</Span>
                            <Span Style="position:absolute;left:98%;bottom:-25px;font-size:12px;">120</Span>
                        </Div>
                    </Div>
                </Field>
                <Field>
                    <FieldLabel ColumnSize="ColumnSize.Is4" TextWeight="TextWeight.Bold" Style="margin-bottom:25px;">MO Review Duration</FieldLabel>
                    <Div Style="position:relative;width:100%">
                        <Slider @bind-Value="@mo_duration" Step="30" Max="120" Min="30"  />
                        <Div Style="position: absolute;top:-25px;width:100%;display:flex;justify-content:space-between;">
                            <Span Style="position:absolute;left:0%;bottom:-25px;font-size:12px;">30</Span>
                            <Span Style="position:absolute;left:33%;bottom:-25px;font-size:12px;">60</Span>
                            <Span Style="position:absolute;left:65%;bottom:-25px;font-size:12px;">90</Span>
                            <Span Style="position:absolute;left:98%;bottom:-25px;font-size:12px;">120</Span>
                        </Div>
                    </Div>

                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Primary" Clicked="@HideChangeDurationModal">Cancel</Button>
                <Button Color="Color.Primary" Clicked="@ShowConfirmChangeDurationModal">Update Review Durations</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

    <Modal @ref="modalConfirmChangeDuration" Closing="@OnModalClosing">
        <ModalContent Centered Size="ModalSize.Large">
            <ModalHeader Background="Background.Primary" TextColor="TextColor.Light">
                <ModalTitle>Confirm Review Duration Change</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                @if ((mo_duration != original_mo_duration) || (pi_duration != original_pi_duration))
                {
                    <p>Please Confirm changes:</p>
                    @if(mo_duration != original_mo_duration)
                    {
                        <p>Changing MO review duration from @original_mo_duration.ToString() days to @mo_duration.ToString() days.</p>
                    }
                    @if(pi_duration != original_pi_duration)
                    {
                        <p>Changing PI review duration from @original_pi_duration.ToString() days to @pi_duration.ToString() days.</p>
                    }
                }
                else
                {
                    <p> No changes have been made.</p>
                }
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Primary" Clicked="@HideConfirmChangeDurationModal">Cancel</Button>
                <Button Color="Color.Primary"  Disabled="!durationChanged" Clicked="@UpdateReviewDurations">Update Review Durations</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

    <Modal @ref="modalSubmitReview" Closing="@OnModalClosing">
        <ModalContent Centered Size="ModalSize.Large">
            <ModalHeader Background="Background.Primary" TextColor="TextColor.Light">
                <ModalTitle>Submit review for @AgentId - #@reviewName</ModalTitle>
                <CloseButton Clicked="@OnModalClosed" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="submitValidations" Mode="ValidationMode.Manual">
                    <Field>
                        <FieldLabel ColumnSize="ColumnSize.Is4" TextWeight="TextWeight.Bold">Completed Review Tasks:</FieldLabel>
                        @foreach (var item in lstReviewItems)
                        {
                            <Check Checked="true" Disabled="true" TValue="bool">
                                @($"{item.ReviewItemName}")
                            </Check>
                        }
                    </Field>
                    <Field>
                        <FieldBody>
                            <Div Class="rounded p-4 border border-primary">
                                <Check @bind-Checked="eSig">I attest that I have completed all the above Review Tasks.</Check>
                            </Div>
                        </FieldBody>
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Primary" Clicked="@HideSubmitReviewModal">Cancel</Button>
                <Button Color="Color.Primary" Disabled="@(!eSig)" Clicked="@CompleteReview">Submit Review</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

    @code {
        private bool isSelected { get; set; }
        private string? noteText { get; set; }
        private string? savedNoteText { get; set; }
        private bool submitIsDisabled = false;
        private bool emailFormIsValid => emailTo != null && emailTo.Contains('@') && emailTo.Contains('.');
        private bool durationChanged => mo_duration != original_mo_duration || pi_duration != original_pi_duration;
        private DataGrid<TextNotes> noteDataGrid;
        private DataGrid<EmailDetails> emailDataGrid;
        private DataGrid<AuditTrailDTO> moAuditDataGrid;
        private DataGrid<AuditTrailDTO> piDataGrid;
        private string userFullName = "No Name Found";
        private string userFirstName = "Error";
        private string userLastName = "No Name";
        private string reviewName = "No Name";
        private string studyDescription = "No description found";
        private int original_pi_duration, pi_duration;
        private int original_mo_duration, mo_duration;

        public class TextNotes
        {
            public string Name { get; set; }
            public string Note { get; set; }
            public string CreationDate { get; set; }
        }

        public class EmailDetails
        {
            public string Body { get; set; }
            public string EmailTo { get; set; }
            public string CreationDate { get; set; }
        }

        public class PIDetails
        {
            public string PIName { get; set; }
            public string caseNumber { get; set; }
            public DateTime UpdateDate { get; set; }
            public string CurrentStatus { get; set; }
        }

        public class CheckBoxManager
        {
            public string BoxName { get; set; }
            public int ReviewItemNumber { get; set; }
            public bool IsChecked { get; set; }
        }

        private List<TextNotes> lstTextNotes = new List<TextNotes>();
        private List<EmailDetails> lstEmailDetails = new List<EmailDetails>();
        private List<CheckBoxManager> lstManagers = new List<CheckBoxManager>();
        private List<ReviewPiDTO> lstPiDetails = new List<ReviewPiDTO>();
        private List<AuditTrailDTO> lstMoAudits = new List<AuditTrailDTO>();

        [Parameter]
        public string AgentId { get; set; } = String.Empty;
        public bool changesSaved = true;
        string selectedTab = "notehistory";

        public void checkboxChanged(string checkboxName, bool value)
        {
            bool allCheckd = true;
            foreach (var item in lstManagers)
            {
                if (checkboxName == item.BoxName)
                    item.IsChecked = value;
                if (item.IsChecked == false)
                    allCheckd = false;
            }
            if (allCheckd)
                submitIsDisabled = false;
            else
                submitIsDisabled = true;
        }

        public void OnDescriptionChanged(KeyboardEventArgs e)
        {
            if (emailDescription.Trim().Length == 0)
            {
                emailDescriptionLabel = "Max 4000 characters.";
            }
            else
            {
                emailDescriptionLabel = "Max 4000 characters. Currently " + emailDescription.Trim().Length + " characters";
            }
        }

        private Task OnSelectedTabChanged(string name)
        {
            selectedTab = name;

            return Task.CompletedTask;
        }

        private async Task CloseTab()
        {
            await JSRuntime.InvokeVoidAsync("closeTab");
        }

        private async Task DiscardChanges()
        {
            string navTo = "/";
            var result = await SessionData.GetAsync<string>("dashboardUrl");
            await CloseTab();
            if (result.Success)
            {
                navTo = result.Value ?? "/";
            }
            Navigation.NavigateTo(navTo, true);
        }

        private async void SaveChanges()
        {
            if (!String.IsNullOrEmpty(AgentId) && AgentId != "0")
            {
                bool itemUpdateNeeded = false;
                bool itemWasUpdated = false;
                bool noteAdded = false;
                foreach (var box in lstManagers)
                {
                    // if the box's Number doesn't exist, in the dictionary, then we need to add a new record to the table
                    if (!dctReviewItemSettings.TryGetValue(box.ReviewItemNumber, out checkedStatus))
                    {
                        reviewHistoryItemService.SaveReviewHistoryItemAsync(activeUserId, latestReviewHistory.ReviewHistoryId, box.ReviewItemNumber, box.IsChecked);
                        itemUpdateNeeded = true;
                        itemWasUpdated = true;
                    }
                    else if (box.IsChecked != checkedStatus)
                    {
                        await reviewHistoryItemService.UpdateReviewHistoryItemAsync(activeUserId, latestReviewHistory.ReviewHistoryId, box.ReviewItemNumber, box.IsChecked);
                        dctReviewItemSettings[box.ReviewItemNumber] = box.IsChecked;
                        itemWasUpdated = true;
                    }
                }
                if (itemUpdateNeeded)
                {
                    dctReviewItemSettings = await reviewHistoryItemService.GetCurrentReviewHistoryItemStatusAsync(latestReviewHistory.ReviewHistoryId);
                }

                if (changesSaved == true && !string.IsNullOrWhiteSpace(noteText))
                {
                    var newNote = new ReviewHistoryNote();
                    newNote.NoteText = noteText;
                    newNote.CreateDate = DateTime.Now;
                    newNote.ReviewHistoryId = latestReviewHistory.ReviewHistoryId;
                    newNote.ReviewHistoryNoteId = historyNoteService.GetNextReviewHistoryNoteId();
                    noteAdded = await historyNoteService.SaveNoteAsync(activeUserId, newNote);
                    var user = await userService.GetUserAsync(latestReviewHistory.UserId);
                    var userName = user.FirstName + " " + user.LastName;
                    if (noteAdded)
                    {
                        lstTextNotes.Add(new TextNotes { Name = userName, Note = noteText, CreationDate = newNote.CreateDate.Value.ToString("dd-MMM-yyyy hh:mm:ss tt").ToUpper() });
                    }
                    noteText = "";
                    await noteDataGrid.Reload();
                }

                if (itemWasUpdated || noteAdded)
                {
                    lstMoAudits = await GenerateAuditTrail(activeUserId, lstMoAudits, "MO");
                    await notificationService.Success("Changes have been saved.");
                }
            }
            else
            {
                await notificationService.Error("UI Demo mode. No changes to save.");
            }
        }

        private async void UpdateReviewDurations()
        {
            if ((pi_duration != original_pi_duration) || (mo_duration != original_mo_duration))
            {
                await reviewService.SetReviewDurationsAsync(activeUserId, AgentId, mo_duration, pi_duration);
                original_mo_duration = mo_duration;
                original_pi_duration = pi_duration;
                await notificationService.Success("Durations have been Updated.");
            }
            else
            {
                await notificationService.Error("No duration changes to save.");
            }
            modalConfirmChangeDuration.Hide();
            modalChangeDuration.Hide();
        }

        private Task ShowConfirmChangeDurationModal()
        {
            return modalConfirmChangeDuration.Show();
        }

        Task OnSendEmailClicked()
        {

            return Task.CompletedTask;
        }

        Validations validations;
        Validations submitValidations;
        private string DueDate;
        private int daysRemaining;
        private int iconHeight = 30;
        private int systemAlertsCount;
        private int systemNotesCount;
        private bool systemAlertsDropdownVisible = false;
        private bool systemNotesDropdownVisible = false;
        private string systemAlertsTooltip = string.Empty;
        private string systemNotesTooltip = string.Empty;
        private string leadAgentName = "Demo Page";
        private readonly string noSystemAlertsMessage = "No current System Alerts";
        private readonly string noSystemNotesMessage = "No current System Notes";
        private readonly string currentSystemAlertsMessage = "System Alerts: ";
        private readonly string currentSystemNotesMessage = "System Notes: ";
        private readonly string dismissed = "dismissed";
        private readonly string visible = "visible";
        private int activeUserId;
        public string DashboardName { get; set; }
        public string ReportName { get; set; }
        private bool eSig = false;

        IFluentDisplay adminDisplay = Display.None;

        [Inject] IContactUsService contactUsCategoryService { get; set; } = null!;
        [Inject] IErrorLogService errorLogService { get; set; } = null!;
        [Inject] IReviewItemService reviewItemService { get; set; } = null!;
        [Inject] IReviewHistoryService reviewHistoryService { get; set; } = null!;
        [Inject] IReviewHistoryNoteService historyNoteService { get; set; } = null!;
        [Inject] IReviewHistoryEmailService historyEmailService { get; set; } = null!;
        [Inject] IReviewHistoryItemService reviewHistoryItemService { get; set; } = null!;
        [Inject] public NavigationManager Navigation { get; set; }
        [Inject] private IUserService userService { get; set; } = null!;
        [Inject] private IAlertService alertService { get; set; } = null!;
        [Inject] private IStudyService studyService { get; set; } = null!;
        [Inject] INotificationService notificationService { get; set; }
        [Inject] IEmailService emailService { get; set; } = null!;
        [Inject] IReviewService reviewService { get; set; } = null!;
        [Inject] IAuditService auditService { get; set; } = null!;

        private Modal modalSubmitEmail;
        private Modal modalSubmitReview;
        private Modal modalChangeDuration;
        private Modal modalConfirmChangeDuration;
        private bool cancelClose;

        private string contactUsCategoryID = "", emailTo = "", emailCategory = "", emailDescription = "", emailTitle = "", emailDescriptionLabel = "";
        private List<ContactUsCategory> lstContactUsCategory;
        private List<ContactUsCategorySelectItemList> lstContactUsItems;
        private IList<ReviewItem> lstReviewItems;
        private IList<int> lstReviewHistories;
        private ReviewHistory latestReviewHistory;
        private List<string> reviewNote = new List<string> { "No previous notes." };
        private List<string> reviewEmail = new List<string> { "No previous emails." };
        FileEdit fileEditRef;
        private IList<int> authorizedUsers;
        private int reviewHistoryId;
        string uploadFileName = "";
        List<string> lstAttachments = new List<string>();
        Dictionary<int, bool> dctReviewItemSettings = new Dictionary<int, bool>();
        private Review currentReview;
        IFileEntry selectedFile;
        private bool checkedStatus;

        protected override async Task OnInitializedAsync()
        {
            activeUserId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);

            bool activeReviewCheck;
            if (!String.IsNullOrEmpty(AgentId) && AgentId != "0")
            {
                currentReview = await reviewService.GetCurrentReviewAsync(AgentId, activeUserId, "MO");

                latestReviewHistory = await reviewHistoryService.GetLatestReviewHistoryByProtocolAsync(AgentId, activeUserId, "MO");
                authorizedUsers = await reviewService.GetAllAuthorizedUsersAsync(AgentId);
                if (authorizedUsers.Contains(activeUserId))
                {
                    DueDate = ((DateTime)currentReview.NextDueDate).Date.ToString("dd-MMM-yyyy");
                    daysRemaining = (((DateTime)currentReview.NextDueDate) - DateTime.Now).Days;
                    if (latestReviewHistory == null)
                    {
                        reviewHistoryId = reviewHistoryService.GetNextReviewHistoryId();
                        activeReviewCheck = false;
                    }
                    else
                    {
                        reviewHistoryId = latestReviewHistory.ReviewHistoryId;
                        activeReviewCheck = await reviewHistoryService.isReviewActive(reviewHistoryId);
                    }

                    if (!activeReviewCheck)
                    {
                        await reviewHistoryService.StartNewReviewAsync(activeUserId, AgentId, "MO", reviewHistoryId);
                        latestReviewHistory = await reviewHistoryService.GetLatestReviewHistoryByProtocolAsync(AgentId, activeUserId, "MO");
                        lstReviewItems = await reviewItemService.GetReviewItemListAsync("MO", 'T');
                        foreach(var item in lstReviewItems)
                        {
                            reviewHistoryItemService.SaveReviewHistoryItemAsync(activeUserId, latestReviewHistory.ReviewHistoryId, item.ReviewItemId, false);
                        }
                    }
                    else
                    {
                        // If there IS an active review, grab the list of review items from the DB
                        lstReviewItems = await reviewHistoryItemService.GetReviewHistoryItemsAsync(reviewHistoryId);
                    }
                    (mo_duration, pi_duration)= await reviewService.GetReviewDurationsAsync(currentReview.ProtocolId);
                    original_mo_duration = mo_duration;
                    original_pi_duration = pi_duration;

                    var activeReview = await reviewHistoryService.isReviewActive(latestReviewHistory.ReviewHistoryId);
                    if (!activeReview)
                    {
                        reviewHistoryService.StartNewReviewAsync(activeUserId, AgentId, "MO", latestReviewHistory.ReviewHistoryId);
                        latestReviewHistory = await reviewHistoryService.GetLatestReviewHistoryByProtocolAsync(AgentId, activeUserId, "MO");
                    }
                    reviewName = latestReviewHistory.ReviewPeriodName ?? "";
                    lstPiDetails = await reviewService.GetPiInfoAsync(AgentId);
                    foreach(var pi in lstPiDetails)
                    {
                        pi.lstPiAuditTrail = await GenerateAuditTrail(pi.piIdNumber, pi.lstPiAuditTrail, "PI");
                    }
                    var user = await userService.GetUserAsync(latestReviewHistory.UserId);
                    if (user != null)
                    {
                        userFullName = user.FirstName + " " + user.LastName;
                        userFirstName = user.FirstName;
                        userLastName = user.LastName;
                    }
                    studyDescription = await studyService.GetStudyTitleAsync(AgentId);
                    dctReviewItemSettings = await reviewHistoryItemService.GetCurrentReviewHistoryItemStatusAsync(latestReviewHistory.ReviewHistoryId);
                    foreach (var item in lstReviewItems)
                    {
                        dctReviewItemSettings.TryGetValue(item.ReviewItemId, out checkedStatus);

                        lstManagers.Add(new CheckBoxManager { BoxName = item.ReviewItemName, ReviewItemNumber = item.ReviewItemId, IsChecked = checkedStatus });
                        if (checkedStatus == false)
                        {
                            submitIsDisabled = true;
                        }
                    }

                    if(daysRemaining >= 0)
                    {
                        // Not late yet, make sure current review is not late
                        if(currentReview.MissedReviewCount > 0)
                        {
                            await reviewService.SetMissedReviewCountAsync(activeUserId, AgentId, "MO", 0);
                            await reviewHistoryService.SetMissedReviewHistoryCountAsync(activeUserId, AgentId, "MO", 0);
                        }
                        // Also make sure reviewHistory is not late
                        if(latestReviewHistory.ReviewLate == 'T' || latestReviewHistory.DaysLate > 0)
                        {
                            await reviewHistoryService.SetReviewHistoryLateStatusAsync(activeUserId, AgentId, "MO", 0);
                        }
                    }
                    else
                    {
                        int daysLate = daysRemaining * -1;
                        // Review is late! Make sure we're reporting it correctly
                        if(daysLate > currentReview.ReviewPeriod )
                        {
                            int cyclesMissed = daysLate / currentReview.ReviewPeriod;
                            if (currentReview.MissedReviewCount != cyclesMissed)
                            {
                                await reviewService.SetMissedReviewCountAsync(activeUserId, AgentId, "MO", cyclesMissed);
                                await reviewHistoryService.SetMissedReviewHistoryCountAsync(activeUserId, AgentId, "MO", cyclesMissed);
                            }
                        }
                        // Also make sure reviewHistory is set late
                        if(latestReviewHistory.ReviewLate == 'F' || latestReviewHistory.DaysLate != daysLate)
                        {
                            await reviewHistoryService.SetReviewHistoryLateStatusAsync(activeUserId, AgentId, "MO", daysLate);
                        }
                    }

                    leadAgentName = await reviewService.GetLeadAgentByIdAsync(AgentId);
                    var tmpLst = await historyNoteService.GetNotesAsync(latestReviewHistory.ReviewHistoryId);
                    if (tmpLst != null)
                    {
                        if (reviewNote.Contains("No previous notes."))
                            reviewNote.Remove("No previous notes.");
                        foreach (var tmp in tmpLst)
                        {
                            lstTextNotes.Add(new TextNotes { Name = tmp.UserName, Note = tmp.Notes, CreationDate = tmp.CreationDate.HasValue ? tmp.CreationDate.Value.ToString("dd-MMM-yyyy hh:mm:ss tt").ToUpper() : "null" });
                        }
                        lstTextNotes.Sort((x, y) => y.CreationDate.CompareTo(x.CreationDate));
                    }
                    var tmpEmailList = await historyEmailService.GetEmailsAsync(latestReviewHistory.ReviewHistoryId);
                    if (tmpEmailList != null)
                    {
                        if (reviewEmail.Contains("No previous emails."))
                            reviewEmail.Remove("No previous emails.");
                        foreach (var email in tmpEmailList)
                        {
                            reviewEmail.Add(email.Body);
                            lstEmailDetails.Add(new EmailDetails { Body = email.Body, EmailTo = email.Recipient, CreationDate = email.CreationDate.HasValue ? email.CreationDate.Value.ToString("dd-MMM-yyyy hh:mm:ss tt").ToUpper() : "null" });
                        }
                    }
                    lstMoAudits = await GenerateAuditTrail(activeUserId, lstMoAudits, "MO");
                }
            }
        }

        private async Task<List<AuditTrailDTO>> GenerateAuditTrail(int piUserId, List<AuditTrailDTO> lstAudits, string userRole)
        {
            // We need to get Audit history for all MO's for the current ReviewID/Review Name for which this logged in user is looking
            // We can use the current user to get the Review#
            // We can use the Review# to get the AgentID & ReviewName ex: 10036, 001-2025-01
            // We can then query the DB for All review histories (list) for this set ^
            // Then loop through current auditService functionality for each reviewHistory. - done
            try
            {
                var piCurrentReview = await reviewService.GetCurrentReviewAsync(AgentId, piUserId, userRole);
                if (piCurrentReview != null)
                {
                    if (userRole == "PI")
                    {
                        var piLatestReviewHistory = await reviewHistoryService.GetLatestReviewHistoryByProtocolAsync(AgentId, piUserId, userRole);
                        if (piLatestReviewHistory != null)
                        {
                            lstAudits = await auditService.GetFullAuditTrailAsync(
                                    piUserId,
                                    piCurrentReview.ReviewId,
                                    piLatestReviewHistory.ReviewHistoryId,
                                    userRole,
                                    await reviewHistoryItemService.GetReviewHistoryItemIdsAsync(piLatestReviewHistory.ReviewHistoryId),
                                    await historyNoteService.GetReviewHistoryNoteIdsAsync(piLatestReviewHistory.ReviewHistoryId),
                                    await historyEmailService.GetReviewHistoryEmailIdsAsync(piLatestReviewHistory.ReviewHistoryId));
                            lstAudits.Sort((x, y) => y.dateOfChange.CompareTo(x.dateOfChange));
                        }
                    }
                    else
                    {
                        List<int> reviewHistoryIdsToCheck = await reviewHistoryService.GetAllReviewHistoryIdsByNameAsync(piCurrentReview.ReviewId, piCurrentReview.ReviewPeriodName);

                        if (reviewHistoryIdsToCheck.Count > 0)
                        {
                            foreach (var id in reviewHistoryIdsToCheck)
                            {
                                var tmp = await auditService.GetFullAuditTrailAsync(
                                        piUserId,
                                        piCurrentReview.ReviewId,
                                        id,
                                        userRole,
                                        await reviewHistoryItemService.GetReviewHistoryItemIdsAsync(id),
                                        await historyNoteService.GetReviewHistoryNoteIdsAsync(id),
                                        await historyEmailService.GetReviewHistoryEmailIdsAsync(id));
                                lstAudits = lstAudits.Concat(tmp).ToList();
                            }
                            lstAudits.Sort((x, y) => y.dateOfChange.CompareTo(x.dateOfChange));
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("console.error", "Error in Audit Trail: " + ex.Message);
            }

            return lstAudits;
        }

        private void OnModalClosed()
        {
            cancelClose = false;
            eSig = false;
        }

        private void OnDurationModalClosed()
        {
            pi_duration = original_pi_duration;
            mo_duration = original_mo_duration;
        }

        private Task OnModalClosing(ModalClosingEventArgs e)
        {
            e.Cancel = cancelClose
            || e.CloseReason != CloseReason.UserClosing;

            return Task.CompletedTask;
        }

        private Task OnModalOpen()
        {
            validations.ClearAll();
            return Task.CompletedTask;
        }

        private Task ShowContactUsModal()
        {
            emailTitle = $"Study {AgentId} - MO Review - {currentReview.ReviewPeriodName} - ";
            emailDescription = string.Empty;
            emailTo = string.Empty;

            return modalSubmitEmail.Show();
        }

        private Task ShowChangeDurationModal()
        {
            return modalChangeDuration.Show();
        }

        private Task ShowSubmitReviewModal()
        {
            return modalSubmitReview.Show();
        }

        private string GetReviewStatus()
        {
            return daysRemaining < 0 ? "Late" : "On Time";
        }

        private Task HideContactUsModal()
        {
            cancelClose = false;
            return modalSubmitEmail.Hide();
        }

        private Task HideChangeDurationModal()
        {
            cancelClose = false;
            pi_duration = original_pi_duration;
            mo_duration = original_mo_duration;
            return modalChangeDuration.Hide();
        }

        private Task HideConfirmChangeDurationModal()
        {
            return modalConfirmChangeDuration.Hide();
        }

        private Task HideSubmitReviewModal()
        {
            cancelClose = false;
            eSig = false;
            return modalSubmitReview.Hide();
        }

        private async void SendContactUsEmail()
        {
            if (await validations.ValidateAll())
            {
                bool sendEmailResult = await emailService.SendReviewEmail(userFullName, emailTo, emailTitle, emailDescription, configuration.GetValue<string>("System:SystemColor"));
                if (sendEmailResult)
                {
                    await notificationService.Success("An email has been sent.");
                    await historyEmailService.SaveNewEmailAsync(activeUserId, latestReviewHistory.ReviewHistoryId, emailTo, emailDescription);
                    lstEmailDetails.Insert(0, new EmailDetails { Body = emailDescription, EmailTo = emailTo, CreationDate = DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt").ToUpper() });
                    lstMoAudits = await GenerateAuditTrail(activeUserId, lstMoAudits, "MO");
                    await emailDataGrid.Reload();
                    await moAuditDataGrid.Reload();
                }
                else
                {
                    await notificationService.Error("Error sending the email.");
                }

                cancelClose = false;
                modalSubmitEmail.Hide();
            }
        }

        private async void CompleteReview()
        {
            eSig = false;
            // Add DB record for next review
            // We need the current date for complete and for updated
            SaveChanges();
            reviewHistoryService.CloseCurrentReviewAsync(activeUserId, latestReviewHistory.ReviewHistoryId);
            await notificationService.Success("Review Successfully Completed.");
            modalSubmitReview.Hide();
            string navTo = "/";
            var result = await SessionData.GetAsync<string>("dashboardUrl");
            if (result.Success)
            {
                navTo = result.Value ?? "/";
            }
            await CloseTab();
            Navigation.NavigateTo(navTo, true);
        }
}
</body>
</html>