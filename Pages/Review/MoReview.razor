@using Amazon;
@using Amazon.Auth;
@using Amazon.SimpleEmail;
@using Amazon.SimpleEmail.Model;
@using Amazon.S3;
@using Amazon.S3.Transfer;
@using System.Text.RegularExpressions;
@using System.Web;
@using TheradexPortal.Data;
@using TheradexPortal.Data.Identity;
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Models.DTO;
@using TheradexPortal.Data.Services;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inherits LayoutComponentBase
@inject IConfiguration configuration
@inject IHttpContextAccessor httpContextAccessor
@inject ProtectedSessionStorage SessionData


@page "/moreview/{agentid:int?}"

<html>
<head>
    <title>MO Review Dashboard</title>
</head>
<body>
    <Row>
        <Column Style="background-image: Review-Bar.png" ColumnSize="ColumnSize.Is12">
            <Div Background="Background.Primary" TextColor="TextColor.Light" style="display: flex; justify-content: center; align-items: center; width: 100%; text-align: center; flex-direction: column;">
                <span><h3>MO Review for Study @userFullName </h3></span>
                <span><h4> @leadAgentName : @AgentId : @studyDescription </h4></span>
                <span><h4>Status: @GetReviewStatus()</h4></span>
            </Div>
        </Column>
    </Row>
    <Row HorizontalGutter="32" VerticalGutter="16">
        <Column ColumnSize="ColumnSize.Is4">
            @foreach (var item in lstReviewItems)
            {
                <Check CheckedChanged="@((bool value) => checkboxChanged(item.ReviewItemName, value))" TValue="bool">
                    @($"{item.ReviewItemName}")
                </Check>
            }
        </Column>
        <Column ColumnSize="ColumnSize.Is8">
            <Row>
                <MemoEdit Rows="10" @bind-Text="@noteText" Placeholder="Enter new notes..." />
            </Row>
        </Column>
    </Row>
    <Row>
        <Column>
            <Button Color="Color.Primary" Clicked="@SaveChanges">Save Changes</Button>
            <Button Color="Color.Primary" Clicked="@DiscardChanges">Discard Changes</Button>
            <Button Color="Color.Primary" Clicked="@ShowContactUsModal">Send Email</Button>
        </Column>
    </Row>
    <Row>
        <Div><br /></Div>
        <Column>
            <Button Color="Color.Warning" Disabled="@submitIsDisabled">Submit</Button>
        </Column>
    </Row>
    <Row>
        <Div><br /></Div>
        <Div><br /></Div>
        <Div><br /></Div>
    </Row>
    <Row>
        <Column>
            <Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
                <Items>
                    <Tab Name="notehistory">Note History</Tab>
                    <Tab Name="emailhistory">Email History</Tab>
                    <Tab Name="piDetails">PI Details</Tab>
                </Items>
                <Content>
                    <TabPanel Name="notehistory">
                        <DataGrid Class="admindatagrid"
                        TItem="TextNotes"
                        Data="@lstTextNotes"
                        AltBordered="true"
                        Responsive
                        Filterable
                        Striped
                        ShowPager
                        ShowPageSizes
                        MaxPaginationLinks="5"
                        PagerPosition="DataGridPagerPosition.Bottom"
                        PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
                        FixedHeader
                        FixedHeaderDataGridHeight="calc(100vh - 240px)"
                        FixedHeaderDataGridMaxHeight="calc(100vh - 240px)">
                            <DataGridCommandColumn />
                            <DataGridColumn TItem="TextNotes" Field="@nameof(TextNotes.Name)" Caption="User" />
                            <DataGridColumn TItem="TextNotes" Field="@nameof(TextNotes.CreationDate)" Caption="Creation Date" />
                            <DataGridColumn TItem="TextNotes" Field="@nameof(TextNotes.Note)" Caption="Note Text" />
                        </DataGrid>
                    </TabPanel>
                    <TabPanel Name="emailhistory">
                        <DataGrid TItem="EmailDetails"
                        Class="admindatagrid"
                        Data="@lstEmailDetails"
                        Bordered="true"
                        AltBordered="true"
                        Responsive
                        Filterable
                        Striped
                        ShowPager
                        ShowPageSizes
                        MaxPaginationLinks="5"
                        PagerPosition="DataGridPagerPosition.Bottom"
                        PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
                        FixedHeader
                        FixedHeaderDataGridHeight="calc(100vh - 240px)"
                        FixedHeaderDataGridMaxHeight="calc(100vh - 240px)">
                            <DataGridCommandColumn />
                            <DataGridColumn TItem="EmailDetails" Field="@nameof(EmailDetails.EmailTo)" Caption="Recipient" />
                            <DataGridColumn TItem="EmailDetails" Field="@nameof(EmailDetails.Body)" Caption="Email Body" />
                            <DataGridColumn TItem="EmailDetails" Field="@nameof(EmailDetails.CreationDate)" Caption="Email Sent Date" />
                        </DataGrid>
                    </TabPanel>
                    <TabPanel Name="piDetails">
                        <DataGrid TItem="EmailDetails"
                        Class="admindatagrid"
                        Data="@lstEmailDetails"
                        Bordered="true"
                        AltBordered="true"
                        Responsive
                        Filterable
                        Striped
                        ShowPager
                        ShowPageSizes
                        MaxPaginationLinks="5"
                        PagerPosition="DataGridPagerPosition.Bottom"
                        PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
                        FixedHeader
                        FixedHeaderDataGridHeight="calc(100vh - 240px)"
                        FixedHeaderDataGridMaxHeight="calc(100vh - 240px)">
                            <DataGridCommandColumn />
                            <DataGridColumn TItem="EmailDetails" Field="@nameof(EmailDetails.EmailTo)" Caption="Recipient" />
                            <DataGridColumn TItem="EmailDetails" Field="@nameof(EmailDetails.Body)" Caption="Email Body" />
                            <DataGridColumn TItem="EmailDetails" Field="@nameof(EmailDetails.CreationDate)" Caption="Email Sent Date" />
                        </DataGrid>
                    </TabPanel>
                </Content>
            </Tabs>
        </Column>
    </Row>

    <Modal @ref="modalSubmitEmail" Closing="@OnModalClosing">
        <ModalContent Centered Size="ModalSize.Large">
            <ModalHeader Background="Background.Primary" TextColor="TextColor.Light">
                <ModalTitle>Email</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="validations" Mode="ValidationMode.Manual">
                    <Validation Validator="@ValidationRule.IsEmail">
                        <Field>
                            <FieldLabel ColumnSize="ColumnSize.Is4" TextWeight="TextWeight.Bold">To</FieldLabel>
                            <TextEdit Placeholder="Enter recipient" @bind-Text="@emailTo">
                                <Feedback>
                                    <ValidationError>Invalid Email</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation Validator="@ValidationRule.IsNotEmpty">
                        <Field>
                            <FieldLabel ColumnSize="ColumnSize.Is4" TextWeight="TextWeight.Bold">Subject</FieldLabel>
                            <TextEdit Placeholder="Enter subject" @bind-Text="@emailTitle">
                                <Feedback>
                                    <ValidationError>Subject can't be empty</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation Validator="@ValidationRule.IsNotEmpty">
                        <Field>
                            <FieldLabel ColumnSize="ColumnSize.Is4" TextWeight="TextWeight.Bold">Description</FieldLabel>
                            <FieldBody>
                                <MemoEdit @bind-Text="@emailDescription" MaxLength="250" Rows="3" Placeholder="Email body"
                                onkeydown="@OnDescriptionChanged">
                                    <Feedback>
                                        <ValidationError>Email body can't be empty</ValidationError>
                                    </Feedback>
                                </MemoEdit>
                                <FieldLabel ColumnSize="ColumnSize.Is5">@emailDescriptionLabel</FieldLabel>
                            </FieldBody>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Primary" Clicked="@HideContactUsModal">Cancel</Button>
                <Button Color="Color.Primary" Clicked="@SendContactUsEmail">Send Request</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
    @code {
        private bool isSelected { get; set; }
        private string? noteText { get; set; }
        private string? savedNoteText { get; set; }
        private bool submitIsDisabled = false;
        private DataGrid<TextNotes> noteDataGrid;
        private DataGrid<EmailDetails> emailDataGrid;
        private string userFullName = "No Name Found";
        private string userFirstName = "Error";
        private string userLastName = "No Name";
        private string studyDescription = "No description found";

        public class TextNotes
        {
            public string Name { get; set; }
            public string Note { get; set; }
            public string CreationDate { get; set; }
        }

        public class EmailDetails
        {
            public string Body { get; set; }
            public string EmailTo { get; set; }
            public string CreationDate { get; set; }
        }

        public class CheckBoxManager
        {
            public string BoxName { get; set; }
            public int ReviewItemNumber { get; set; }
            public bool IsChecked { get; set; }
        }

        private List<TextNotes> lstTextNotes = new List<TextNotes>();
        private List<EmailDetails> lstEmailDetails = new List<EmailDetails>();
        private List<CheckBoxManager> lstManagers = new List<CheckBoxManager>();

        [Parameter]
        public int AgentId { get; set; } = 0;
        public bool changesSaved = true;
        string selectedTab = "notehistory";

        public void checkboxChanged(string checkboxName, bool value)
        {
            bool allCheckd = true;
            foreach (var item in lstManagers)
            {
                if (checkboxName == item.BoxName)
                    item.IsChecked = value;
                if (item.IsChecked == false)
                    allCheckd = false;
            }
            if (allCheckd)
                submitIsDisabled = false;
            else
                submitIsDisabled = true;
        }

        public void OnDescriptionChanged(KeyboardEventArgs e)
        {
            if (emailDescription.Trim().Length == 0)
            {
                emailDescriptionLabel = "Max 250 characters.";
            }
            else
            {
                emailDescriptionLabel = "Max 250 characters. Currently " + emailDescription.Trim().Length + " characters";
            }
        }

        private Task OnSelectedTabChanged(string name)
        {
            selectedTab = name;

            return Task.CompletedTask;
        }

        private async Task DiscardChanges()
        {
            string navTo = "/";
            var result = await SessionData.GetAsync<string>("dashboardUrl");
            if (result.Success)
            {
                navTo = result.Value ?? "/";
            }
            Navigation.NavigateTo(navTo, true);
        }

        private async void SaveChanges()
        {
            if (AgentId > 0)
            {
                bool itemUpdateNeeded = false;
                foreach (var box in lstManagers)
                {
                    // if the box's Number doesn't exist, in the dictionary, then we need to add a new record to the table
                    if (!dctReviewItemSettings.TryGetValue(box.ReviewItemNumber, out checkedStatus))
                    {
                        reviewHistoryItemService.SaveReviewHistoryItemAsync(latestReviewHistory.ReviewHistoryId, box.ReviewItemNumber, box.IsChecked);
                        itemUpdateNeeded = true;
                    }
                    else if (box.IsChecked != checkedStatus)
                    {
                        await reviewHistoryItemService.UpdateReviewHistoryItemAsync(latestReviewHistory.ReviewHistoryId, box.ReviewItemNumber, box.IsChecked);
                        dctReviewItemSettings[box.ReviewItemNumber] = box.IsChecked;
                    }
                }
                if (itemUpdateNeeded)
                {
                    dctReviewItemSettings = await reviewHistoryItemService.GetCurrentReviewHistoryItemStatusAsync(latestReviewHistory.ReviewHistoryId);
                }

                if (changesSaved == true && !string.IsNullOrWhiteSpace(noteText))
                {
                    var newNote = new ReviewHistoryNote();
                    newNote.NoteText = noteText;
                    newNote.CreateDate = DateTime.Now;
                    newNote.ReviewHistoryId = latestReviewHistory.ReviewHistoryId;
                    newNote.ReviewHistoryNoteId = historyNoteService.GetNextReviewHistoryNoteId();
                    var noteAdded = await historyNoteService.SaveNoteAsync(newNote);
                    var user = await userService.GetUserAsync(latestReviewHistory.UserId);
                    var userName = user.FirstName + " " + user.LastName;
                    if (noteAdded)
                    {
                        lstTextNotes.Add(new TextNotes { Name = userName, Note = noteText, CreationDate = newNote.CreateDate.ToString() });
                    }
                }
                noteText = "";
                await noteDataGrid.Reload();

                await notificationService.Success("Changes have been saved.");
            }
            else
            {
                await notificationService.Error("UI Demo mode. No changes to save.");
            }
        }

        Task OnSendEmailClicked()
        {

            return Task.CompletedTask;
        }

        Validations validations;
        private int iconHeight = 30;
        private int systemAlertsCount;
        private int systemNotesCount;
        private bool systemAlertsDropdownVisible = false;
        private bool systemNotesDropdownVisible = false;
        private string systemAlertsTooltip = string.Empty;
        private string systemNotesTooltip = string.Empty;
        private string leadAgentName = "Demo Page";
        private readonly string noSystemAlertsMessage = "No current System Alerts";
        private readonly string noSystemNotesMessage = "No current System Notes";
        private readonly string currentSystemAlertsMessage = "System Alerts: ";
        private readonly string currentSystemNotesMessage = "System Notes: ";
        private readonly string dismissed = "dismissed";
        private readonly string visible = "visible";
        public string DashboardName { get; set; }
        public string ReportName { get; set; }
        private bool eSig = false;

        IFluentDisplay adminDisplay = Display.None;

        [Inject] IContactUsService contactUsCategoryService { get; set; } = null!;
        [Inject] IErrorLogService errorLogService { get; set; } = null!;
        [Inject] IReviewItemService reviewItemService { get; set; } = null!;
        [Inject] IReviewHistoryService reviewHistoryService { get; set; } = null!;
        [Inject] IReviewHistoryNoteService historyNoteService { get; set; } = null!;
        [Inject] IReviewHistoryEmailService historyEmailService { get; set; } = null!;
        [Inject] IReviewHistoryItemService reviewHistoryItemService { get; set; } = null!;
        [Inject] public NavigationManager Navigation { get; set; }
        [Inject] private IUserService userService { get; set; } = null!;
        [Inject] private IAlertService alertService { get; set; } = null!;
        [Inject] private IStudyService studyService { get; set; } = null!;
        [Inject] INotificationService notificationService { get; set; }
        [Inject] IEmailService emailService { get; set; } = null!;
        [Inject] IReviewService reviewService { get; set; } = null!;

        private Modal modalSubmitEmail;
        private Modal modalSubmitReview;
        private bool cancelClose;

        private string contactUsCategoryID = "", emailTo = "", emailCategory = "", emailDescription = "", emailTitle = "", emailDescriptionLabel = "";
        private List<ContactUsCategory> lstContactUsCategory;
        private List<ContactUsCategorySelectItemList> lstContactUsItems;
        private IList<ReviewItem> lstReviewItems;
        private IList<int> lstReviewHistories;
        private ReviewHistory latestReviewHistory;
        private int daysLate = 0;
        private List<string> reviewNote = new List<string> { "No previous notes." };
        private List<string> reviewEmail = new List<string> { "No previous emails." };
        FileEdit fileEditRef;
        string uploadFileName = "";
        List<string> lstAttachments = new List<string>();
        Dictionary<int, bool> dctReviewItemSettings = new Dictionary<int, bool>();
        IFileEntry selectedFile;
        private bool checkedStatus;

        protected override async Task OnInitializedAsync()
        {
            lstReviewItems = await reviewItemService.GetReviewItemListAsync("MO", 'T');

            if (AgentId > 0)
            {
                latestReviewHistory = await reviewHistoryService.GetLatestReviewHistoryByProtocolAsync(AgentId);
                if (latestReviewHistory != null)
                {
                    var user = await userService.GetUserAsync(latestReviewHistory.UserId);
                    if (user != null)
                    {
                        userFullName = user.FirstName + " " + user.LastName;
                        userFirstName = user.FirstName;
                        userLastName = user.LastName;
                    }
                    studyDescription = await studyService.GetStudyTitleAsync(AgentId);
                    dctReviewItemSettings = await reviewHistoryItemService.GetCurrentReviewHistoryItemStatusAsync(latestReviewHistory.ReviewHistoryId);
                    foreach (var item in lstReviewItems)
                    {
                        dctReviewItemSettings.TryGetValue(item.ReviewItemId, out checkedStatus);

                        lstManagers.Add(new CheckBoxManager { BoxName = item.ReviewItemName, ReviewItemNumber = item.ReviewItemId, IsChecked = checkedStatus });
                        if (checkedStatus == false)
                        {
                            submitIsDisabled = true;
                        }
                    }

                    daysLate = latestReviewHistory.DaysLate ?? 0;
                    leadAgentName = await reviewService.GetLeadAgentByIdAsync(AgentId);
                    lstReviewHistories = await reviewHistoryService.GetHistoryRecordsByProtocolAsync(AgentId);
                    if (lstReviewHistories != null && lstReviewHistories.Count() > 0)
                    {
                        for (int i = 0; i < lstReviewHistories.Count(); i++)
                        {
                            var tmpLst = await historyNoteService.GetNotesAsync(lstReviewHistories[i]);
                            if (tmpLst != null)
                            {
                                if (reviewNote.Contains("No previous notes."))
                                    reviewNote.Remove("No previous notes.");
                                foreach (var tmp in tmpLst)
                                {
                                    lstTextNotes.Add(new TextNotes { Name = tmp.UserName, Note = tmp.Notes, CreationDate = tmp.CreationDate.ToString() });
                                }
                            }
                        }
                        for (int i = 0; i < lstReviewHistories.Count(); i++)
                        {
                            var tmp = await historyEmailService.GetSingleEmailAsync(lstReviewHistories[i]);
                            if (tmp != null && !String.IsNullOrEmpty(tmp.Body))
                            {
                                if (reviewEmail.Contains("No previous emails."))
                                    reviewEmail.Remove("No previous emails.");
                                reviewEmail.Add(tmp.Body);
                                lstEmailDetails.Add(new EmailDetails { Body = tmp.Body, EmailTo = tmp.Recipient, CreationDate = tmp.CreationDate.ToString() });
                            }
                        }
                    }
                }
            }
        }

        private Task OnModalClosing(ModalClosingEventArgs e)
        {
            e.Cancel = cancelClose
            || e.CloseReason != CloseReason.UserClosing;

            return Task.CompletedTask;
        }

        private Task ShowContactUsModal()
        {
            emailTitle = string.Empty;
            emailDescription = string.Empty;
            lstAttachments = new List<string>();
            uploadFileName = string.Empty;
            selectedFile = null;
            validations.ClearAll();
            return modalSubmitEmail.Show();
        }

        private Task ShowSubmitReviewModal()
        {
            return modalSubmitReview.Show();
        }

        private string GetReviewStatus()
        {
            return daysLate > 0 ? "Late" : "On Time";
        }

        private Task HideContactUsModal()
        {
            cancelClose = false;
            return modalSubmitEmail.Hide();
        }

        private Task HideSubmitReviewModal()
        {
            cancelClose = false;
            eSig = false;
            return modalSubmitReview.Hide();
        }

        private async void SendContactUsEmail()
        {
            if (await validations.ValidateAll())
            {
                bool sendEmailResult = await emailService.SendReviewEmail(emailTo, emailTitle, emailDescription, configuration.GetValue<string>("System:SystemColor"));
                if (sendEmailResult)
                {
                    await notificationService.Success("An email has been sent.");
                    await historyEmailService.SaveNewEmailAsync(latestReviewHistory.ReviewHistoryId, emailTo, emailDescription);
                    await emailDataGrid.Reload();
                }
                else
                {
                    await notificationService.Error("Error sending the email.");
                }

                cancelClose = false;
                modalSubmitEmail.Hide();
            }
        }

        private async void CompleteReview()
        {
            eSig = false;
            // Add DB record for next review
            // We need the current date for complete and for updated
            reviewHistoryService.StartNewReviewAsync(latestReviewHistory.ReviewHistoryId);
            modalSubmitReview.Hide();
            string navTo = "/";
            var result = await SessionData.GetAsync<string>("dashboardUrl");
            if (result.Success)
            {
                navTo = result.Value ?? "/";
            }
            Navigation.NavigateTo(navTo, true);
        }
}
</body>
</html>