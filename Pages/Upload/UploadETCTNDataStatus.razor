@using System.Diagnostics.CodeAnalysis
@using Microsoft.Extensions.Options
@using Newtonsoft.Json
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@using TheradexPortal.Data.Models.Configuration;

@page "/upload/status"
@inject IHttpContextAccessor httpContextAccessor
@inject IOptions<UploadSettings> uploadSettings;

<Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1"><h2>Upload Status</h2></Div>
<Divider />

<Row Background="Background.Light">
    <Column ColumnSize="ColumnSize.IsFull">
        <DataGrid TItem="FileIngestRequest"
                  Class="admindatagrid"
                  Data="@fileIngestRequests"
                  Responsive
                  ShowPager
                  ShowPageSizes
                   MaxPaginationLinks="5"
                   PagerPosition="DataGridPagerPosition.Bottom"
                   PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
                   PageSize="100"
                  FixedHeader
                   FixedHeaderDataGridHeight="calc(100vh - 240px)"
                   FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
                   RowStyling="@OnRowStyling"
                   SelectedRowStyling="@OnSelectedRowStyling"
                   CommandMode="DataGridCommandMode.ButtonRow">
             <DataGridColumns>
                 <DataGridColumn Width="100px" Field="@nameof(FileIngestRequest.RequestId)" Caption="Request Id" />
                 <DataGridColumn Width="100px" Field="@nameof(FileIngestRequest.Protocol)" Caption="Protocol" />
                 <DataGridColumn Width="100px" Field="Metadata.CRF" Caption="CRF" />
                 <DataGridColumn Width="100px" Field="Metadata.SourceSite" Caption="Source Site" />
                 <DataGridColumn Width="100px" Field="Metadata.ReceivingSite" Caption="Receiving Site" />
                 <DataGridColumn Width="100px" Field="Metadata.Assay" Caption="Assay" />
                 <DataGridColumn Width="100px" Field="Metadata.OriginalFileName" Caption="File Name" />
                 <DataGridColumn Width="100px" Field="@nameof(FileIngestRequest.Status)" Caption="Status" />
                 <DataGridColumn Width="100px" Field="@nameof(FileIngestRequest.ClientError)" Caption="Error" />
                 <DataGridColumn Width="100px" Field="@nameof(FileIngestRequest.CreatedDate)" Caption="Uploaded Date" />
                 <DataGridColumn Width="125px" Field="@nameof(FileIngestRequest.RequestId)" Caption="View">
                     <DisplayTemplate>
                         <div @onclick:stopPropagation="true" @onclick:preventDefault="true">
                             <Button Color="Color.Info" Size="Size.Small" Clicked="@(()=>OnViewClicked(context as FileIngestRequest))">
                                 View
                             </Button>
                         </div>
                     </DisplayTemplate>
                 </DataGridColumn>
             </DataGridColumns>
             <ButtonRowTemplate>
                 <Button Color="Color.Primary" Clicked="@OnRefresh">Refresh</Button>
             </ButtonRowTemplate>
         </DataGrid>
     </Column>
 </Row>

 <UploadETCTNFileData @ref="uploadETCTNFileData" />

 @code {

    string flexContainerStyle = $"width:75%;";

    [Inject] IUploadService uploadService { get; set; } = null!;
    [Inject] IErrorLogService errorLogService { get; set; } = null!;
    [Inject] NavigationManager Navigation { get; set; }
    [Inject] IEmailService emailService { get; set; } = null!;
    [Inject] INotificationService NotificationService { get; set; }

    private IList<FileIngestRequest> fileIngestRequests = new List<FileIngestRequest>();
    private int? userId = null;

    private UploadETCTNFileData? uploadETCTNFileData;

    protected override async Task OnInitializedAsync()
    {
        userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);

        await OnRefresh();

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
        }
    }

    private Task OnViewClicked(FileIngestRequest request)
    {
        return uploadETCTNFileData?.ShowFileData(request.RequestId, request.Metadata.CRF);

    }

    private async Task OnRefresh()
    {
        this.fileIngestRequests = await uploadService.GetAllRequestsOfUser(userId.Value);
    }

    private void OnRowStyling(FileIngestRequest request, DataGridRowStyling styling)
    {
        if (request.Status == "Failed")
            styling.Style = "color: #F08080;";
        else if (request.Status == "Success")
            styling.Style = "color: lightgreen;";
        else
            styling.Style = "color: lightyellow;";
    }

    private void OnSelectedRowStyling(FileIngestRequest request, DataGridRowStyling styling)
    {
        styling.Background = Background.Info;
    }
}