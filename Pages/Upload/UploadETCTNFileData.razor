@using System.Diagnostics.CodeAnalysis
@using Microsoft.Extensions.Options
@using Newtonsoft.Json
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@using TheradexPortal.Data.Models.Configuration;
@inject IHttpContextAccessor httpContextAccessor

<Modal @ref="ETCTNFileDataModal">
    <ModalContent Size="ModalSize.ExtraLarge">
        <ModalHeader Background="Background.Primary">
            <ModalTitle TextColor="TextColor.White">Overview</ModalTitle>
            <CloseButton TextColor="TextColor.White" />
        </ModalHeader>
        <ModalBody Class="upload-Modal-Body">
            <DataGrid TItem="ReceivingStatusFileData"
                      Class="admindatagrid"
                      Data="@fileData"
                      Responsive
                      ShowPager
                      ShowPageSizes
                       MaxPaginationLinks="5"
                       PageSize="100"
                      FixedHeader
                       RowStyling="@OnRowStyling"
                       SelectedRowStyling="@OnSelectedRowStyling"
                       CommandMode="DataGridCommandMode.ButtonRow">
                 <DataGridColumns>
                     <DataGridColumn Width="100px" Field="@nameof(ReceivingStatusFileData.RowNo)" Caption="#" />
                     <DataGridColumn Width="100px" Field="RowData.SubjectID" Caption="SubjectID" />
                     <DataGridColumn Width="100px" Field="RowData.SpecimenId" Caption="SpecimenId" />
                     <DataGridColumn Width="100px" Field="RowData.SubspecimenID" Caption="SubspecimenID" />
                     <DataGridColumn Width="100px" Field="RowData.DateReceived" Caption="DateReceived" />
                     <DataGridColumn Width="100px" Field="RowData.ShippedDate" Caption="ShippedDate" />
                     <DataGridColumn Width="100px" Field="RowData.SubmissionIsAdequate" Caption="SubmissionIsAdequate" />
                     <DataGridColumn Width="100px" Field="RowData.ExplanatoryReason" Caption="ExplanatoryReason" />
                     <DataGridColumn Width="100px" Field="RowData.OtherReason" Caption="OtherReason" />                     
                     <DataGridColumn Width="100px" Caption="Status" Editable="false">
                         <DisplayTemplate>
                             <Tooltip Style="z-index: 99 !important" Text="@((context as ReceivingStatusFileData).ClientError)">
                                 @((context as ReceivingStatusFileData).Status)
                             </Tooltip>
                         </DisplayTemplate>
                     </DataGridColumn>
                 </DataGridColumns>
                 <ButtonRowTemplate>
                     <Button Color="Color.Primary" Clicked="@OnRefresh">Refresh</Button>
                     <Button Color="Color.Danger" Clicked="@OnHideModal">Cancel</Button>
                 </ButtonRowTemplate>
                 <EmptyTemplate>
                     <div class="box">
                         No Rows were found!
                     </div>
                 </EmptyTemplate>
             </DataGrid>
         </ModalBody>
         <ModalFooter>
         </ModalFooter>
     </ModalContent>
 </Modal>

 @code {

    [Inject] IUploadService uploadService { get; set; } = null!;

    private Modal? ETCTNFileDataModal;

    private IList<ReceivingStatusFileData> fileData = new List<ReceivingStatusFileData>();

    private string requestIdToFetch = string.Empty;

    public async Task ShowFileData(string requestId, string crf)
    {
        this.requestIdToFetch = requestId;

        await OnRefresh();

        showModal();
    }

    private void showModal()
    {
        StateHasChanged();
        ETCTNFileDataModal!.Show();
    }

    private Task OnHideModal()
    {
        return ETCTNFileDataModal.Hide();
    }

    private async Task OnRefresh()
    {
        fileData = await uploadService.GetReceivingStatusFileData(requestIdToFetch);
    }

    private void OnRowStyling(ReceivingStatusFileData fileData, DataGridRowStyling styling)
    {
        if (fileData.Status == "Failed")
            styling.Style = "color:red;";
        else if (fileData.Status == "Success")
            styling.Style = "color:#0f880f;";
        else
            styling.Style = "color:#0755d4;";
    }

    private void OnSelectedRowStyling(ReceivingStatusFileData fileData, DataGridRowStyling styling)
    {
        styling.Background = Background.Info;
    }
}