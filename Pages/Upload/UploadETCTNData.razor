@using System.Diagnostics.CodeAnalysis
@using Newtonsoft.Json
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@using TheradexPortal.Data.Models.Configuration;

@page "/upload"
@inject IHttpContextAccessor httpContextAccessor

<AdminRoleCheck AllowedRoles="@(new List<string> { "IT", "Biz" })"></AdminRoleCheck>

<Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1 mb-3"><h2>Upload CSV</h2></Div>

<h4>User Information</h4>
<Divider />
<Div Flex="Flex.AlignItems.Start" Margin="Margin.Is3.FromBottom" Background="Background.Light">
    <Div Padding="Padding.Is4" Style="@flexContainerStyle">
        <Row>
            <Column>
                <Validations @ref="@ValidationsRef" Mode="ValidationMode.Manual" Model="@ETCTNUploadRequestModel" ValidateOnLoad="false">
                    <Fields>
                        <Validation>
                            <Field ColumnSize="ColumnSize.IsThird">
                                <FieldLabel>Protocol</FieldLabel>
                                <FieldBody>
                                    <Select @bind-SelectedValue="@ETCTNUploadRequestModel.Protocol">
                                        <ChildContent>
                                            <SelectItem TValue="string"></SelectItem>
                                            @foreach (var item in studies)
                                            {
                                                <SelectItem TValue="string" Value="@item">@item</SelectItem>
                                            }
                                        </ChildContent>
                                        <Feedback>
                                            <ValidationError>Please choose a Protocol</ValidationError>
                                        </Feedback>
                                    </Select>
                                </FieldBody>
                            </Field>
                        </Validation>
                        <Validation>
                            <Field ColumnSize="ColumnSize.IsThird">
                                <FieldLabel>Source Lab</FieldLabel>
                                <FieldBody>
                                    <Select @bind-SelectedValue="@ETCTNUploadRequestModel.Laboratory">
                                        <ChildContent>
                                            <SelectItem TValue="string"></SelectItem>
                                            @foreach (var item in labs)
                                            {
                                                <SelectItem TValue="string" Value="@item.CodedData">@item.UserData</SelectItem>
                                            }
                                        </ChildContent>
                                        <Feedback>
                                            <ValidationError>Please choose a Lab</ValidationError>
                                        </Feedback>
                                    </Select>
                                </FieldBody>
                            </Field>
                        </Validation>
                    </Fields>
                    <Fields>
                        <Validation>
                            <Field ColumnSize="ColumnSize.IsThird">
                                <FieldLabel>CRF</FieldLabel>
                                <FieldBody>
                                    <RadioGroup TValue="string" @bind-CheckedValue="@ETCTNUploadRequestModel.CRF">
                                        <ChildContent>
                                            @foreach (var item in crfs)
                                            {
                                                <Radio Value="@item.FormOID">@item.FormName</Radio>
                                            }
                                        </ChildContent>
                                        <Feedback>
                                            <ValidationError>Please choose a CRF</ValidationError>
                                        </Feedback>
                                    </RadioGroup>
                                </FieldBody>
                            </Field>
                        </Validation>
                        <Validation>
                            <Field ColumnSize="ColumnSize.IsThird">
                                <FieldLabel>Assay</FieldLabel>
                                <FieldBody>
                                    <Select @bind-SelectedValue="@ETCTNUploadRequestModel.Assay">
                                        <ChildContent>
                                            <SelectItem TValue="string"></SelectItem>
                                            @foreach (var item in assays)
                                            {
                                                <SelectItem TValue="string" Value="@item.CodedData">@item.UserData</SelectItem>
                                            }
                                        </ChildContent>
                                        <Feedback>
                                            <ValidationError>Please choose an Assay</ValidationError>
                                        </Feedback>
                                    </Select>
                                </FieldBody>
                            </Field>
                        </Validation>
                    </Fields>
                    <Fields>
                        <Field>
                            <FieldLabel ColumnSize="ColumnSize.Is4" TextWeight="TextWeight.Bold">Attach File</FieldLabel>
                            <FieldLabel>Accepted File Types: CSV</FieldLabel>
                            <FileEdit @ref="@fileEditRef" Changed="@OnFileUpload"
                                      MaxFileSize="4194304" Filter=".csv" AutoReset="false" DisableProgressReport="false">
                            </FileEdit>
                        </Field>
                    </Fields>
                </Validations>
                <Button Color="Color.Primary" Clicked="@OnSubmit">
                    Submit
                </Button>
                <Button Color="Color.Primary" Clicked="@OnReset">
                    Reset
                </Button>
            </Column>
        </Row>
    </Div>
</Div>

@code {

    string flexContainerStyle = $"width:75%;";

    [Inject] IUploadService uploadService { get; set; } = null!;
    [Inject] IErrorLogService errorLogService { get; set; } = null!;
    [Inject] NavigationManager Navigation { get; set; }
    [Inject] IEmailService emailService { get; set; } = null!;

    List<string> studies = null;
    List<MedidataDictionaryModel> labs = null;
    List<MedidataDictionaryModel> assays = null;
    List<CRFModel> crfs = null;

    int? userId = null;
    FileEdit fileEditRef;

    Validations ValidationsRef { get; set; }

    ETCTNUploadRequest ETCTNUploadRequestModel { get; set; } = new ETCTNUploadRequest();

    UploadFileModel? UploadFile;

    protected override async Task OnInitializedAsync()
    {
        studies = uploadService.GetStudiesToUpload();
        labs = uploadService.GetLabsToUpload();
        assays = uploadService.GetAssaysToUpload();
        crfs = uploadService.GetCRFsToUpload();

        userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await reset();
        }
    }

    async Task reset()
    {
        await fileEditRef.Reset().AsTask();

        await ValidationsRef.ClearAll();

        ETCTNUploadRequestModel = new ETCTNUploadRequest();

        ETCTNUploadRequestModel.ID = Guid.NewGuid();

        UploadFile = null;
    }

    async Task OnSubmit()
    {
        if (await ValidationsRef.ValidateAll() && UploadFile != null)
        {
            await UploadMetadata();

            await reset();
        }
    }

    async Task OnReset()
    {
        await reset();
    }

    async Task<bool> UploadMetadata()
    {
        try
        {
            var metadataFile = new FileMetadata();
            UploadFile = new UploadFileModel();

            metadataFile.ID = ETCTNUploadRequestModel.ID;
            metadataFile.Assay = ETCTNUploadRequestModel.Assay;
            metadataFile.Laboratory = ETCTNUploadRequestModel.Laboratory;
            metadataFile.CRF = ETCTNUploadRequestModel.CRF;
            metadataFile.FileName = UploadFile.OriginalFileName;
            metadataFile.FilePath = UploadFile.S3Key;
            metadataFile.Protocol = ETCTNUploadRequestModel.Protocol;
            metadataFile.UserId = userId.Value;

            var bucket = "dev-nci-etctn-fileingestrequests";
            var dateKey = $"{DateTime.Now.Year}-{DateTime.Now.Month}/{DateTime.Now.Day}";
            var key = $"Metadata/{dateKey}/{ETCTNUploadRequestModel.ID}.json";
            var json = JsonConvert.SerializeObject(metadataFile);

            var isSuccess = await uploadService.UploadMetatdataFileToS3(bucket, key, userId.Value, json);

            return isSuccess;
        }
        catch (Exception ex)
        {
            errorLogService.SaveErrorLogAsync(userId.Value, Navigation.Uri, ex.InnerException, ex.Source, ex.Message, ex.StackTrace);

            return false;
        }
    }

    async Task OnFileUpload(FileChangedEventArgs e)
    {
        try
        {
            IFileEntry? selectedFile = e.Files.FirstOrDefault();

            if (selectedFile == null)
                return;

            try
            {
                var originalFileName = Path.GetFileName(selectedFile.Name);
                var dateKey = $"{DateTime.Now.Year}-{DateTime.Now.Month}/{DateTime.Now.Day}";
                var key = $"Files/{dateKey}/{ETCTNUploadRequestModel.ID}.csv";
                var bucket = "dev-nci-etctn-fileingestrequests";

                using (var stream = new MemoryStream())
                {
                    await selectedFile.WriteToStreamAsync(stream);

                    var isSuccess = await uploadService.UploadCsvFileToS3(bucket, key, userId.Value, stream);

                    if (isSuccess)
                    {
                        UploadFile = new UploadFileModel { OriginalFileName = originalFileName, S3Key = key };
                    }
                }
            }
            catch (Exception ex)
            {
                await errorLogService.SaveErrorLogAsync(userId.Value, Navigation.Uri, ex.InnerException, ex.Source, ex.Message, ex.StackTrace);
            }
        }
        catch (Exception ex)
        {
            errorLogService.SaveErrorLogAsync(userId.Value, Navigation.Uri, ex.InnerException, ex.Source, ex.Message, ex.StackTrace);
        }
        finally
        {
            this.StateHasChanged();
        }
    }
}
