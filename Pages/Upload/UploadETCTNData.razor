@using System.Diagnostics.CodeAnalysis
@using Microsoft.Extensions.Options
@using Newtonsoft.Json
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@using TheradexPortal.Data.Models.Configuration;

@page "/upload"
@inject IHttpContextAccessor httpContextAccessor
@inject IOptions<UploadSettings> uploadSettings;

<AdminRoleCheck AllowedRoles="@(new List<string> { "IT", "Biz" })"></AdminRoleCheck>

<Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1 mb-3"><h2>Upload CSV</h2></Div>

<Divider />

<LoadingIndicator @ref="loadingIndicator">
    <Div Flex="Flex.AlignItems.Start" Margin="Margin.Is3.FromBottom" Background="Background.Light">
        <Div Padding="Padding.Is4" Style="@flexContainerStyle">
            <Row>
                <Column>
                    <Validations @ref="@ValidationsRef" Mode="ValidationMode.Manual" Model="@ETCTNUploadRequestModel" ValidateOnLoad="false">
                        <Fields>
                            <Validation Validator="@ValidationRule.IsNotEmpty">
                                <Field ColumnSize="ColumnSize.IsThird">
                                    <FieldLabel>Protocol</FieldLabel>
                                    <FieldBody>
                                        <Select @bind-SelectedValue="SelectedProtocol">
                                            <ChildContent>
                                                <SelectItem TValue="string"></SelectItem>
                                                @foreach (var item in protocols)
                                                {
                                                    <SelectItem TValue="string" Value="@item">@item</SelectItem>
                                                }
                                            </ChildContent>
                                            <Feedback>
                                                <ValidationError>Protocol is required</ValidationError>
                                            </Feedback>
                                        </Select>
                                    </FieldBody>
                                </Field>
                            </Validation>
                            <Validation>
                                <Field ColumnSize="ColumnSize.IsThird">
                                    <FieldLabel>Receiving Site</FieldLabel>
                                    <FieldBody>
                                        <Select @bind-SelectedValue="@ETCTNUploadRequestModel.ReceivingSite">
                                            <ChildContent>
                                                <SelectItem TValue="string"></SelectItem>
                                                @foreach (var item in trackingDestinations)
                                                {
                                                    <SelectItem TValue="string" Value="@item.UserData">@item.UserData</SelectItem>
                                                }
                                            </ChildContent>
                                            <Feedback>
                                                <ValidationError>ReceivingSite is required</ValidationError>
                                            </Feedback>
                                        </Select>
                                    </FieldBody>
                                </Field>
                            </Validation>
                            <Validation>
                                <Field ColumnSize="ColumnSize.IsThird">
                                    <FieldLabel>Source Site</FieldLabel>
                                    <FieldBody>
                                        <Select @bind-SelectedValue="@ETCTNUploadRequestModel.SourceSite">
                                            <ChildContent>
                                                <SelectItem TValue="string"></SelectItem>
                                                @foreach (var item in trackingDestinations)
                                                {
                                                    <SelectItem TValue="string" Value="@item.UserData">@item.UserData</SelectItem>
                                                }
                                            </ChildContent>
                                            <Feedback>
                                                <ValidationError>SourceSite is required</ValidationError>
                                            </Feedback>
                                        </Select>
                                    </FieldBody>
                                </Field>
                            </Validation>
                        </Fields>
                        <Fields>
                            <Validation>
                                <Field ColumnSize="ColumnSize.IsThird">
                                    <FieldLabel>CRF</FieldLabel>
                                    <FieldBody>
                                        <RadioGroup TValue="string" @bind-CheckedValue="@ETCTNUploadRequestModel.CRF" CheckedChanged="OnCRFChanged">
                                            <ChildContent>
                                                @foreach (var item in crfs)
                                                {
                                                    <Radio Value="@item.FormOID">@item.FormName</Radio>
                                                }
                                            </ChildContent>
                                            <Feedback>
                                                <ValidationError>CRF is required</ValidationError>
                                            </Feedback>
                                        </RadioGroup>
                                        <Span Visibility="@CheckCRFStatus()">
                                            <Icon Name="IconName.Download" IconSize="@IconSize.ExtraSmall" />&nbsp;
                                            <Link Clicked="OnDownloadTemplate" To="#">
                                            Download
                                            </Link>
                                            &nbsp;&nbsp;&nbsp;&nbsp;
                                            <Icon Name="IconName.ListUl" IconSize="@IconSize.ExtraSmall" />&nbsp;
                                            <Link Clicked="OnInstructionsView" To="#">
                                            Instructions
                                            </Link>
                                        </Span>
                                    </FieldBody>
                                </Field>
                            </Validation>
                            <Validation>
                                <Field ColumnSize="ColumnSize.IsThird">
                                    <FieldLabel>Assay</FieldLabel>
                                    <FieldBody>
                                        <Select @bind-SelectedValue="@ETCTNUploadRequestModel.Assay">
                                            <ChildContent>
                                                <SelectItem TValue="string"></SelectItem>
                                                @foreach (var item in assays)
                                                {
                                                    <SelectItem TValue="string" Value="@item.CodedData">@item.UserData</SelectItem>
                                                }
                                            </ChildContent>
                                            <Feedback>
                                                <ValidationError>Assay is required</ValidationError>
                                            </Feedback>
                                        </Select>
                                    </FieldBody>
                                </Field>
                            </Validation>
                        </Fields>
                        <Fields>
                            <Validation Validator="@ValidateFile">
                                <Field>
                                    <FieldLabel ColumnSize="ColumnSize.Is4" TextWeight="TextWeight.Bold">Attach File</FieldLabel>
                                    <FieldLabel>Accepted File Types: CSV</FieldLabel>
                                    <FileEdit @ref="@fileEditRef" Changed="@OnFileUpload" MaxFileSize="4194304" Filter=".csv" AutoReset="false" DisableProgressReport="false">
                                    </FileEdit>
                                </Field>
                            </Validation>
                        </Fields>
                    </Validations>
                    <Button Color="Color.Primary" Clicked="@OnSubmit">
                        Submit
                    </Button>
                    <Button Color="Color.Warning" Clicked="@OnReset">
                        Reset
                    </Button>
                </Column>
            </Row>
        </Div>
    </Div>
</LoadingIndicator>

<Modal @ref="modalUploadInstructions" Closing="@OnModalClosing">
    <ModalContent Centered Size="ModalSize.Large">
         <ModalHeader Background="Background.Primary" TextColor="TextColor.Light">
             <ModalTitle>Upload Instructions</ModalTitle>
             <CloseButton />
         </ModalHeader>
         <ModalBody>
             <ListGroup Flush Padding="Padding.Is2">
                 <ListGroupItem>
                     <Div Padding="Padding.Is2">
                         <Heading Size="HeadingSize.Is4">@ETCTNUploadRequestModel.CRF</Heading>
                            <Paragraph Margin="Margin.Is1.FromBottom.Is3.FromStart">Define User information such as First Name, Last Name, Active, etc.</Paragraph>
                            <Paragraph Margin="Margin.Is1.FromBottom.Is3.FromStart">Users must be assigned a Primary role and any number of secondary roles.</Paragraph>
                            <Paragraph Margin="Margin.Is1.FromBottom.Is3.FromStart">Define Dashboards, Reports and Admin pages the user can access via Roles.</Paragraph>
                            <Paragraph Margin="Margin.Is1.FromBottom.Is3.FromStart">Define Study Groups and Individual Studies users can access.</Paragraph>
                            <Paragraph Margin="Margin.Is1.FromBottom.Is3.FromStart">Administration roles are granted all Dashboards, Reports and Studies by default.</Paragraph>
                        </Div>
                    </ListGroupItem>
                </ListGroup>
            </ModalBody>
            <ModalFooter>
            </ModalFooter>
        </ModalContent>
    </Modal>

    <script>
        window.triggerFileDownload = (fileName, url) => {
            const anchorElement = document.createElement('a');
            anchorElement.href = url;
            anchorElement.download = fileName ?? '';
            anchorElement.click();
            anchorElement.remove();
        }

        window.blazorOpen = (args) => {
            window.open(args);
        };

    </script>

    @code {

    @inject IJSRuntime JS

    private Modal modalUploadInstructions;
    private bool cancelClose;

    string flexContainerStyle = $"width:75%;";

    [Inject] IUploadService uploadService { get; set; } = null!;
    [Inject] IErrorLogService errorLogService { get; set; } = null!;
    [Inject] NavigationManager Navigation { get; set; }
    [Inject] IEmailService emailService { get; set; } = null!;
    [Inject] INotificationService NotificationService { get; set; }
    [Inject] private IUserService userService { get; set; } = null!;

    // List<string> studies = null;
    List<MedidataDictionaryModel> trackingDestinations = new List<MedidataDictionaryModel>();
    List<MedidataDictionaryModel> assays = new List<MedidataDictionaryModel>();
    List<CRFModel> crfs = new List<CRFModel>();
    List<ProtocolData> protocolData = new List<ProtocolData>();
    List<string> protocols = new List<string>();

    int? userId = null;
    FileEdit fileEditRef;

    Validations ValidationsRef { get; set; }

    ETCTNUploadRequest ETCTNUploadRequestModel { get; set; } = new ETCTNUploadRequest();

    UploadFileModel? UploadFile;

    LoadingIndicator loadingIndicator;

    public string SelectedProtocol
    {
        get
        {
            return ETCTNUploadRequestModel.Protocol;
        }
        set
        {
            ETCTNUploadRequestModel.Protocol = value;

            OnProtocolChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);

            User curUser = await userService.GetUserAsync(userId.Value);

            protocolData = await uploadService.GetProtocolData(userId.Value, curUser.AllStudies);

            crfs = uploadService.GetCRFs();

            protocols = protocolData.Select(t => t.Protocol + "(FUNCTEST)").ToList();

            await OnReset();
        }
    }

    void OnProtocolChanged()
    {
        if (string.IsNullOrEmpty(ETCTNUploadRequestModel.Protocol))
            return;

        var data = protocolData.First(t => ETCTNUploadRequestModel.Protocol.StartsWith(t.Protocol));

        trackingDestinations = data.Sites;

        assays = data.Assays;
    }

    private void OnCRFChanged()
    {
    }

    private Task OnModalClosing(ModalClosingEventArgs e)
    {
        e.Cancel = cancelClose
            || e.CloseReason != CloseReason.UserClosing;

        return Task.CompletedTask;
    }

    private Blazorise.Visibility CheckCRFStatus()
    {
        if (ETCTNUploadRequestModel.CRF != null)
            return Visibility.Visible;
        else
            return Visibility.Invisible;
    }

    async Task OnDownloadTemplate()
    {
        var fileName = crfs.First(t => t.FormOID == ETCTNUploadRequestModel.CRF).FormName;

        var preSignedUrl = await uploadService.GetCRFTemplateDownloadUrl(ETCTNUploadRequestModel.CRF, $"{fileName}.csv");

        string[] values = { preSignedUrl, "_blank" };
        CancellationToken token = new CancellationToken(false);
        await JS.InvokeAsync<object>("open", token, values);
    }

    private Task OnInstructionsView()
    {
        return modalUploadInstructions.Show();
    }

    async Task OnReset()
    {
        await fileEditRef.Reset().AsTask();

        await ValidationsRef.ClearAll();

        ETCTNUploadRequestModel = new ETCTNUploadRequest();

        ETCTNUploadRequestModel.RequestId = Guid.NewGuid().ToString();

        SelectedProtocol = null;

        UploadFile = null;

        trackingDestinations = new List<MedidataDictionaryModel>();

        assays = new List<MedidataDictionaryModel>();
    }

    async Task OnSubmit()
    {
        if (await ValidationsRef.ValidateAll() && UploadFile != null)
        {
            await UploadMetadata();

            await OnReset();
        }
    }

    async Task<bool> UploadMetadata()
    {
        try
        {
            await loadingIndicator.Show();

            var key = uploadService.GetMetadataFileUploadKey(ETCTNUploadRequestModel.RequestId);

            var metadataFile = uploadService.GetMetadatafile(ETCTNUploadRequestModel, UploadFile, userId.Value);

            var json = JsonConvert.SerializeObject(metadataFile);

            var isSuccess = await uploadService.UploadMetatdataFileToS3(key, userId.Value, json);

            if (isSuccess)
            {
                await NotificationService.Success("Your Csv File was submitted successfully.");
            }
            else
            {
                await NotificationService.Error("There's an error submitting your Csv File. Please Reset and try again.");
            }

            return isSuccess;
        }
        catch (Exception ex)
        {
            errorLogService.SaveErrorLogAsync(userId.Value, Navigation.Uri, ex.InnerException, ex.Source, ex.Message, ex.StackTrace);

            return false;
        }
        finally
        {
            await loadingIndicator.Hide();
        }
    }

    async Task OnFileUpload(FileChangedEventArgs e)
    {
        try
        {
            await loadingIndicator.Show();

            IFileEntry? selectedFile = e.Files.FirstOrDefault();

            if (selectedFile == null)
                return;

            try
            {
                var fileExtension = Path.GetExtension(selectedFile.Name);

                if (fileExtension.ToLower() != ".csv")
                {
                    await fileEditRef.Reset().AsTask();

                    return;
                }

                var originalFileName = Path.GetFileName(selectedFile.Name);
                var key = uploadService.GetCsvUploadKey(ETCTNUploadRequestModel.RequestId);

                using (var stream = new MemoryStream())
                {
                    await selectedFile.WriteToStreamAsync(stream);

                    var isSuccess = await uploadService.UploadCsvFileToS3(key, userId.Value, stream);

                    if (isSuccess)
                    {
                        UploadFile = new UploadFileModel { OriginalFileName = originalFileName, S3Key = key };

                        await NotificationService.Success("File uploaded successfully.");
                    }
                    else
                    {
                        await NotificationService.Error("There's an error uploading the file. Please Reset and try again.");
                    }
                }
            }
            catch (Exception ex)
            {
                await errorLogService.SaveErrorLogAsync(userId.Value, Navigation.Uri, ex.InnerException, ex.Source, ex.Message, ex.StackTrace);
            }
        }
        catch (Exception ex)
        {
            errorLogService.SaveErrorLogAsync(userId.Value, Navigation.Uri, ex.InnerException, ex.Source, ex.Message, ex.StackTrace);
        }
        finally
        {
            this.StateHasChanged();

            await loadingIndicator.Hide();
        }
    }

    private void ValidateFile(ValidatorEventArgs e)
    {
        if (UploadFile == null)
        {
            e.Status = ValidationStatus.Error;
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }
}
