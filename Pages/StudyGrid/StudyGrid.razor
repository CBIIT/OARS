@page "/studygrid"
@using TheradexPortal.Data.Models
@using TheradexPortal.Data
@using TheradexPortal.Data.Services
@using Newtonsoft.Json;

@inject StudyService studyService

<Button Color="Color.Primary" Clicked="@ShowModal">Select Studies</Button>

<Modal @ref="modalRef">
    <ModalContent Centered Size="ModalSize.ExtraLarge">
        <ModalBody>
            <DataGrid TItem="Protocol"
                        Data="@studyList"
                        SelectionMode="DataGridSelectionMode.Multiple"
                        @bind-SelectedRows="@selectedStudies"
                        Responsive
                        Filterable
                        Striped
                        FixedHeader
                        FixedHeaderDataGridMaxHeight="500px"
                        ShowPager
                        PageSize="5"
                        PagerPosition="DataGridPagerPosition.Top"
                        PagerOptions="new(){ ButtonSize=Size.Small }">
                    <DataGridColumns>
                        <DataGridMultiSelectColumn Width="30px"> </DataGridMultiSelectColumn>
                        <DataGridCommandColumn />
                        <DataGridColumn Field="@nameof(Protocol.Study_Id)" Caption="Study ID" Filterable="false"/>
                        <DataGridColumn Field="@nameof(Protocol.Study_Drug)" Caption="Primary Agent" />
                        <DataGridColumn Field="@nameof(Protocol.Protocol_Title)" Caption="Title" />
                        <DataGridDateColumn Field="@nameof(Protocol.Activation_DT)" Caption="Activation Date">
                            <DisplayTemplate>
                                @{
                                    var date = (context as Protocol)?.Activation_DT;

                                    if (date != null)
                                    {
                                        @(date.Value.ToShortDateString())
                                    }
                                }
                            </DisplayTemplate>
                           <FilterTemplate>
                                <DatePicker @bind-Dates="selectedDates" TValue="DateTime" InputMode="DateInputMode.Date" SelectionMode="DateInputSelectionMode.Range" />
                            </FilterTemplate>
                        </DataGridDateColumn>
                        <DataGridColumn Field="@nameof(Protocol.Current_Status)" Caption="Protocol Status" />
                        <DataGridColumn Field="@nameof(Protocol.Study_Id)" Sortable="false" Filterable="false" Caption="Overview" Width="120px">
                            <DisplayTemplate>
                                <Button Color="Color.Primary" Clicked="@(()=>OnOverviewClicked(context as Protocol))">
                                    Overview
                                </Button>
                            </DisplayTemplate>
                        </DataGridColumn>
                    </DataGridColumns>
                    
                    <PageButtonTemplate>
                        <Span TextColor="TextColor.Success">
                            @context.PageNumber
                        </Span>
                    </PageButtonTemplate>
                    <NextPageButtonTemplate><Icon Name="IconName.StepForward" TextColor="TextColor.Success" /></NextPageButtonTemplate>
                    <PreviousPageButtonTemplate><Icon Name="IconName.StepBackward" TextColor="TextColor.Success" /></PreviousPageButtonTemplate>
                    <LastPageButtonTemplate><Icon Name="IconName.Forward" TextColor="TextColor.Success" /></LastPageButtonTemplate>
                    <FirstPageButtonTemplate><Icon Name="IconName.Backward" TextColor="TextColor.Success" /></FirstPageButtonTemplate>
                    <TotalItemsTemplate><Badge Color="Color.Success">@context.TotalItems total items</Badge></TotalItemsTemplate>
                    <TotalItemsShortTemplate><Badge Color="Color.Success">@context.TotalItems</Badge></TotalItemsShortTemplate>
                    <PageSelectorTemplate>
                        <Select TextColor="TextColor.Success" @bind-SelectedValue="@context.CurrentPage" Size="Size.Small">
                            @for ( int i = context.FirstVisiblePage; i <= context.LastVisiblePage; ++i )
                            {
                                var pageNumber = i;
                                <SelectItem Value="@pageNumber">@pageNumber</SelectItem>
                            }
                        </Select>
                    </PageSelectorTemplate>
                    <PageSizesTemplate>
                        <Select TextColor="TextColor.Success" @bind-SelectedValue="@context.CurrentPageSize" Size="Size.Small">
                            @foreach (var curPageSize in context.PageSizes)
                            {
                                <SelectItem Value="@curPageSize">@curPageSize</SelectItem>
                            }
                        </Select>
                    </PageSizesTemplate>
            </DataGrid>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModalAndSave">Load Selections</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="overviewRef">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Overview</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Table Hoverable>
                <TableBody>
                    <TableRow>
                        <TableRowHeader>Study ID</TableRowHeader>
                        <TableRowCell>@nameof(overviewProtocol.Study_Id)</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Title</TableRowHeader>
                        <TableRowCell>@nameof(overviewProtocol.Protocol_Title)</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Primary Investigator</TableRowHeader>
                        <TableRowCell>@nameof(overviewProtocol.Investigator)</TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Monitoring Method</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Accrual (Screening/Intervention/Other)</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Date of Last EDC Update</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Total Patients In Web Reporting</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Total Patients Treated In Web Reporting</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Recent Enrollment In Web Reporting</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                    <TableRow>
                        <TableRowHeader>Subsequent Phase Activation Date</TableRowHeader>
                        <TableRowCell></TableRowCell>
                    </TableRow>
                </TableBody>
            </Table>
        </ModalBody>
        <ModalFooter></ModalFooter>
    </ModalContent>
</Modal>

@code {
    private IList<Protocol>? studyList;
    private List<Protocol>? selectedStudies;
    private IReadOnlyList<DateTime>? selectedDates;
    private Modal? modalRef;
    private Modal? overviewRef;
    private Protocol overviewProtocol;
    // get studies for grid
    protected override async Task OnInitializedAsync()
    {
        studyList = await studyService.GetAllProtocolsAsync();
    }

    // filter by dates
    //private Task FilterByDates() 
    //{
    //    studyList = studyList.Where(x => selectedDates.Contains(x.Activation_DT)).ToList();
    //    return Task.CompletedTask;
    //}

    // drop down menu for protocol status


    // study selection handler
    private bool RowSelectableHandler(RowSelectableEventArgs<Protocol> rowSelectableEventArgs)
    => rowSelectableEventArgs.SelectReason is not DataGridSelectReason.RowClick;

    // show modal
    private Task ShowModal()
    {
        return modalRef.Show();
    }

    // hide modal and write selected studies to db
    private Task HideModalAndSave()
    {
        string json = JsonConvert.SerializeObject(selectedStudies, Formatting.Indented);
        Console.WriteLine(json);
        //get userId
        //get DateTime view_time
        // selectedProtocolsService.SetSelectedProtocolsAsync(userId, json, view_time);
        return modalRef.Hide();
    }

    private Task OnOverviewClicked(Protocol p)
    {
        //feed protocol to overview modal
        overviewProtocol = p;
        return overviewRef.Show();
    }

    // checkbox X
    // study id X
    // primary agent X
    // secondary agent
    // other (list of other agents--must be searchable)
    // title (study title) X
    // protocol status X (multi-select)


    // Overview
        // Protocol
        // Protocol Title 
        // Primary Investigator 
        // Monitoring Method
        // Accrual (Screening/Intervention/Other)
        // Date of Last EDC Update
        // Total Patients in Web Reporting
        // Total Patients Treated in Web Reporting
        // Recent Enrollment in Web Reporting
        // Subsequent Phase Activation Date
}