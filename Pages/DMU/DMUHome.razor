@page "/dmu/dmuhome/{dashboardid:int?}"
@layout SecondaryNavLayout
@inject IHttpContextAccessor httpContextAccessor

@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.ViewModels;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;


@if (notFound)
{
    <LayoutContent>
        <Container Fluid Class="mt-2 text-center">
             <NotFound />
         </Container>
     </LayoutContent>
}
else
{
    <LayoutContent>
        <Container Fluid Class="mt-2">
             <Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1 mb-3"><h2>DMU Home</h2></Div>
             Placeholder for DMU Study Mapping area.
         </Container>
     </LayoutContent>
}
@code {
    [Inject] private IDashboardService dashboardService { get; set; } = null!;
    [Inject] private IUserService userService { get; set; } = null!;

    [Parameter] public int DashboardId { get; set; }
    [Parameter] public int ReportId { get; set; }

    private int userId;
    private bool notFound = false;
    private TheradexPortal.Data.Models.Dashboard? dashboard;

    protected override async Task OnParametersSetAsync()
    {
        bool isAdmin = httpContextAccessor.HttpContext.User.HasClaim(ThorClaimType.IsAdmin, "True");
        userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
        string userDashboards = httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.Dashboards).Value;
        dashboard = await dashboardService.GetDashboardByIdAsync(DashboardId, userDashboards, isAdmin);

        if (dashboard == null && !isAdmin)
        {
            notFound = true;
            return;
        }
    }
}
