@attribute [Route(ThorConstants.DASHBOARD_PAGE_PATH + "/{dashboardid:int}/{reportid:int?}")]
@layout SecondaryNavLayout
@inject IConfiguration configuration
@inject IHttpContextAccessor httpContextAccessor

@using System.Net.Http
@using System.Threading.Tasks
@using TheradexPortal.Data;
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.PowerBI.Abstract;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.ViewModels;
@using TheradexPortal.Data.Static;

@if(notFound)
{
    <LayoutContent>
        <Container Fluid Class="mt-2 text-center">
            <NotFound />
        </Container>
    </LayoutContent>
}
else
{
    <PageTitle>@dashboard!.Name</PageTitle>
    <LayoutSider>
        <SecondaryNav Actions="Actions" Reports="allReports" />
    </LayoutSider>
    <LayoutContent>
        <Container Fluid Class="mt-2">
            @if(report != null && report.IsFullPage)
            {
                <PowerBiFullReport Dashboard="dashboard" Report="report" @ref="fullReportRef" />
            }
            else if(report != null)
            {
                <PowerBiCustomLayout Dashboard="dashboard" Report="report" @ref="customReportRef" />
            }
        </Container>
    </LayoutContent>
}

<StudyOverview @ref="studyOverview" />

@code {
    [Inject] private IDashboardService dashboardService { get; set; } = null!;
    [Inject] private IStudyService studyService { get; set; } = null!;
    [Inject] private IUserService userService { get; set; } = null!;
    [Inject] private NavigationManager navigation {get; set; } = null!;

    [Parameter] public int DashboardId { get; set; }
    [Parameter] public int ReportId { get; set; }

    [CascadingParameter]
    public PrimaryNavLayout PrimaryNavLayout { get; set; }

    private bool notFound = false;
    private StudyOverview? studyOverview;
    private PowerBiCustomLayout? customReportRef;
    private PowerBiFullReport? fullReportRef;

    private TheradexPortal.Data.Models.Dashboard? dashboard;
    private IList<Report> allReports = new List<Report>();
    private Report? report;
    private string dashboardName;
    private string reportName;
    private string helpFileUrl;
    private bool helpFileFound;
    private int currentDashboardId;
    private int userId;
    private int previousReport = 0;

    private int? _dashboardId;
    private int? _reportId;
    private bool _saveHistory;

    private IList<SecondaryNavAction> Actions => new List<SecondaryNavAction>
    {
        new SecondaryNavAction
        {
            IconName = IconName.Eye,
            Label = "Study Overview",
            OnClick = ShowOverview
        },
        new SecondaryNavAction
        {
            IconName = IconName.Download,
            Label = "Dashboard Help",
            Target = Target.Blank,
            To = this.getHelpUrl(),
            ShowAction = this.helpFileFound
        }
    };

    protected override void OnInitialized()
    {
        if (fullReportRef != null)
        {
            _dashboardId = DashboardId;
            _reportId = ReportId;
            _saveHistory = true;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        _saveHistory = false;
        notFound = false;

        if (fullReportRef != null)
        {
            if (_dashboardId != DashboardId || _reportId != ReportId)
            {
                fullReportRef.RefreshReport = true;
                _dashboardId = DashboardId;
                _reportId = ReportId;
                _saveHistory = true;
            }
            else
                fullReportRef.RefreshReport = false;
        }

        // Determine if user has access to requested dashboard & report
        bool isAdmin = httpContextAccessor.HttpContext.User.HasClaim(ThorClaimType.IsAdmin, "True");
        string userDashboards = httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.Dashboards).Value;
        string userReports = httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.Reports).Value;
        dashboard = await dashboardService.GetDashboardByIdAsync(DashboardId, userDashboards, isAdmin);
        await PrimaryNavLayout.UpdateDashboard(dashboard);
        PrimaryNavLayout.DashboardName = dashboard.Name;
        if(dashboard == null && !isAdmin)
        {
            notFound = true;
            return;
        }

        userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);

        allReports = await dashboardService.GetReportsByDashboardIdForUserAsync(DashboardId, userId, isAdmin);
        if (ReportId == 0)
        {
            report = allReports.FirstOrDefault();
            if(report == null)
            {
                notFound = true;
                return;
            }
            navigation.NavigateTo($"{ThorConstants.DASHBOARD_PAGE_PATH}/{dashboard.DashboardId}/{report.ReportId}", new NavigationOptions
            {
                ReplaceHistoryEntry = true,
                ForceLoad = true
            });

            _saveHistory = false;
        }
        else
        {
            report = allReports.FirstOrDefault(r => r.ReportId == ReportId);
            if (report == null)
            {
                notFound = true;
                return;
            }
        }

        if (String.IsNullOrEmpty(report.SubMenuName))
            PrimaryNavLayout.ReportName = report.Name;
        else
            PrimaryNavLayout.ReportName = report.Name + "-" + report.SubMenuName;

        // Check if at least one study has been selected by the user
        string currentStudies = studyService.GetCurrentStudiesForUser(userId);

        if (currentStudies == null || currentStudies.Length == 0)
            navigation.NavigateTo("Studies");
        else
        {
            // First navigation to Dashboard creates a duplicate record.
            if (_saveHistory && report.ReportId != 0)
            {
                userService.SaveActivityLog(userId, ThorActivityType.Navigation, dashboard.Name, report.Name + ((String.IsNullOrEmpty(report.SubMenuName)) ? "" : "-" + report.SubMenuName));
                previousReport = report.ReportId;
                _saveHistory = false;
            }
        }
    }
    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //}

    //// Re-render report components and hide modal
    //private async void HideFilters(List<Protocol>? selectedStudies)
    //{
    //    if (report != null)
    //    {
    //        if (!report.IsFullPage && customReportRef != null)
    //        {
    //            await customReportRef.Update();
    //        }

    //        if (report.IsFullPage && fullReportRef != null)
    //        {
    //            await fullReportRef.Update();
    //        }
    //    }
    //}

    private async void ShowOverview()
    {
        var studies = studyService.GetSelectedStudiesForUser(userId);
        studyOverview?.ShowStudies(studies);
    }

    private string getHelpUrl()
    {
        // Minimize SQL calls
        if (this.helpFileUrl == null || this.helpFileUrl.Equals(string.Empty) || currentDashboardId != this.DashboardId)
        {
            currentDashboardId = this.DashboardId;
            this.helpFileUrl = configuration.GetValue<string>("System:DashboardHelpURL");
            var helpFileName = this.dashboardService.GetDashboardHelpFileName(this.DashboardId).Result;
            if (!helpFileName.Equals(string.Empty))
            {
                this.helpFileFound = true;
            }
            else
            {
                this.helpFileFound = false;
                helpFileName = configuration.GetValue<string>("System:DashboardHelpURLDefault");
            }
            this.helpFileUrl += helpFileName;
            this.helpFileUrl = string.Format("javascript:void(window.open('" + this.helpFileUrl + "','_blank'));");
        }

        return this.helpFileUrl;
    }
}