@attribute [Route(WrConstants.DASHBOARD_PAGE_PATH + "/{dashboardid:int}/{reportid:int?}")]
@layout SecondaryNavLayout

@using System.Net.Http
@using System.Threading.Tasks
@using TheradexPortal.Data;
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.PowerBI;
@using TheradexPortal.Data.Services;
@using TheradexPortal.Data.ViewModels;

@if(notFound)
{
    <LayoutContent>
        <Container Fluid Class="mt-2 text-center">
            <NotFound />
        </Container>
    </LayoutContent>
}
else
{
    <PageTitle>@dashboard!.Name</PageTitle>
    <LayoutSider>
        <SecondaryNav Actions="Actions" Reports="allReports" />
    </LayoutSider>
    <LayoutContent>
        <Container Fluid Class="mt-2">
            @if(report != null && report.Is_Full_Page)
            {
                <PowerBiFullReport Dashboard="dashboard" Report="report" @ref="fullReportRef" />
            }
            else if(report != null)
            {
                <PowerBiCustomLayout Dashboard="dashboard" Report="report" @ref="customReportRef" />
            }
        </Container>
    </LayoutContent>
}

<Modal @ref="modalRef">
    <ModalContent Centered Size="ModalSize.ExtraLarge">
        <ModalBody>
            <StudyGrid OnSave="@HideFilters"/>
        </ModalBody>
    </ModalContent>
</Modal>


@code {
    [Inject] private DashboardService dashboardService { get; set; } = null!;
    [Inject] private NavigationManager navigation {get; set; } = null!;

    [Parameter] public int DashboardId { get; set; }
    [Parameter] public int ReportId { get; set; }

    private bool notFound = false;
    private Modal? modalRef;
    private PowerBiCustomLayout? customReportRef;
    private PowerBiFullReport? fullReportRef;

    private TheradexPortal.Data.Models.Dashboard? dashboard;
    private IList<Report> allReports = new List<Report>();
    private Report? report;

    private IList<SecondaryNavAction> Actions => new List<SecondaryNavAction>
    {
        new SecondaryNavAction
        {
            IconName = IconName.Filter,
            Label = "Filters",
            OnClick = ShowFilters
        }
    };

    protected override async Task OnParametersSetAsync()
    {
        notFound = false;
        dashboard = await dashboardService.GetDashboardByIdAsync(DashboardId);
        if(dashboard == null)
        {
            notFound = true;
            return;
        }

        allReports = await dashboardService.GetAllReportsByDashboardIdAsync(DashboardId);

        if (ReportId == 0)
        {
            report = allReports.FirstOrDefault();
            if(report == null)
            {
                notFound = true;
                return;
            }
            navigation.NavigateTo($"{WrConstants.DASHBOARD_PAGE_PATH}/{dashboard.WRDashboardId}/{report.WRReportId}", new NavigationOptions
            {
                ReplaceHistoryEntry = true
            });
        }
        else
        {
            report = allReports.FirstOrDefault(r => r.WRReportId == ReportId);
            if (report == null)
            {
                notFound = true;
                return;
            }
        }
    }

    // Show modal
    private async void ShowFilters()
    {
        if (modalRef != null)
        {
            await modalRef.Show();
        }

    }

    // Re-render report components and hide modal
    private async void HideFilters(List<Protocol>? selectedStudies)
    {
        if (report != null)
        {
            if (!report.Is_Full_Page && customReportRef != null)
            {
                await customReportRef.Update();
            }

            if (report.Is_Full_Page && fullReportRef != null)
            {
                await fullReportRef.Update();
            }
        }

        if(modalRef != null)
        {
            await modalRef.Hide();
        }
    }
}