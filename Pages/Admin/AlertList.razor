@using System.Diagnostics.CodeAnalysis
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services;
@using TheradexPortal.Data.Static;
@using TheradexPortal.Data.Services.Abstract;
@inject IHttpContextAccessor httpContextAccessor
@layout AdminLayout

@page "/admin/alerts"
<AdminRoleCheck AllowedRoles="@(new List<string> { "Super", "Content" })"></AdminRoleCheck>
<Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1"><h2>Alert List</h2></Div>
<Row Background="Background.Light">
    <Column ColumnSize="ColumnSize.IsFull">
        <DataGrid TItem="WRAlert"
                  Class="admindatagrid"
                  Data="@alertList"
                  Responsive
                  Sortable
                  Filterable
                  Striped
                  ShowPager
                  FixedHeader
                  FixedHeaderDataGridHeight="calc(100vh - 240px)"
                  FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
                  PageSize="25"
                  CommandMode="DataGridCommandMode.ButtonRow">
            <DataGridColumns>
                <DataGridMultiSelectColumn Width="30px"> </DataGridMultiSelectColumn>
                <DataGridCommandColumn />
                <DataGridColumn Field="@nameof(WRAlert.AlertType)" Caption="Type" />
                <DataGridColumn Field="@nameof(WRAlert.PageName)" Caption="Page">
                    <DisplayTemplate>
                        @{
                            var alert = (context as WRAlert);
                            if (alert != null)
                            {
                                if (alert.DashboardId != null && alert.PageName.Equals(pageDashboard))
                                {
                                    var dashboard = dashboards.FirstOrDefault(d => d.WRDashboardId == alert.DashboardId);
                                    if (dashboard != null)
                                    {
                                        @(dashboard.Name + " ");
                                    }
                                }
                                @(alert.PageName)
                            }
                        }
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn Field="@nameof(WRAlert.AlertText)" Caption="Text" />
                <DataGridColumn Field="@nameof(WRAlert.StartDate)" Caption="Start Date" />
                <DataGridColumn Field="@nameof(WRAlert.EndDate)" Caption="End Date" />
                <DataGridSelectColumn TItem="WRAlert" Field="@nameof(WRAlert.IsActive)" Caption="Active" Width="125px">
                    <DisplayTemplate>
                        @{
                            var alert = (context as WRAlert);
                            var dateTime = DateTime.Now;
                            var isActive = alert?.IsActive ?? false;
                            if (isActive)
                            {
                                @("Yes")
                            }
                            else
                            {
                                @("No")
                            }
                        }
                    </DisplayTemplate>
                </DataGridSelectColumn>
                <DataGridColumn Sortable="false" Filterable="false" Width="75px">
                    <DisplayTemplate>
                        <Button Color="Color.Info" Clicked="@(()=>EditAlertClick(context as WRAlert))">
                            Edit
                        </Button>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn Sortable="false" Filterable="false" Width="125px">
                    <DisplayTemplate>
                        <Button Color="Color.Danger" Clicked="@(()=>ShowDeactivateModal(context as WRAlert))"
                                Visibility="@IsDeactivatable(context as WRAlert)">
                            Deactivate
                        </Button>
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
            <ButtonRowTemplate>
                <Button Color="Color.Primary" Clicked="@NewAlertClick">Create Alert</Button>
            </ButtonRowTemplate>
        </DataGrid>
    </Column>
</Row>
<Modal @ref="deactivateModalRef">
    <ModalContent Centered>
        <ModalHeader Background="Background.Primary">
            <ModalTitle>Deactivate Alert: @alertToDeactivate</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Alert Color="@currentColor" Visible>
                <AlertDescription TextOverflow="TextOverflow.Wrap">@((MarkupString)@alertToDeactivateText)</AlertDescription>
            </Alert>
            Warning:  Continuing will make this alert inactive
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Danger" Clicked="@DeactivateAlertClick">Deactivate</Button>
            <Button Color="Color.Light" Clicked="@HideModal">Cancel</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

    @code {
    [Inject] IAlertService alertService { get; set; } = null!;
    [Inject] IDashboardService dashboardService { get; set; } = null!;
    [Inject] INotificationService NotificationService { get; set; }
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [AllowNull] private Modal deactivateModalRef;

    private IList<WRAlert> alertList = new List<WRAlert>();
    private IList<WRAlert> displayedAlertList = new List<WRAlert>();
    private IList<Dashboard> dashboards = new List<Dashboard>();
    private string alertToDeactivate = string.Empty;
    private string alertToDeactivateText = string.Empty;
    private string pageDashboard = string.Empty;
    private string typeAlert = string.Empty;
    private string typeNote = string.Empty;
    private int alertToDeactivateId;
    private Color? alertColor;
    private Color? noteColor;
    private Color? infoColor;
    private Color? currentColor;

    private string[] allowedRoleList;

    protected override async Task OnInitializedAsync()
    {
        this.alertList = await alertService.GetAllWRAlertsAsync();
        pageDashboard = await alertService.DashboardPage();

        bool isAdmin = httpContextAccessor.HttpContext.User.HasClaim(WRClaimType.IsAdmin, "True");
        int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(WRClaimType.UserId).Value);

        dashboards = await dashboardService.GetDashboardsForUserAsync(userId, isAdmin);

        this.RetrieveAlertColorValues();

        allowedRoleList = new string[1] { "Content" };
    }

    private Visibility IsDeactivatable(WRAlert a)
    {
        if (a.IsActive)
            return Visibility.Visible;
        else
            return Visibility.Invisible;
    }

    private async void NewAlertClick()
    {
        navigation.NavigateTo("/admin/alert");
    }

    private async void EditAlertClick(WRAlert a)
    {
        navigation.NavigateTo($"/admin/alert/{a.WRAlertId}");
    }

    private Task ShowDeactivateModal(WRAlert a)
    {
        if (a.AlertType.Equals(typeAlert))
        {
            currentColor = alertColor;
        }
        else if (a.AlertType.Equals(typeNote))
        {
            currentColor = noteColor;
        }

        alertToDeactivate = a.AlertType + " " + a.PageName;
        alertToDeactivateText = a.AlertText;
        alertToDeactivateId = a.WRAlertId;
        return deactivateModalRef.Show();
    }

    private Task HideModal()
    {
        return deactivateModalRef.Hide();
    }

    private async void DeactivateAlertClick()
    {
        deactivateModalRef.Hide();
        bool success = alertService.DeactivateAlert(alertToDeactivateId);
        if (success)
        {
            await NotificationService.Success("User deactivated");
        }
        else
        {
            await NotificationService.Error("Error deactivating user");
        }
    }

    private async void RetrieveAlertColorValues()
    {
        this.typeAlert = await alertService.AlertType();
        this.typeNote = await alertService.NoteType();
        this.alertColor = await alertService.AlertColor();
        this.noteColor = await alertService.NoteColor();
        this.infoColor = await alertService.InfoColor();
        this.currentColor = this.alertColor;
    }
}
