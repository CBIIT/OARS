@using System.Diagnostics.CodeAnalysis
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@using TheradexPortal.Data.Models.Configuration;
@using Microsoft.Extensions.Options;
@inject IOptions<EmailSettings> emailSettings;
@inject IHttpContextAccessor httpContextAccessor
@layout AdminLayout

@page "/admin/reviewitem/{reviewitemid:int?}"
<AdminRoleCheck AllowedRoles="@(new List<string> { "IT", "Biz" })"></AdminRoleCheck>
<Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1 mb-3"><h2>@AddOrEdit</h2></Div>
<Steps @ref="stepsRef" SelectedStep="@selectedStep" SelectedStepChanged="@OnSelectedStepChanged" NavigationAllowed="NavigationAllowed">
    <Items>
        <Step Name="step1">Review Item info</Step>
        <Step Name="step2">
            <Marker>
                <Icon Name="IconName.Flag" />
            </Marker>
            <Caption>
                Review & Save
            </Caption>
        </Step>
    </Items>
    <Content>
        <StepPanel Name="step1">
            <h4>Review Item</h4>
            <Divider />
            <Div Flex="Flex.AlignItems.Start" Margin="Margin.Is3.FromBottom" Background="Background.Light">
                <Div Padding="Padding.Is4" Style="@flexContainerStyle">
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Review Item Name</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is6">
                            <TextEdit Placeholder="Item Name" MaxLength="500" Text="@itemName" TextChanged="@OnReviewItemNameChanged" />
                        </FieldBody>
                    </Field>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">MO or PI Select</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is6">
                            <RadioGroup TValue="string" CheckedValue="@itemType" CheckedValueChanged="@OnItemTypeValueChanged">
                                <Radio Value="@("MO")">MO</Radio>
                                <Radio Value="@("PI")">PI</Radio>
                            </RadioGroup>
                        </FieldBody>
                    </Field>
                </Div>
                <Div Padding="Padding.Is4" Style="@flexContainerStyle">
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Is Active</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is6">
                            <Switch TValue="bool" Checked="@isActive" CheckedChanged="@OnActiveChanged"></Switch>
                        </FieldBody>
                    </Field>
                </Div>
            </Div>
        </StepPanel>
        <StepPanel Name="step2">
            <h4>Review and Save</h4>
            <Divider/>
            <Div Flex="Flex.AlignItems.Start" Margin="Margin.Is3.FromBottom" Background="Background.Light">
                <Div Padding="Padding.Is2" Style="@flexContainerStyle">
                    <h5>Review Item Info</h5>
                    <Table Narrow>              
                        <TableBody>
                            <TableRow>
                                <TableRowHeader>Review Item Name</TableRowHeader>
                                <TableRowCell>@itemName</TableRowCell>
                                <TableRowCell>
                                    <Span TextColor="TextColor.Danger">
                                        @{
                                            if (itemName == "")
                                            { @("Required") }
                                            else
                                            { @("") }
                                        }
                                    </Span>
                                </TableRowCell>
                                <TableRowHeader>Is Active</TableRowHeader>
                                <TableRowCell>
                                    @{
                                        if (isActive)
                                        {
                                            @("Yes")
                                        }
                                        else
                                        {
                                            @("No")
                                        }
                                    }
                                </TableRowCell>
                                <TableRowCell></TableRowCell>
                            </TableRow>
                        </TableBody>
                    </Table>                   
                </Div>
            </Div>
        </StepPanel>
    </Content>
</Steps>
<Divider />
<Div Display="Display.Flex" Class="justify-content-center pe-5">
    <Button Color="Color.Light" Display="Display.Block" Clicked="@Cancel">Cancel</Button>
    <Div Class="pe-2"></Div>
    <Button Color="Color.Primary" Display="@displayPrev" Clicked="() => stepsRef.PreviousStep()"> Previous</Button>
    <Div Class="pe-2" Display="displayPrev"></Div>
    <Button Color="Color.Primary" Display="@displayNext" Clicked="() => stepsRef.NextStep()">Next</Button>
    <Button Color="Color.Danger" Display="@displaySave" Clicked="@Save">Save Review Item</Button>
</Div>
@code {
    [Inject] IUserService userService { get; set; } = null!;
    [Inject] IUserRoleService userRoleService { get; set; } = null!;
    [Inject] IStudyService studyService { get; set; } = null!;
    [Inject] IGroupService groupService { get; set; } = null!;
    [Inject] INotificationService NotificationService { get; set; }
    [Inject]  NavigationManager navigation {get; set; } = null!;
    [Inject] IOktaService oktaService { get; set; } = null!;
    [Inject] IConfiguration configuration { get; set; } = null!;
    [Inject] IEmailService emailService { get; set; } = null!;
    [Inject] IReviewItemService reviewItemService { get; set; } = null!;
    [Parameter] public int? ReviewItemId { get; set; }

    // All steps
    public string AddOrEdit { get; set; }
    private ReviewItem editReviewItem;
    string selectedStep = "step1";
    [AllowNull] private Steps stepsRef;
    IFluentDisplay displayPrev = Display.None;
    IFluentDisplay displayNext = Display.Block;
    IFluentDisplay displaySave = Display.None;
    string flexContainerStyle = $"width:50%;";
    string flexItemStylePrimRole = $"width:300px;";
    string flexItemStyleSecRole = $"width:340px;";
    string flexItemStyleSecRole2 = $"width:600px;";
    string flexItemStyleProts = $"width:300px;";
    string flexItemStyleProtsGrid = $"width:500px;";
    string flexItemStyleSpacer = $"width:1px;background-color: gray;";

    // Step 1 vars (User Info)
    string itemName = "";
    string itemType = "PI";
    bool isActive = true;
    bool activeChanged = false;
    bool isAdmin = false;
    bool userInfoChanged = false;
    bool ctepChanged = false;

    //  Protocol vars
    int studySelectionType = 2;
    List<Group> allGroups;
    IList<Protocol> protocolsAvailable;
    IReadOnlyList<string> availableSelected { get; set; }
    IList<UserProtocol> selectedUserProtocolList = new List<UserProtocol>();
    private UserProtocol selectedUserProtocol;
    List<UserProtocol> selectedUserProtocols { get; set; }
    // Group vars
    IList<Group> groupsAvailable;
    IReadOnlyList<int> availableGroupsSelected { get; set; }
    IList<UserGroup> selectedUserGroupList = new List<UserGroup>();
    private UserGroup selectedUserGroup;
    List<UserGroup> selectedUserGroups { get; set; }
    User loggedinUser;
    private int loginUserId;
    bool loggedinUserIsITAdmin = false;
    bool newItem = false;

    protected override async Task OnInitializedAsync()
    {
        if (ReviewItemId == null )
        {
            AddOrEdit = "Create Review Item";
            newItem = true;
        }
        else
        {
            AddOrEdit = "Edit Review Item";
            editReviewItem = await reviewItemService.GetReviewItemByIdAsync(ReviewItemId);
            itemName = editReviewItem.ReviewItemName;
            itemType = editReviewItem.ReviewType;
            isActive = (editReviewItem.IsActive == 'T') ? true : false;
        }

        protocolsAvailable = (await studyService.GetAllProtocolsAsync()).OrderBy(p=>p.StudyId).ToList();
        groupsAvailable = (await groupService.GetAllGroupsAsync()).OrderBy(g => g.GroupName).ToList();
        allGroups = (await groupService.GetAllGroupsAsync()).OrderBy(g => g.GroupName).ToList();

        loginUserId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
        loggedinUser = await userService.GetUserAsync(loginUserId);
        loggedinUserIsITAdmin = loggedinUser.UserRoles.FirstOrDefault(r => r.Role.IsPrimary && r.Role.AdminType == ThorAdminType.IT) != null;

        userService.SaveActivityLog(loginUserId, ThorActivityType.Navigation, "User", AddOrEdit);
    }

    private Task OnItemTypeValueChanged(string value)
    {
        itemType = value;
        return Task.CompletedTask;
    }

    private Task OnSelectedStepChanged( string name )
    {
        selectedStep = name;

        // Navigation buttons
        if (stepsRef.SelectedStep == "step1")
        {
            displayPrev = Display.None;
            displayNext = Display.Block;
            displaySave = Display.None;
        }
        else
        {
            displayPrev = Display.Block;
            displayNext = Display.None;
            displaySave = Display.Block;
        }

        return Task.CompletedTask;
    }

    private bool NavigationAllowed( StepNavigationContext context )
    {
        return true;
    }

    private DateTime? ExpirationDate()
    {
        return selectedUserProtocol.ExpirationDate ;
    }

    private async void Save()
    {
        if (itemName == "")
        {
            await NotificationService.Error( "Please fix all errors to save.");
            return;
        }

        // Check for duplicate review Item
        //if (!userService.CheckEmailAddress(email, (int)(ReviewItemId != null ? ReviewItemId : 0)))
        //{
        //    await NotificationService.Error( "Email Address already exists.");
        //    return;
        //}

        bool saved = false;
        DateTime currentDateTime = DateTime.UtcNow;

        // Step 1 - user info
        ReviewItem saveItem = new ReviewItem();
        //if (ReviewItemId != null)
        //    saveUser.ReviewItemId = (int)ReviewItemId;
        saveItem.ReviewItemName = itemName;
        saveItem.IsActive = (isActive == true) ? 'T' : 'F';
        saveItem.ReviewType = itemType;
        saveItem.UpdateDate = currentDateTime;
        if (!newItem)
        {
            saveItem.ReviewItemId = (int)ReviewItemId!;
        }
        else
        {
            saveItem.ReviewItemId = -1;
            saveItem.CreateDate = currentDateTime;
        }

        saved = await reviewItemService.SaveReviewItemAsync(loginUserId, saveItem);

        // Try to create or update the OKTA user
        bool oktaSuccess = true;
        bool oktaGroupSuccess = true;
        bool emailSuccess = true;

        if (saved)
        {
            await NotificationService.Success( "Review Item successfully saved");
            navigation.NavigateTo("/admin/review-item");
        }
        else
        {
            await NotificationService.Error( "Error saving review item");
            navigation.NavigateTo("/admin/review-item");
        }
    }

    private void Cancel()
    {
        navigation.NavigateTo("/admin/review-item");
    }

    private void OnHelpClicked()
    {

    }

    Task OnReviewItemNameChanged(string text)
    {
        itemName = text;
        userInfoChanged = true;

        return Task.CompletedTask;
    }

    Task OnActiveChanged(bool value)
    {
        isActive = value;
        activeChanged = true;

        return Task.CompletedTask;        
    }

    private bool emailRegexIsValid(string emailAddress)
    {
        return System.Text.RegularExpressions.Regex.IsMatch(emailAddress, @"^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$", 
            System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    }

    private bool isDuplicateEmail(string emailAddress, int userId)
    {
        return userService.CheckEmailAddress(emailAddress, userId);
    }
}
