@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@inject IHttpContextAccessor httpContextAccessor
@inject IConfiguration configuration
@layout AdminLayout
@page "/admin/dmu/form-field-mapping/{categoryId}"
<AdminRoleCheck AllowedRoles="@(new List<string> { "IT" })"></AdminRoleCheck>
<Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1"><h2>DMU Mapping</h2></Div>
@* add complete/incomplete toggle, single/multi toggle
    should have two separate components that are switched between depending on the toggle
    if category is single form, show single form component, if category is multi form, show multi form component
    in single form view, only allow multi form fields to be added more than once (don't worry about this right now but just to keep a note of it)
    single form is what's here now, multi form will have a datagrid foreach form that uses the same category + fields in another ref obj
*@
<Row Background="Background.Light" Style="padding-bottom:10px;">
    <Row>
        <Text><b>Protocol:</b> @protocol</Text>
    </Row>
    <Row>
        <Text><b>Report Category:</b> @currCategory.CategoryName</Text>
    </Row>
</Row>
@if (!isMultiForm)
{
    <DataGrid @ref=dataGridRef
              TItem="ProtocolFieldMapping"
              Class="admindatagrid"
              Data="@protocolFieldMappingList"
              Editable
              Responsive
              Striped
              ShowPager
              ShowPageSizes
              MaxPaginationLinks="5"
              PagerPosition="DataGridPagerPosition.Bottom"
              PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
              FixedHeader
              FixedHeaderDataGridHeight="calc(100vh - 240px)"
              FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
              EditMode="DataGridEditMode.Inline"
              RowUpdated="@Save"
              RowInserted="@Save"
              RowRemoved="@Delete"
              RowRemoving="@ConfirmDelete">
        <DataGridColumns>
            <DataGridColumn Field="@nameof(ProtocolFieldMapping.ThorFieldId)" Width="33%" Caption="Select OARS Field" Editable="true">
                <DisplayTemplate>
                    <Text>@GetThorFieldLabel(context)</Text>
                </DisplayTemplate>
                <EditTemplate>
                    <Text>@GetThorFieldLabel(context.Item)</Text>
                  </EditTemplate>
            </DataGridColumn>
            <DataGridColumn Field="@nameof(ProtocolFieldMapping.ProtocolEDCFormId)" Width="33%" Caption="Select EDC Form" Filterable="true" Editable="true">
                <DisplayTemplate>
                    @{
                        if (context.ProtocolEDCFormId != null && context.ProtocolEDCFormId != 0)
                        {
                            <Text>@protocolEDCFormList.First(x => x.ProtocolEDCFormId == context.ProtocolEDCFormId).EDCFormIdentifier</Text>
                        }
                        else
                        {
                            <Text>@context.ProtocolEDCField.ProtocolEDCForm.EDCFormIdentifier</Text>
                        }
                    }
                </DisplayTemplate>
                <EditTemplate>
                    <Autocomplete TItem="ProtocolEDCForm" Data="@protocolEDCFormList" TValue="int" TextField="@((item) => item.EDCFormIdentifier)" ValueField="@((item) => item.ProtocolEDCFormId)" SelectedValueChanged="@(e => {@GetFields(e); context.CellValue=e;})" SelectedValue="@(context.Item.ProtocolEDCFormId)" Placeholder="@(GetPlaceholder(context.Item))" Virtualize></Autocomplete>
                </EditTemplate>
            </DataGridColumn>
            <DataGridColumn Field="@nameof(ProtocolFieldMapping.ProtocolEDCFieldId)" Width="30%" Caption="Select EDC Field" Editable="true">
                <DisplayTemplate>
                    @{
                        if (context.ProtocolEDCFieldId != null && context.ProtocolEDCFieldId != 0 && context.ProtocolEDCField == null)
                        {
                            var currentField = protocolEDCFieldList.First(x => x.ProtocolEDCFieldId == context.ProtocolEDCFieldId);
                            <Text>@(currentField.EDCFieldIdentifier + " - " + currentField.EDCFieldName)</Text>
                        }
                        else
                        {
                            <Text>@context.ProtocolEDCField.EDCFieldIdentifier</Text>
                        }
                    }
                </DisplayTemplate>
                <EditTemplate>
                    <SelectList TItem="ProtocolEDCField" TValue="int" Data="@protocolEDCFieldList" TextField="@((item)=>item.EDCFieldIdentifier + " - " + item.EDCFieldName)"
                                ValueField="@((item) => item.ProtocolEDCFieldId)"
                                SelectedValueChanged="@( v =>{context.CellValue = v;})"
                                SelectedValue="@((int?)context.CellValue ?? context.Item.ProtocolEDCFieldId)"
                                DefaultItemText="Select"></SelectList>
                </EditTemplate>
            </DataGridColumn> @* add additional columns that enable Dictionary Mapping if the field has a dictionary associated and multi form field ADD button if field is multi form
        add button adds new mapping to ref list, then refreshes the grid
        *@
            <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="true">
                <SaveCommandTemplate>
                    <Button><Icon Name="IconName.Save" Clicked="@context.Clicked" /></Button>
                </SaveCommandTemplate>
                <EditCommandTemplate>
                    <Button><Icon Name="IconName.Edit" Clicked="@context.Clicked" /></Button>
                </EditCommandTemplate>
                <DeleteCommandTemplate>
                    <Button><Icon Name="IconName.Delete" Clicked="@context.Clicked" /></Button>
                </DeleteCommandTemplate>
                <CancelCommandTemplate>
                    <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
                </CancelCommandTemplate>
            </DataGridCommandColumn>
            <DataGridColumn Field="ThorField.ThorDictionaryId">
                <DisplayTemplate>
                   @if(context.ThorField.ThorDictionaryId != null)
				   {
					   <Button Color="Color.Link" Clicked="@EditDictionaryMapping">Edit</Button>
				   }
                   else{
                       <Text>N/A</Text>
                   }
                </DisplayTemplate>
            </DataGridColumn>
        </DataGridColumns>
        <ButtonRowTemplate>
            <Button Color="Color.Primary" Clicked="@context.NewCommand.Clicked">Add</Button>
        </ButtonRowTemplate>
        <EmptyTemplate>
            <div class="box">
                No multi-form field mappings found.
            </div>
        </EmptyTemplate>
    </DataGrid>
}
else{
    <Row>
        @if (currCategory.IsMultiForm) // this should only show up on multi form view
        {
            <SelectList TItem="ProtocolEDCForm" Data="@protocolEDCFormList" TValue="int" ValueField="@((item) => item.ProtocolEDCFormId)" TextField="@((item) => item.EDCFormName)" SelectedValue="@((int) currCategory.PrimaryFormId)" SelectedValueChanged="@(v=>UpdatePrimaryForm(v))" DefaultItemText="Select a primary form" DefaultItemValue="0"></SelectList>
        }
    </Row>
}




@code {
    [Inject] IProtocolEDCFormService protocolEDCFormService { get; set; } = null!;
    [Inject] IProtocolEDCFieldService protocolEDCFieldService { get; set; } = null!;
    [Inject] IThorCategoryService thorCategoryService { get; set; } = null!;
    [Inject] IThorFieldService thorFieldService { get; set; } = null!;
    [Inject] IProtocolFieldMappingService protocolFieldMappingService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] INotificationService notificationService { get; set; }
    [Inject] private IMessageService messageService { get; set; } = null!;

    [Parameter] public string categoryId { get; set; }
    [SupplyParameterFromQuery][Parameter] public string protocol { get; set; }

    private DataGrid<ProtocolFieldMapping> dataGridRef;
    private IList<ProtocolFieldMapping> protocolFieldMappingList;
    private IList<ProtocolEDCForm> protocolEDCFormList;
    private IList<ProtocolEDCField> protocolEDCFieldList;
    private IList<ThorField> thorFieldList;
    private ThorCategory currCategory;
    private bool isMultiForm;

    protected override async Task OnInitializedAsync()
    {
        this.protocolFieldMappingList = await protocolFieldMappingService.GetProtocolFieldMappingsForCategory(categoryId);
        this.protocolEDCFormList = await protocolEDCFormService.GetProtocolEDCForms();
        this.thorFieldList = await thorFieldService.GetFields(categoryId);
        this.currCategory = await thorCategoryService.GetCategory(categoryId);
    }

    public async void GetFields(int formId)
    {
        this.protocolEDCFieldList = await protocolEDCFieldService.GetFieldsByFormIds(new List<int> { formId });
    }

    public async void Save(SavedRowItem<ProtocolFieldMapping, Dictionary<string, object>> savedRowItem)
    {
        var toSave = savedRowItem.Item;

        bool saved = await protocolFieldMappingService.SaveProtocolFieldMapping(toSave);

        if (saved)
        {
            await notificationService.Success("Mapping successfully saved");
            return;
        }
        else
        {
            await notificationService.Error("Error saving mapping");
            return;
        }
    }

    private string GetPlaceholder(ProtocolFieldMapping item)
    {
        if (item.ProtocolEDCFormId == 0 && item.ProtocolEDCField == null)
        {
            return "Start typing to select an EDC form";
        }
        else if (item.ProtocolEDCFormId != 0 && item.ProtocolEDCField == null)
        {
            return protocolEDCFormList.First(x => x.ProtocolEDCFormId == item.ProtocolEDCFormId).EDCFormIdentifier;
        }
        return item.ProtocolEDCField.ProtocolEDCForm.EDCFormIdentifier;
    }

    public string GetThorFieldLabel(ProtocolFieldMapping item)
    {
        if (item.ThorFieldId != null && item.ThorFieldId != "")
        {
            return thorFieldList.First(x => x.ThorFieldId == item.ThorFieldId).FieldLabel;
        }
        else
        {
            return item.ThorField.FieldLabel;
        }
	}

    public async Task<CancellableRowChange<ProtocolFieldMapping>> ConfirmDelete(CancellableRowChange<ProtocolFieldMapping> item)
    {
        if (!await messageService.Confirm("Are you sure you want to delete this mapping?", "Confirmation"))
        {
            item.Cancel = true;
        }

        return item;
    }


    public async void Delete(ProtocolFieldMapping item)
    {
        bool deleted = await protocolFieldMappingService.DeleteProtocolFieldMapping(item);
        if (deleted)
        {
            await notificationService.Success("Mapping successfully deleted");
            return;
        }
        else
        {
            await notificationService.Error("Error deleting mapping");
            return;
        }
    }

    public async void UpdatePrimaryForm(int formId)
	{
        currCategory.PrimaryFormId = formId;
		bool saved = await thorCategoryService.SaveCategory(currCategory);
		if (saved)
		{
			await notificationService.Success("Primary form updated");
			return;
		}
		else
		{
			await notificationService.Error("Error updating primary form");
			return;
		}
	}

    public async void EditDictionaryMapping()
	{
		navigation.NavigateTo($"/admin/dmu/dictionary-mapping/{categoryId}"); // double check this
	}
}