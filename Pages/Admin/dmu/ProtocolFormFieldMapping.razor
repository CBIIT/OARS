@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@inject IHttpContextAccessor httpContextAccessor
@inject IConfiguration configuration
@layout AdminLayout
@page "/admin/dmu/form-field-mapping/{protocolCategoryId:int}"
<AdminRoleCheck AllowedRoles="@(new List<string> { "IT" })" AllowedTHORRoles="@(new List<string> { "DMU Study Mapping", "DMU Study Admin", "DMU Global Admin" })"></AdminRoleCheck>
<Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1"><h2>DMU Mapping</h2></Div>
<Row Background="Background.Light" Style="padding-bottom:10px;">
    <Row style="padding-top:10px">
        <Column ColumnSize="ColumnSize.Is1">
            <Button Clicked="@Back" Color="Color.Primary"><Icon Name="IconName.ArrowLeft" /> Back</Button>
        </Column>
        <Column>
            <Text><b>Protocol:</b> @protocol</Text>
        </Column>
        <Column>
            <Switch TValue="bool" Checked="@this.isComplete" CheckedChanged="@((v) => {this.isComplete = v; CompleteMapping();})">Mapping Complete</Switch>
        </Column>

    </Row>
    <Row>
        <Column ColumnSize="ColumnSize.Is1"></Column>
        <Column>
            <Text><b>Report Category:</b> @currCategory.CategoryName</Text>
        </Column>
        <Column>
            <Switch TValue="bool" Checked="@protocolCategory.IsMultiForm" CheckedChanged="@((v) => UpdateCategory(v))">Multi Form</Switch>
        </Column>
    </Row>
</Row>
@if (!protocolCategory.IsMultiForm)
{
    <DataGrid @ref=dataGridRef
              TItem="ProtocolFieldMapping"
              Class="admindatagrid"
              Data="@protocolFieldMappingList"
              Editable
              Responsive
              Striped
              ShowPager
              ShowPageSizes
              MaxPaginationLinks="5"
              PagerPosition="DataGridPagerPosition.Bottom"
              PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
              FixedHeader
              FixedHeaderDataGridHeight="calc(100vh - 240px)"
              FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
              EditMode="DataGridEditMode.Inline"
              RowUpdated="@Save"
              RowInserted="@Save"
              RowRemoved="@Delete"
              RowRemoving="@ConfirmDelete"
              SortMode="DataGridSortMode.Multiple">
        <DataGridColumns>
            <DataGridColumn Field="@nameof(ProtocolFieldMapping.ThorFieldId)" Width="25%" Caption="Select OARS Field" Editable="true" SortDirection="SortDirection.Ascending" Sortable>
                <DisplayTemplate>
                    <Text>@GetThorFieldLabel(context)</Text>
                </DisplayTemplate>
                <EditTemplate>
                    <Text>@GetThorFieldLabel(context.Item)</Text>
                  </EditTemplate>
            </DataGridColumn>
            <DataGridColumn Field="@nameof(ProtocolFieldMapping.ProtocolEDCFormId)" Width="25%" Caption="Select EDC Form" Filterable="true" Editable="true" SortDirection="SortDirection.Ascending" Sortable>
                <DisplayTemplate>
                    @{
                        if (context.ProtocolEDCFormId != null && context.ProtocolEDCFormId != 0)
                        {
                            var currForm = protocolEDCFormList.FirstOrDefault(x => x.ProtocolEDCFormId == context.ProtocolEDCFormId);
                            if (currForm != null)
                            {
                                <Text>@(currForm.EDCFormIdentifier + " - " + currForm.EDCFormName)</Text>
                            }
                        }
                        else if(context.ProtocolEDCFieldId != 0 && context.ProtocolEDCField != null && context.ProtocolEDCField.ProtocolEDCForm != null)
                        {
                            <Text>@(context.ProtocolEDCField.ProtocolEDCForm.EDCFormIdentifier + " - " + context.ProtocolEDCField.ProtocolEDCForm.EDCFormName)</Text>
                        } else
                        {
                            <Text>Not Mapped</Text>
                        }
                    }
                </DisplayTemplate>
                <EditTemplate>
                    <Autocomplete TItem="ProtocolEDCForm" Data="@protocolEDCFormList" TValue="int" TextField="@((item) => {return item.EDCFormIdentifier + " - " + item.EDCFormName;})" ValueField="@((item) => item.ProtocolEDCFormId)" SelectedValueChanged="@(e => {@GetFields(e); context.CellValue=e;})" SelectedValue="@((int?)context.CellValue ?? context.Item.ProtocolEDCFormId)" Placeholder="@(GetPlaceholder(context.Item))" Virtualize MinLength="0"></Autocomplete>
                </EditTemplate>
            </DataGridColumn>
            <DataGridColumn Field="@nameof(ProtocolFieldMapping.ProtocolEDCFieldId)" Width="25%" Caption="Select EDC Field" Editable="true">
                <DisplayTemplate>
                    @{
                        if (context.ProtocolEDCFieldId != null && context.ProtocolEDCFieldId != 0 && context.ProtocolEDCField == null)
                        {
                            var currentField = protocolEDCFieldList.First(x => x.ProtocolEDCFieldId == context.ProtocolEDCFieldId);
                            <Text>@(currentField.EDCFieldIdentifier + " - " + currentField.EDCFieldName)</Text>
                        }
                        else if(context.ProtocolEDCField != null && context.ProtocolEDCField.ProtocolEDCFieldId != 0)
                        {
                            <Text>@context.ProtocolEDCField.EDCFieldIdentifier</Text>
                        } else
                        {
                            <Text>Not Mapped</Text>
                        }
                    }
                </DisplayTemplate>
                <EditTemplate>
                    <SelectList TItem="ProtocolEDCField" TValue="int" Data="@protocolEDCFieldList" TextField="@((item)=>item.EDCFieldIdentifier + " - " + item.EDCFieldName)"
                                ValueField="@((item) => item.ProtocolEDCFieldId)"
                                SelectedValueChanged="@( v =>{context.CellValue = v;})"
                                SelectedValue="@((int?)context.CellValue ?? context.Item.ProtocolEDCFieldId)"
                                DefaultItemText="Select"></SelectList>
                </EditTemplate>
            </DataGridColumn>
            <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="false">
                <SaveCommandTemplate>
                    <Button><Icon Name="IconName.Save" Clicked="@context.Clicked" /></Button>
                </SaveCommandTemplate>
                <EditCommandTemplate>
                    <Button><Icon Name="IconName.Edit" Clicked="@context.Clicked" /></Button>
                </EditCommandTemplate>
                <CancelCommandTemplate>
                    <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
                </CancelCommandTemplate>
            </DataGridCommandColumn>
            <DataGridColumn Field="@nameof(ProtocolFieldMapping.ThorDictionaryId)" Caption="Dictionary Mapping">
                <DisplayTemplate>
                   @if(context.ThorField != null && context.ThorField.ThorDictionaryId != null && context.ThorField.ThorDictionaryId != 0)
				   {
                        <Button Color="Color.Primary" Clicked="@((item) => EditDictionaryMapping(context, protocolEDCFormList.FirstOrDefault(x => x.ProtocolEDCFormId == context.ProtocolEDCFormId)?.EDCFormIdentifier))" Disabled="@GetFieldMappingStatus(context)">Edit</Button>
				   }
                   else{
                       <Text>N/A</Text>
                   }
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn Field="@nameof(ProtocolFieldMapping.ThorFieldId)" Caption="Multi Form Field">
                <DisplayTemplate>
                    @if(currCategory.IsMultiForm || (context.ThorField != null && context.ThorField.IsMultiForm))
					{
						<Button Color="Color.Primary" Clicked="@(() => AddMultiFormField(context))">Add Form</Button>
					}
					else{
						<Text>N/A</Text>
					}
                </DisplayTemplate>

            </DataGridColumn>
        </DataGridColumns>
        <ButtonRowTemplate>
            <Button Color="Color.Primary" Clicked="@context.NewCommand.Clicked">Add</Button>
        </ButtonRowTemplate>
        <EmptyTemplate>
            <div class="box">
                No multi-form field mappings found.
            </div>
        </EmptyTemplate>
    </DataGrid>
}
else{
    foreach(var form in multiFormList.Select((x,i) => new { Form = x, Index = i+1 })){
        <Row>
            <Column><b>Form @form.Index: @form.Form.ProtocolEDCForm.EDCFormIdentifier - @form.Form.ProtocolEDCForm.EDCFormName</b><SelectList TItem="ProtocolEDCForm" Data="@protocolEDCFormList" TValue="int" ValueField="@((item) => item.ProtocolEDCFormId)" TextField="@((item) => item.EDCFormIdentifier + " - " + item.EDCFormName)" SelectedValue="@(form.Form.ProtocolEDCFormId ?? 0)" SelectedValueChanged="@(v=> { form.Form.ProtocolEDCFormId = v; UpdateFields(v, form.Form.ProtocolFormMappingId); this.protocolFormMappingService.SaveProtocolFormMapping(form.Form);})" DefaultItemText="Select a Form" DefaultItemValue="0"></SelectList></Column>
            <Column><Switch TValue="bool" Checked="@form.Form.IsPrimaryForm" CheckedChanged="@((v) => {UpdatePrimaryForm(v, form.Form);})">Primary Form</Switch></Column>
        </Row>
		<DataGrid @ref=multiFormRefs[form.Form.ProtocolFormMappingId]
			  TItem="ProtocolFieldMapping"
			  Class="admindatagrid"
			  Data="@multiFormMappings[form.Form.ProtocolFormMappingId]"
			  Editable
			  Responsive
			  Striped
			  ShowPager
			  ShowPageSizes
			  MaxPaginationLinks="5"
			  PagerPosition="DataGridPagerPosition.Bottom"
			  PagerOptions="new(){ButtonSize=Size.Default,
								PaginationPosition=PagerElementPosition.Default,
								TotalItemsPosition=PagerElementPosition.End,
								}"
			  FixedHeader
			  EditMode="DataGridEditMode.Inline"
			  RowUpdated="@Save"
			  RowInserted="@Save"
			  RowRemoved="@Delete"
			  RowRemoving="@ConfirmDelete">
		<DataGridColumns>
			<DataGridColumn Field="@nameof(ProtocolFieldMapping.ThorFieldId)" Width="25%" Caption="Select OARS Field" Editable="true" SortDirection="SortDirection.Ascending" Sortable>
				<DisplayTemplate>
					<Text>@GetThorFieldLabel(context)</Text>
				</DisplayTemplate>
				<EditTemplate>
					<Text>@GetThorFieldLabel(context.Item)</Text>
				  </EditTemplate>
			</DataGridColumn>
                <DataGridColumn Field="@nameof(ProtocolFieldMapping.ProtocolEDCFieldId)" Width="25%" Caption="Select EDC Field" Editable="true" Sortable>
                    <DisplayTemplate>
                        @{
                            if (context.ProtocolEDCFieldId != null && context.ProtocolEDCFieldId != 0)
                            {
                                var currentField = edcFieldsByForm[form.Form.ProtocolFormMappingId].First(x => x.ProtocolEDCFieldId == context.ProtocolEDCFieldId);
                                <Text>@(currentField.EDCFieldIdentifier + " - " + currentField.EDCFieldName)</Text>
                            }
                            else if (context.ProtocolEDCField != null && context.ProtocolEDCField.ProtocolEDCFieldId != 0)
                            {
                                <Text>@context.ProtocolEDCField.EDCFieldIdentifier</Text>
                            }
                            else
                            {
                                <Text>Not Mapped</Text>
                            }
                        }
                    </DisplayTemplate>
                    <EditTemplate>
                        <!-- TODO: Don't try to select the currently associated form. The currently associated forms are excluded from the list and displayed above each dropdown. -->
                        <SelectList TItem="ProtocolEDCField" TValue="int" Data="@edcFieldsByForm[form.Form.ProtocolFormMappingId]" TextField="@((item)=>item.EDCFieldIdentifier + " - " + item.EDCFieldName)"
                                    ValueField="@((item) => item.ProtocolEDCFieldId)"
                                    SelectedValueChanged="@( v =>{context.CellValue = v;})"
                                    SelectedValue="@((int?)context.CellValue ?? context.Item.ProtocolEDCFieldId)"
                                    DefaultItemText="Select"></SelectList>
                    </EditTemplate>
                </DataGridColumn>
                <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="false">
                    <SaveCommandTemplate>
                        <Button><Icon Name="IconName.Save" Clicked="@context.Clicked" /></Button>
                    </SaveCommandTemplate>
                    <EditCommandTemplate>
                        <Button><Icon Name="IconName.Edit" Clicked="@context.Clicked" /></Button>
                    </EditCommandTemplate>
                    <CancelCommandTemplate>
                        <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
                    </CancelCommandTemplate>
                </DataGridCommandColumn>
                <DataGridColumn Field="@nameof(ProtocolFieldMapping.ThorDictionaryId)" Caption="Dictionary Mapping">
                    <DisplayTemplate>
                        @if (context.ThorField != null && context.ThorField.ThorDictionaryId != null && context.ThorField.ThorDictionaryId != 0)
                        {
                            <Button Color="Color.Primary" Clicked="@((item) => EditDictionaryMapping(context, protocolEDCFormList.First(x => x.ProtocolEDCFormId == context.ProtocolEDCFormId).EDCFormIdentifier))" Disabled="@GetFieldMappingStatus(context)">Edit</Button>
                        }
                        else
                        {
                            <Text>N/A</Text>
                        }
                    </DisplayTemplate>
                </DataGridColumn>
        </DataGridColumns>
        </DataGrid>
    }
    <Button Color="Color.Primary" Clicked="AddForm">Add Form</Button>
}

@code {
    [Inject] IProtocolEDCFormService protocolEDCFormService { get; set; } = null!;
    [Inject] IProtocolEDCFieldService protocolEDCFieldService { get; set; } = null!;
    [Inject] IProtocolDataCategoryService protocolCategoryService { get; set; } = null!;
    [Inject] IThorCategoryService thorCategoryService { get; set; } = null!;
    // [Inject] IThorFieldService thorFieldService { get; set; } = null!;
    [Inject] IProtocolFieldService protocolFieldService { get; set; } = null!;
    [Inject] IProtocolFieldMappingService protocolFieldMappingService { get; set; } = null!;
    [Inject] IProtocolFormMappingService protocolFormMappingService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] INotificationService notificationService { get; set; }
    [Inject] private IMessageService messageService { get; set; } = null!;
    [Inject] IProtocolMappingService protocolMappingService { get; set; } = null!;

    [Parameter] public int protocolCategoryId { get; set; }
    [SupplyParameterFromQuery][Parameter] public string protocol { get; set; }
    [SupplyParameterFromQuery][Parameter] public int protocolMappingId { get; set; }

    private DataGrid<ProtocolFieldMapping> dataGridRef;
    private IList<ProtocolFieldMapping> protocolFieldMappingList;
    private IList<ProtocolEDCForm> protocolEDCFormListFull;
    private IList<ProtocolEDCForm> protocolEDCFormList;
    private IList<ProtocolEDCField> protocolEDCFieldList;
    private ProtocolDataCategory protocolCategory;
    // private IList<ThorField> thorFieldList;
    private IList<ProtocolField> protocolFields;
    private IList<ProtocolField> protocolFieldsDisabled;
    private HashSet<string> protocolFieldIdsDisabled;
    private ThorCategory currCategory;
    private bool isMultiForm;
    private bool isComplete;
    private int formIndex = 0;

    private IList<ProtocolFormMapping> multiFormList;
    private Dictionary<int, DataGrid<ProtocolFieldMapping>> multiFormRefs = new Dictionary<int, DataGrid<ProtocolFieldMapping>>();
    private Dictionary<int, IList<ProtocolFieldMapping>> multiFormMappings = new Dictionary<int, IList<ProtocolFieldMapping>>();
    private Dictionary<int, IList<ProtocolEDCField>> edcFieldsByForm = new Dictionary<int, IList<ProtocolEDCField>>();

    protected override async Task OnInitializedAsync()
    {
        var watch = System.Diagnostics.Stopwatch.StartNew();
        this.protocolCategory = await protocolCategoryService.GetCategory(protocolCategoryId);
        System.Console.WriteLine($"ProtocolFormFieldMapping - { watch.Elapsed } - GetCategory");

        watch = System.Diagnostics.Stopwatch.StartNew();
        this.isComplete = protocolCategory.ProtocolCategoryStatusId == 3;
        this.currCategory = this.protocolCategory.THORDataCategory;
        // TODO: update get fieldmapping list to limit it to the mapping configuration
        this.protocolFieldMappingList = await protocolFieldMappingService.GetProtocolFieldMappingsForCategory(protocolMappingId, currCategory.ThorDataCategoryId);
        System.Console.WriteLine($"ProtocolFormFieldMapping - {watch.Elapsed} - GetProtocolFieldMappingsForCategory");

        watch = System.Diagnostics.Stopwatch.StartNew();
        this.protocolEDCFormListFull = await protocolEDCFormService.GetFormsForMappingId(protocolMappingId);

        System.Console.WriteLine($"ProtocolFormFieldMapping - {watch.Elapsed} - GetFormsForMappingId");

        // this.thorFieldList = await thorFieldService.GetFields(currCategory.ThorDataCategoryId);
        watch = System.Diagnostics.Stopwatch.StartNew();
        this.protocolFields = await protocolFieldService.GetAllProtocolFieldsByMappingIdForMapping(protocolMappingId, currCategory.ThorDataCategoryId);
        System.Console.WriteLine($"ProtocolFormFieldMapping - {watch.Elapsed} - GetAllProtocolFieldsByMappingIdForMapping");

        if (this.protocolFields.Count == 0)
            await notificationService.Warning($"No fields were found associated to {currCategory.ThorDataCategoryId} for this mapping.");

        watch = System.Diagnostics.Stopwatch.StartNew();
        this.protocolFieldsDisabled = await protocolFieldService.GetAllProtocolDisabledFieldsByMappingIdForMapping(protocolMappingId, currCategory.ThorDataCategoryId);
        System.Console.WriteLine($"ProtocolFormFieldMapping - {watch.Elapsed} - GetAllProtocolDisabledFieldsByMappingIdForMapping");

        this.protocolFieldIdsDisabled = new HashSet<string>(this.protocolFieldsDisabled.Select(x => x.ThorFieldId));

        this.protocolFieldMappingList = AddMissingFields(this.protocolFieldMappingList, 0);

        this.multiFormList = await protocolFormMappingService.GetProtocolFormMappingsForCategory(protocolMappingId, protocolCategoryId);
        this.multiFormList = this.multiFormList.OrderBy(x => x.ProtocolFormMappingId).ToList();
        foreach(var form in multiFormList)
        {
            multiFormRefs.Add(form.ProtocolFormMappingId, new DataGrid<ProtocolFieldMapping>());
            List<ProtocolFieldMapping> formMappings = protocolFieldMappingList.Where(x => x.ProtocolEDCFormId == form.ProtocolEDCFormId).ToList();

            formMappings = AddMissingFields(formMappings, form.ProtocolEDCFormId).ToList();
            multiFormMappings.Add(form.ProtocolFormMappingId, formMappings);
            if(form.ProtocolEDCFormId != null && form.ProtocolEDCFormId != 0)
            {
                UpdateFields((int)form.ProtocolEDCFormId, form.ProtocolFormMappingId);
            }
        }

        this.RefreshFormsDropdown();
    }

    private void RefreshFormsDropdown()
    {
        this.protocolEDCFormList = this.protocolEDCFormListFull.Where(x => !this.multiFormList.Any(y => y.ProtocolEDCFormId == x.ProtocolEDCFormId)).Select(x => x).ToList();
    }

    public async void GetFields(int formId)
    {
        if(formId != 0)
        {
            this.protocolEDCFieldList = await protocolEDCFieldService.GetFieldsByFormIds(new List<int> { formId });
        }
    }

    public async void UpdateFields(int formId, int mappingId)
    {
        this.edcFieldsByForm[mappingId] = await protocolEDCFieldService.GetFieldsByFormIds(new List<int> { formId });
    }

    public IList<ProtocolFieldMapping> AddMissingFields(IList<ProtocolFieldMapping> mappings, int? formId)
    {
        if(formId == null)
        {
            formId = 0;
        }
        var fieldMappingIds = mappings.Select(x => x.ThorFieldId).ToList();
        foreach (var field in protocolFields)
        {
            if (!fieldMappingIds.Contains(field.ThorFieldId))
            {
                mappings.Add(new ProtocolFieldMapping { ThorFieldId = field.ThorFieldId, ThorField = field.ThorField, ProtocolEDCFieldId = 0, ProtocolEDCFormId = (int)formId });
            }
        }

        return mappings;
    }

    public async void Save(SavedRowItem<ProtocolFieldMapping, Dictionary<string, object>> savedRowItem)
    {
        var toSave = savedRowItem.Item;

        bool saved = await protocolFieldMappingService.SaveProtocolFieldMapping(toSave);

        if(this.protocolCategory.ProtocolCategoryStatusId != 2)
        {
            // when we save a mapping, we want to make sure the status is Incomplete
            this.protocolCategory.ProtocolCategoryStatusId = 2;
            await protocolCategoryService.SaveCategory(this.protocolCategory, this.protocolMappingId);
        }

        if (saved)
        {
            await notificationService.Success("Mapping successfully saved");
            return;
        }
        else
        {
            await notificationService.Error("Error saving mapping");
            return;
        }
    }

    private string GetPlaceholder(ProtocolFieldMapping item)
    {
        if (item.ProtocolEDCFormId == 0 && item.ProtocolEDCField == null)
        {
            return "Start typing to select an EDC form";
        }
        else if (item.ProtocolEDCFormId != 0 && item.ProtocolEDCField == null)
        {
            return protocolEDCFormList.FirstOrDefault(x => x.ProtocolEDCFormId == item.ProtocolEDCFormId)?.EDCFormIdentifier ?? $"<ProtocolEDCFormId {item.ProtocolEDCFormId} Not in Protocol Mapping>";
        }
        return item.ProtocolEDCField.ProtocolEDCForm.EDCFormIdentifier;
    }

    public string GetThorFieldLabel(ProtocolFieldMapping item)
    {
        if (item.ThorFieldId == null || item.ThorFieldId == "")
        {
            return "<Not Mapped>";
        }

        if (item.ThorFieldId != null && item.ThorFieldId != "")
        {
            string notFoundMessage = "";
            if (this.protocolFieldIdsDisabled.Contains(item.ThorFieldId))
            {
                notFoundMessage = $"<THORFieldId {item.ThorFieldId} Disabled In Protocol Mapping>";
            }
            else
            {
                notFoundMessage = $"<THORFieldId {item.ThorFieldId} Not In Protocol Mapping>";
            }
            return protocolFields.FirstOrDefault(x => x.ThorFieldId == item.ThorFieldId)?.ThorField.FieldLabel ?? notFoundMessage;
        }
        else
        {
            return item.ThorField.FieldLabel;
        }
    }

    public bool GetFieldMappingStatus(ProtocolFieldMapping item)
	{
		if(item.ProtocolEDCFormId == 0 || item.ProtocolEDCFieldId == 0)
		{
			return true;
		}
		return false;
	}

    public async Task<CancellableRowChange<ProtocolFieldMapping>> ConfirmDelete(CancellableRowChange<ProtocolFieldMapping> item)
    {
        if (!await messageService.Confirm("Are you sure you want to delete this mapping?", "Confirmation"))
        {
            item.Cancel = true;
        }

        return item;
    }


    public async void Delete(ProtocolFieldMapping item)
    {
        if(item.ProtocolFieldMappingId == 0)
        {
            protocolFieldMappingList.Remove(item);
            return;
        }

        bool deleted = await protocolFieldMappingService.DeleteProtocolFieldMapping(item);
        if (deleted)
        {
            await notificationService.Success("Mapping successfully deleted");
            return;
        }
        else
        {
            await notificationService.Error("Error deleting mapping");
            return;
        }
    }

    public async void UpdatePrimaryForm(bool isPrimaryForm, ProtocolFormMapping form)
    {
        form.IsPrimaryForm = isPrimaryForm;
        bool saved = await protocolFormMappingService.SaveProtocolFormMapping(form);
        if (saved)
        {
            foreach(var otherForm in this.multiFormList)
            {
                if(otherForm.ProtocolFormMappingId != form.ProtocolFormMappingId)
                {
                    otherForm.IsPrimaryForm = false;
                    await this.protocolFormMappingService.SaveProtocolFormMapping(otherForm);
                }
            }
            await notificationService.Success("Primary form updated");
            return;
        }
        else
        {
            await notificationService.Error("Error updating primary form");
            return;
        }
    }

    public async void EditDictionaryMapping(ProtocolFieldMapping item, string formLabel)
    {
        navigation.NavigateTo($"/admin/dmu/dictionary-list-map/{item.ProtocolFieldMappingId}?protocolMappingId={this.protocolMappingId}&protocol={this.protocol}&categoryName={currCategory.CategoryName}&formLabel={formLabel}&catId={protocolCategoryId}&dict={item.ThorField.ThorDictionaryId}", true);
    }

    public async void AddMultiFormField(ProtocolFieldMapping item)
    {
        this.protocolFieldMappingList.Add(new ProtocolFieldMapping { ThorFieldId = item.ThorFieldId, ThorField = item.ThorField, ProtocolEDCFieldId = 0, ProtocolEDCFormId = 0 });
    }

    public async void AddForm()
    {
        ProtocolFormMapping newForm = new ProtocolFormMapping { ProtocolEDCFormId = null, ProtocolCategoryId = protocolCategoryId };
        this.protocolFormMappingService.SaveProtocolFormMapping(newForm);
        this.multiFormRefs.Add(newForm.ProtocolFormMappingId, new DataGrid<ProtocolFieldMapping>());
        this.multiFormMappings.Add(newForm.ProtocolFormMappingId, new List<ProtocolFieldMapping>());
        this.multiFormList.Add(newForm);
        foreach(var protocolField in this.protocolFields){
            this.multiFormMappings[newForm.ProtocolFormMappingId].Add(new ProtocolFieldMapping { ThorFieldId = protocolField.ThorFieldId, ThorField = protocolField.ThorField, ProtocolEDCFieldId = 0, ProtocolEDCFormId = 0 });
        }

        this.edcFieldsByForm.Add(newForm.ProtocolFormMappingId, new List<ProtocolEDCField>());
        this.RefreshFormsDropdown();
        this.StateHasChanged();
    }

    public async void UpdateCategory(bool isMultiForm)
	{
        this.protocolCategory.IsMultiForm = isMultiForm;
        this.protocolCategory.ProtocolCategoryStatusId = 2; // set to incomplete
        bool saved = await protocolCategoryService.SaveCategory(this.protocolCategory, this.protocolMappingId);
		if (saved)
		{
			await notificationService.Success("Category successfully updated");
			return;
		}
		else
		{
			await notificationService.Error("Error updating category");
			return;
		}
	}

    public async void CompleteMapping()
    {
        if(this.isComplete){
            this.protocolCategory.ProtocolCategoryStatusId = 3; // set to complete
            bool saved = await protocolCategoryService.SaveCategory(this.protocolCategory, this.protocolMappingId);
            if (saved)
            {
                await notificationService.Success("Category successfully marked as complete");
                return;
            }
            else
            {
                await notificationService.Error("Error marking category as complete");
                return;
            }
        }
    }

    private void Back()
	{
		navigation.NavigateTo($"/admin/dmu/category-list-map/{protocolMappingId}");
	}
}