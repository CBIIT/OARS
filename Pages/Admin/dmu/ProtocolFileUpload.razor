@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@inject IHttpContextAccessor httpContextAccessor
@inject IConfiguration configuration
@layout AdminLayout

@page "/admin/dmu/protocol-file-upload/{protocolMappingId:int}"
<AdminRoleCheck AllowedRoles="@(new List<string> { "IT" })"></AdminRoleCheck>

<Div Class="dmu-admin-header-grey">
    <h2>File Upload</h2>
</Div>
<Div Padding="Padding.Is4" Margin="Margin.Is3.FromBottom">
    @if (!allowEdit)
    {
        <Row Padding="Padding.Is2">
            <Column ColumnSize="ColumnSize.Is2" Style="text-align:right;">
                <Text>File Type:</Text>
            </Column>
            <Column ColumnSize="ColumnSize.Is3">
                <Select TValue="string" SelectedValue="@selectedFileType" SelectedValueChanged="@OnSelectedValueChanged">
                    <SelectItem Value="0" Hidden>Select File Type</SelectItem>
                    <SelectItem Value="FileTypeSelect.XML">XML</SelectItem>
                    <SelectItem Value="FileTypeSelect.ALS">ALS</SelectItem>
                    <SelectItem Value="FileTypeSelect.CSV">CSV</SelectItem>
                </Select>
            </Column>
            <Column ColumnSize="ColumnSize.Is7">
                @if (selectedFileType == "ALS" || selectedFileType == "XML")
                {
                    <Text>@selectedFileType can only be uploaded once. Remapping the study might be required.</Text>
                    <p>
                        To upload a new @selectedFileType,
                        <ol>
                            <li>Clear Uploads</li>
                            <li>Upload new @selectedFileType</li>
                        </ol>
                        Additional Data Points outside the ALS can be added by uploading a CSV file.
                    </p>
                }
            </Column>
        </Row>
        <LoadingIndicator @ref="loading">
            <Row Padding="Padding.Is2">
                @if (selectedFileType == "ALS" || selectedFileType == "XML")
                {
                    <Column ColumnSize="ColumnSize.Is2" Style="text-align:right;">
                        <Text>Select a file:</Text>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is3">

                            <Field>
                                <FieldBody Margin="Margin.IsAuto">
                                    <FilePicker Upload="@OnFileUpload" ShowMode="FilePickerShowMode.List" DisableProgressReport Filter="@allowedType"/>
                                </FieldBody>
                            </Field>
                    

                    </Column>
                    <Column ColumnSize="ColumnSize.Is2">
                        <Button Color="Color.Danger" onclick="@ClearUploads" Disabled="@allowEdit">Clear Uploads</Button>
                    </Column>
                }
            </Row>
        </LoadingIndicator>
    }
    else
    {
        <Text>This mapping has already been published and is in readonly mode.</Text>
    }

</Div>
@code {
    private FilePicker UploadField;
    private LoadingIndicator loading;
    [Inject] private IDatabaseConnectionService databaseConnectionService { get; set; }
    [Inject] private IALSFileImportService alsFileImportService { get; set; }
    [Inject] private IXMLFileImportService xmlFileImportService { get; set; }
    [Inject] private IProtocolEDCFormService formService { get; set; }
    [Inject] private IProtocolEDCFieldService fieldService { get; set; }
    [Inject] private IProtocolEDCDictionaryService dictionaryService { get; set; }
    [Inject] INotificationService notificationService { get; set; }
    [Inject] IMessageService messageService { get; set; }
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Parameter] public int protocolMappingId { get; set; }
    [Parameter] public bool allowEdit { get; set; }

    private string selectedFileType = String.Empty;
    private string allowedType;

    private enum FileTypeSelect
    {
        XML,
        ALS,
        CSV
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    public async void OnFileUpload(FileUploadEventArgs e)
    {
        await loading.Show();
        var hideLoading = true;
        MemoryStream ms = new MemoryStream();
        try
        {
            var name = e.File.Name.ToLower().Split('.');
            int last = name.Length - 1;
            await e.File.OpenReadStream(25000000).CopyToAsync(ms);
            if(selectedFileType == "ALS")
            {
                if(name[last] != "xml" || name[last-1] != "xls")
                {
                    await notificationService.Error("Invalid file type. Please upload an .xls.xml file");
                    return;
                }

                try
                {
                    await alsFileImportService.ParseALSFile(ms, this.protocolMappingId);
                    await notificationService.Success("ALS file uploaded successfully. Refreshing mapping...");
                    navigation.NavigateTo(navigation.Uri, true);
                    hideLoading = false; // Leave the loading spinner displayed while the page is reloading.
                } catch (Exception ex)
                {
                    await RollbackUpload(this.protocolMappingId);
                    await notificationService.Error(ex.Message);
                }

            }
            else if(selectedFileType == "XML")
            {
                if((!name.Contains("xml") || name.Contains("xls")) || name[last] != "xml"){
                    await notificationService.Error("Invalid file type. Please upload an .xml file");
                    return;
                }
                try
                {
                    await xmlFileImportService.ParseXMLFile(ms, this.protocolMappingId);
                    await notificationService.Success("XML file uploaded successfully. Refreshing mapping...");
                    navigation.NavigateTo(navigation.Uri, true);
                    hideLoading = false; // Leave the loading spinner displayed while the page is reloading.
                } catch(Exception ex){
                    await RollbackUpload(this.protocolMappingId);
                    await notificationService.Error(ex.Message);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            if (hideLoading)
                await loading.Hide();
        }
    }

    public async void ClearUploads()
    {
        if(!await messageService.Confirm("Are you sure you want to clear all uploads for this mapping?", "Confirmation"))
        {
            return;
        }
        await loading.Show();
        // Delete all dictionaries, forms that are related to the protocolMappingId
        await notificationService.Info("Clearing uploads");
        // var formIds = await formService.GetFormIdsForMappingId(this.protocolMappingId);
        var transaction = databaseConnectionService.GetDbTransaction();
        try
        {
            var result = await fieldService.DeleteAllFieldsForFormIds(this.protocolMappingId);
            if (!result)
            {
                transaction.Rollback();
                await notificationService.Error("Error deleting fields");
                return;
            }

            result = await formService.DeleteAllFormsForMappingId(this.protocolMappingId);
            if (!result)
            {
                transaction.Rollback();
                await notificationService.Error("Error deleting forms");
                return;
            }

            var dictResult = await dictionaryService.DeleteAllDictionariesForMappingId(this.protocolMappingId);
            if (!dictResult)
            {
                transaction.Rollback();
                await notificationService.Error("Error deleting dictionaries");
                return;
            }
            transaction.Commit();
            await notificationService.Success("Uploads cleared. Refreshing mapping...");
            // Leave the loading spinner displayed while the page is reloading.
            navigation.NavigateTo(navigation.Uri, true);
        } catch (Exception ex)
        {
            transaction.Rollback();
            await notificationService.Error(ex.Message);
            return;
        } 

    }

    private async Task RollbackUpload(int protocolMappingId)
    {
        // If an error occurs, delete all forms, fields, and dictionaries that are related to the protocolMappingId
        var formIds = await formService.GetFormIdsForMappingId(protocolMappingId);
        if (formIds != null && formIds.Count > 0)
        {
            await fieldService.DeleteAllFieldsForFormIds(protocolMappingId);
            await formService.DeleteAllFormsForMappingId(protocolMappingId);
            await dictionaryService.DeleteAllDictionariesForMappingId(protocolMappingId);
        }
    }

    Task OnSelectedValueChanged(string value)
    {
        selectedFileType = value;
        if (value == FileTypeSelect.ALS.ToString())
		{
			allowedType = ".xls.xml";
		}
		else if (value == FileTypeSelect.XML.ToString())
		{
			allowedType = ".xml";
		}
		else if (value == FileTypeSelect.CSV.ToString())
		{
			allowedType = ".csv";
		}
        return Task.CompletedTask;
    }
}
