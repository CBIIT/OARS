@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@inject IHttpContextAccessor httpContextAccessor
@inject IConfiguration configuration
@layout AdminLayout

@page "/admin/dmu/protocol-file-upload/{protocolMappingId:int}"
<AdminRoleCheck AllowedRoles="@(new List<string> { "IT" })"></AdminRoleCheck>

<Div Class="dmu-admin-header-grey">
    <h2>File Upload</h2>
</Div>
<Div Padding="Padding.Is4" Margin="Margin.Is3.FromBottom">
    @if (!allowEdit)
    {
        <Row Padding="Padding.Is2">
            <Column ColumnSize="ColumnSize.Is2" Style="text-align:right;">
                <Text>File Type:</Text>
            </Column>
            <Column ColumnSize="ColumnSize.Is3">
                <Select TValue="string" SelectedValue="@selectedFileType" SelectedValueChanged="@OnSelectedValueChanged">
                    <SelectItem Value="0" Hidden>Select File Type</SelectItem>
                    <SelectItem Value="FileTypeSelect.XML">XML</SelectItem>
                    <SelectItem Value="FileTypeSelect.ALS">ALS</SelectItem>
                    <SelectItem Value="FileTypeSelect.CSV">CSV</SelectItem>
                </Select>
            </Column>
            <Column ColumnSize="ColumnSize.Is7">
                @if (selectedFileType == "ALS" || selectedFileType == "XML")
                {
                    <Text>@selectedFileType can only be uploaded once. Remapping the study might be required.</Text>
                    <p>
                        To upload a new @selectedFileType,
                        <ol>
                            <li>Clear Uploads</li>
                            <li>Upload new @selectedFileType</li>
                        </ol>
                        Additional Data Points outside the ALS can be added by uploading a CSV file.
                    </p>
                }
                else if (selectedFileType == "CSV")
                {
                    <Text>You may upload multiple CSV files as long as it's new metadata. if a CSV needs to replace existing metadata, remapping the study might be required.</Text>
                    <p>
                        To upload a new CSV and replace previously uploaded metadata,
                        <ol>
                            <li>Clear Uploads</li>
                            <li>Upload new CSV</li>
                        </ol>
                    </p>
                }
            </Column>
        </Row>
        <Row Padding="Padding.Is2">
            @if (selectedFileType == "ALS" || selectedFileType == "XML")
            {
                <Column ColumnSize="ColumnSize.Is2" Style="text-align:right;">
                    <Text>Select a file:</Text>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <LoadingIndicator @ref="loading">
                        <Field>
                            <FieldBody Margin="Margin.IsAuto">
                                <FilePicker Upload="@OnFileUpload" ShowMode="FilePickerShowMode.List" />
                            </FieldBody>
                        </Field>
                    </LoadingIndicator>

                </Column>
                <Column ColumnSize="ColumnSize.Is2">
                    <Button Color="Color.Danger" onclick="@ClearUploads" Disabled="@allowEdit">Clear Uploads</Button>
                </Column>
            }
            else if (selectedFileType == "CSV")
            {
                <Column ColumnSize="ColumnSize.Is2" Style="text-align:right;">
                    <Text>Select Form Name Location:</Text>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <LoadingIndicator @ref="loading">
                        <Field>
                            <FieldBody Margin="Margin.IsAuto">
                                <FilePicker Upload="@OnFileUploadForm" ShowMode="FilePickerShowMode.List" />
                            </FieldBody>
                        </Field>
                    </LoadingIndicator>
                </Column>
                <Column ColumnSize="ColumnSize.Is2">
                    <Button Color="Color.Danger" onclick="@ClearUploads">Clear Uploads</Button>
                </Column>
            }
        </Row>
        <Row Padding="Padding.Is2">
            @if (selectedFileType == "CSV")
            {
                <Column ColumnSize="ColumnSize.Is2" Style="text-align:right;">
                    <Text>Select Field Metadata File Location:</Text>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <LoadingIndicator @ref="loading">
                        <Field>
                            <FieldBody Margin="Margin.IsAuto">
                                <FilePicker Upload="@OnFileUpload" ShowMode="FilePickerShowMode.List" />
                            </FieldBody>
                        </Field>
                    </LoadingIndicator>

                </Column>
                <Column ColumnSize="ColumnSize.Is2">

                </Column>
            }
        </Row>
        <Row Padding="Padding.Is2">
            @if (selectedFileType == "CSV")
            {
                <Column ColumnSize="ColumnSize.Is2" Style="text-align:right;">
                    <Text>Select Pick List File Location:</Text>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <LoadingIndicator @ref="loading">
                        <Field>
                            <FieldBody Margin="Margin.IsAuto">
                                <FilePicker Upload="@OnFileUploadMeta" ShowMode="FilePickerShowMode.List" />
                            </FieldBody>
                        </Field>
                    </LoadingIndicator>

                </Column>
                <Column ColumnSize="ColumnSize.Is2">
                </Column>
            }
        </Row>
    }
    else
    {
        <Text>This mapping has already been published and is in readonly mode.</Text>
    }

</Div>
@code {
    private FilePicker UploadField;
    private LoadingIndicator loading;
    [Inject] private IALSFileImportService alsFileImportService { get; set; }
    [Inject] private IXMLFileImportService xmlFileImportService { get; set; }
    [Inject] private ICSVFileImportService csvFileImportService { get; set; }
    [Inject] private IProtocolEDCFormService formService { get; set; }
    [Inject] private IProtocolEDCFieldService fieldService { get; set; }
    [Inject] private IProtocolEDCDictionaryService dictionaryService { get; set; }
    [Inject] INotificationService notificationService { get; set; }
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Parameter] public int protocolMappingId { get; set; }
    [Parameter] public bool allowEdit { get; set; }

    private string selectedFileType = String.Empty;

    private enum FileTypeSelect
    {
        XML,
        ALS,
        CSV
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    public async void OnFileUpload(FileUploadEventArgs e)
    {
        await loading.Show();
        MemoryStream ms = new MemoryStream();
        try
        {
            await e.File.OpenReadStream(25000000).CopyToAsync(ms);
            if(selectedFileType == "ALS")
            {
                try
                {
                    await alsFileImportService.ParseALSFile(ms, this.protocolMappingId);
                } catch (Exception ex)
                {
                    await notificationService.Error(ex.Message);
                }

            }
            else if(selectedFileType == "XML")
            {
                try
                {
                    await xmlFileImportService.ParseXMLFile(ms, this.protocolMappingId);
                } catch(Exception ex){
                    await notificationService.Error(ex.Message);
                }
            }
            else if (selectedFileType == "CSV")
            {
                try
                {
                    await csvFileImportService.ParseCSVField(ms, this.protocolMappingId);
                }
                catch (Exception ex)
                {
                    await notificationService.Error(ex.Message);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            await loading.Hide();
        }
    }

    public async void OnFileUploadForm(FileUploadEventArgs e)
    {
        await loading.Show();
        MemoryStream ms = new MemoryStream();
        try
        {
            await e.File.OpenReadStream(25000000).CopyToAsync(ms);
            
            try
            {
                await csvFileImportService.ParseCSVFileForm(ms, this.protocolMappingId);
            }
            catch (Exception ex)
            {
                await notificationService.Error(ex.Message);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            await loading.Hide();
        }
    }

    public async void OnFileUploadMeta(FileUploadEventArgs e)
    {
        await loading.Show();
        MemoryStream ms = new MemoryStream();
        try
        {
            await e.File.OpenReadStream(25000000).CopyToAsync(ms);

            try
            {
                await csvFileImportService.ParseCSVFileMeta(ms, this.protocolMappingId);
            }
            catch (Exception ex)
            {
                await notificationService.Error(ex.Message);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            await loading.Hide();
        }
    }

    public async void ClearUploads()
    {
        // Delete all dictionaries, forms that are related to the protocolMappingId
        await notificationService.Info("Clearing uploads");
        await loading.Show();
        var formIds = await formService.GetFormIdsForMappingId(this.protocolMappingId);
        if (formIds != null && formIds.Count > 0)
        {
            var result = await fieldService.DeleteAllFieldsForFormIds(formIds.ToList());
            if (!result)
            {
                await notificationService.Error("Error deleting fields");
                return;
            }

            result = await formService.DeleteAllFormsForMappingId(this.protocolMappingId);
            if (!result)
            {
                await notificationService.Error("Error deleting forms");
                return;
            }
        }

        var dictResult = await dictionaryService.DeleteAllDictionariesForMappingId(this.protocolMappingId);
        if(!dictResult){
			await notificationService.Error("Error deleting dictionaries");
			return;
		}
        await loading.Hide();
        await notificationService.Success("Uploads cleared");

    }

    Task OnSelectedValueChanged(string value)
    {
        selectedFileType = value;
        return Task.CompletedTask;
    }
}
