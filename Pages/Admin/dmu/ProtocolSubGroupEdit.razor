@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@inject IHttpContextAccessor httpContextAccessor
@layout AdminLayout

<DataGrid @ref=dataGridRef
          TItem="ProtocolSubGroup"
          Class="admindatagrid"
          Data="@protocolSubGroups"
          Editable
          Responsive
          Striped
          Sortable
          ShowPager
          ShowPageSizes
          Filterable
           FilterMethod="DataGridFilterMethod.StartsWith"
           MaxPaginationLinks="5"
           PagerPosition="DataGridPagerPosition.Bottom"
           PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
          FixedHeader
           FixedHeaderDataGridHeight="calc(100vh - 240px)"
           FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
           EditMode="DataGridEditMode.Inline"
           RowUpdated="@Save"
           RowInserted="@Save"
           RowRemoved="@Delete"
           RowRemoving="@ConfirmDelete">
     <DataGridColumns>
         <DataGridColumn Width="50%" Caption="Sub Group Code" Field="@nameof(ProtocolSubGroup.SubGroupCode)" Filterable="true" Sortable="true" Editable SortDirection="SortDirection.Ascending">
        </DataGridColumn>
        <DataGridColumn Field="@nameof(ProtocolSubGroup.Description)" Width="50%" Caption="Description" Filterable="true" Sortable="false" Editable>
        </DataGridColumn>
        <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="true">
            <EditCommandTemplate>
                <Button Disabled="@allowEdit"><Icon Name="IconName.Edit" Clicked="@context.Clicked" /></Button>
            </EditCommandTemplate>
            <SaveCommandTemplate>
                <Button><Icon Name="IconName.Save" Clicked="@context.Clicked" /></Button>
            </SaveCommandTemplate>
            <CancelCommandTemplate>
                <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
            </CancelCommandTemplate>
            <ClearFilterCommandTemplate>
                <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
            </ClearFilterCommandTemplate>
            <DeleteCommandTemplate>
                <Button><Icon Name="IconName.Delete" Clicked="@context.Clicked" /></Button>
            </DeleteCommandTemplate>
        </DataGridCommandColumn>
    </DataGridColumns>
    <ButtonRowTemplate>
        <Button Color="Color.Primary" Clicked="@context.NewCommand.Clicked" Disabled="@allowEdit">Add</Button>
    </ButtonRowTemplate>
    <EmptyTemplate>
        <div class="box">
            No sub groups were found.
        </div>
    </EmptyTemplate>
</DataGrid>
 @code {
    [Inject] private IProtocolSubGroupService protocolSubGroupService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] private IMessageService messageService { get; set; } = null!;
    [Inject] INotificationService notificationService { get; set; }
    [Parameter] public int protocolMappingId { get; set; }
    [Parameter] public bool allowEdit { get; set; }

    private DataGrid<ProtocolSubGroup> dataGridRef;
    private IList<ProtocolSubGroup> protocolSubGroups = new List<ProtocolSubGroup>();
    private bool deleteConfirmed = false;

    protected override async Task OnInitializedAsync()
    {
        this.protocolSubGroups = await protocolSubGroupService.GetSubGroupsByMappingId(protocolMappingId);
    }


    public async void Save(SavedRowItem<ProtocolSubGroup, Dictionary<string, object>> savedRowItem)
    {
        var toSave = savedRowItem.Item;
        bool saved = await protocolSubGroupService.SaveSubGroup(toSave, this.protocolMappingId);

        if (saved)
        {
            await notificationService.Success("Subgroup successfully saved");
            return;
        }
        else
        {
            await notificationService.Error("Error saving subgroup");
            return;
        }
    }

    public async Task<CancellableRowChange<ProtocolSubGroup>> ConfirmDelete(CancellableRowChange<ProtocolSubGroup> item)
    {
        if (!await messageService.Confirm("Are you sure you want to delete this subgroup?", "Confirmation"))
        {
            item.Cancel = true;
        }

        return item;
    }


    public async void Delete(ProtocolSubGroup item)
    {
        bool deleted = await protocolSubGroupService.DeleteSubGroup(item);
        if (deleted)
        {
            await notificationService.Success("Subgroup successfully deleted");
            return;
        }
        else
        {
            await notificationService.Error("Error deleting subgroup");
            return;
        }
    }
}