@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@inject IHttpContextAccessor httpContextAccessor
@layout AdminLayout

<LoadingIndicator @ref=loading>
<DataGrid @ref=dataGridRef
          TItem="ProtocolEDCDictionary"
          Class="admindatagrid"
          Data="@protocolDicts"
          Editable
          Responsive
          Striped
          Sortable
          ShowPager
          ShowPageSizes
          Filterable
           FilterMethod="DataGridFilterMethod.Contains"
           MaxPaginationLinks="5"
           PagerPosition="DataGridPagerPosition.Bottom"
           PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
          FixedHeader
           FixedHeaderDataGridHeight="calc(100vh - 240px)"
           FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
           EditMode="DataGridEditMode.Inline"
           RowUpdated="@Save"
           RowInserted="@Save"
           RowRemoved="@Delete"
              RowRemoving="@ConfirmDelete"
              RowUpdating="@Verify"
              RowInserting="@Verify">
     <DataGridColumns>
        <DataGridColumn Field="@nameof(ProtocolEDCDictionary.EDCDictionaryName)" Width="15%" Caption="EDC Dictionary Name" Filterable="true" Sortable="true" SortDirection="SortDirection.Ascending" Editable>
         </DataGridColumn>
            <DataGridColumn Field="@nameof(ProtocolEDCDictionary.EDCItemName)" Caption="EDC Dictionary Options" Width="15%" Filterable="true" Sortable="true" Editable></DataGridColumn>
            <DataGridColumn Field="@nameof(ProtocolEDCDictionary.EDCItemId)" Caption="EDC Dictionary Value" Width="15%" Filterable="true" Sortable="true" Editable></DataGridColumn>
         <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="true">
             <EditCommandTemplate>
                 <Button Disabled="@allowEdit"><Icon Name="IconName.Edit" Clicked="@context.Clicked" /></Button>
             </EditCommandTemplate>
             <SaveCommandTemplate>
                 <Button><Icon Name="IconName.Save" Clicked="@context.Clicked" /></Button>
             </SaveCommandTemplate>
             <CancelCommandTemplate>
                 <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
             </CancelCommandTemplate>
             <ClearFilterCommandTemplate>
                 <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
             </ClearFilterCommandTemplate>
             <DeleteCommandTemplate>
                 <Button><Icon Name="IconName.Delete" Clicked="@context.Clicked" /></Button>
             </DeleteCommandTemplate>
         </DataGridCommandColumn>
     </DataGridColumns>
     <ButtonRowTemplate>
         <Button Color="Color.Primary" Clicked="@context.NewCommand.Clicked" Disabled="@allowEdit">Add</Button>
     </ButtonRowTemplate>
     <EmptyTemplate>
         <div class="box">
             No dictionaries were found.
         </div>
     </EmptyTemplate>
 </DataGrid>
</LoadingIndicator>
@code {
    [Inject] private IProtocolEDCDictionaryService protocolDictionaryService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] INotificationService notificationService { get; set; }
    [Inject] private IMessageService messageService { get; set; } = null!;
    [Parameter] public int protocolMappingId { get; set; }
    [Parameter] public bool allowEdit { get; set; }

    private DataGrid<ProtocolEDCDictionary> dataGridRef;
    private IList<ProtocolEDCDictionary> protocolDicts = new List<ProtocolEDCDictionary>();
    private LoadingIndicator loading;

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await loading.Show();
            var watch = System.Diagnostics.Stopwatch.StartNew();
            this.protocolDicts = await protocolDictionaryService.GetDictionariesByMappingId(protocolMappingId);
            watch.Stop();
            var elapsedMs = watch.ElapsedMilliseconds;
            System.Console.WriteLine($"EDC Dictionary Elapsed time: {elapsedMs} ms");
            StateHasChanged();
            await loading.Hide();
        }
        return;
    }



    public async Task<CancellableRowChange<ProtocolEDCDictionary>> Verify(CancellableRowChange<ProtocolEDCDictionary, Dictionary<string, object>> e)
    {
        await notificationService.Info("Validating...");

        e.Values.TryGetValue("EDCDictionaryName", out var EDCDictionaryName);
        e.Values.TryGetValue("EDCItemId", out var EDCItemId);
        e.Values.TryGetValue("EDCItemName", out var EDCItemName);
        var id = e.Item.ProtocolEDCDictionaryId;

        List<string> missingFields = new List<string>();

        if (string.IsNullOrWhiteSpace((string?)EDCDictionaryName))
        {
            missingFields.Add("EDC Dictionary Name");
        }

        if (string.IsNullOrWhiteSpace((string?)EDCItemId))
        {
            missingFields.Add("EDC Dictionary Value");
        }

        if (string.IsNullOrWhiteSpace((string?)EDCItemName))
        {
            missingFields.Add("EDC Dictionary Options");
        }

        if (missingFields.Count > 0)
        {
            await notificationService.Error("Missing fields: " + string.Join(", ", missingFields));
            e.Cancel = true;
            return e;
        }

        await notificationService.Info("Validating uniqueness...");
        var currentProtocolDicts = protocolDicts.Where(x => x.EDCDictionaryName == (string)EDCDictionaryName && x.EDCItemId == (string)EDCItemId && x.ProtocolEDCDictionaryId != id).ToList();
        if (currentProtocolDicts.Count() > 0)
        {
            await notificationService.Error($"The dictionary option {EDCDictionaryName} - {EDCItemId} already exists");
            e.Cancel = true;
        }

        return e;
    }


    public async void Save(SavedRowItem<ProtocolEDCDictionary, Dictionary<string, object>> savedRowItem)
    {
        var toSave = savedRowItem.Item;
        bool saved = await protocolDictionaryService.SaveDictionary(toSave, this.protocolMappingId);

        if (saved)
        {
            await notificationService.Success("Dictionary successfully saved");
            this.protocolDicts = await protocolDictionaryService.GetDictionariesByMappingId(protocolMappingId);
            return;
        }
        else
        {
            await notificationService.Error("Error saving dictionary");
            return;
        }
    }


    public async Task<CancellableRowChange<ProtocolEDCDictionary>> ConfirmDelete(CancellableRowChange<ProtocolEDCDictionary> item)
    {
        if (!await messageService.Confirm("Are you sure you want to delete this dictionary?", "Confirmation"))
        {
            item.Cancel = true;
        }

        return item;
    }

    public async void Delete(ProtocolEDCDictionary item)
    {
        bool deleted = await protocolDictionaryService.DeleteDictionary(item);
        if (deleted)
        {
            await notificationService.Success("Dictionary successfully deleted");
            return;
        }
        else
        {
            await notificationService.Error("Error deleting dictionary");
            return;
        }
    }
}