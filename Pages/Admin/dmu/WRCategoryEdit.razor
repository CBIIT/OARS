@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@inject IHttpContextAccessor httpContextAccessor
@layout AdminLayout

@*
    TODO: Add ThorRoleCheck check for DMU roles when they are created

<ThorRoleCheck AllowedRoles="@(new List<string> { "??" })"></ThorRoleCheck>
*@

<DataGrid TItem="WRCategory"
            Class="admindataeditgrid"
            Data="@categoryList"
            @bind-SelectedRow="@selectedCategory"
            Editable
            Responsive
            Striped
            ShowPager
            ShowPageSizes
            MaxPaginationLinks="5"
            PagerPosition="DataGridPagerPosition.Bottom"
            PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
            FixedHeader
            FixedHeaderDataGridHeight="calc(100vh - 240px)"
            FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
            SelectionMode="DataGridSelectionMode.Single"
            CommandMode="DataGridCommandMode.ButtonRow"
            EditMode="DataGridEditMode.Inline"
            BatchEdit
            BatchChange="OnBatchChange"
            BatchSaving="OnBatchSaving"
            BatchSaved="OnBatchSaved">
        <DataGridColumns>
            <DataGridColumn Width="200" Field="@nameof(WRCategory.CategoryName)" Caption="ODH Data Category" Editable Filterable="true" Sortable="false">
            </DataGridColumn>
         <DataGridColumn Field="@nameof(WRCategory.ThorDataCategoryId)" Width="100" Caption="ODH Data Category ID" Editable Filterable="true" Sortable="false">
            </DataGridColumn>
         <DataGridColumn Field="@nameof(WRCategory.IsMultiForm)" Width="50" Caption="Is Multi Form?" Editable Filterable="true" Sortable="false">
                <EditTemplate>
                    <Dropdown Visible="true">
                        <DropdownToggle>
                         
                        </DropdownToggle>
                        <DropdownMenu>
                        <DropdownItem Value="false">No</DropdownItem>
                        <DropdownItem Value="true">Yes</DropdownItem>
                    </DropdownMenu>
                    </Dropdown>
                </EditTemplate>
            </DataGridColumn>
            <DataGridColumn Field="@nameof(WRCategory.SortOrder)" Caption="Order" Editable Filterable="true" Sortable="false">
            </DataGridColumn>
             <DataGridCheckColumn Field="@nameof(WRCategory.IsActive)" Caption="Is Active?">
                 <DisplayTemplate>
                     <Check TValue="bool" Checked="context.IsActive" Disabled="true" ReadOnly="true" />
                 </DisplayTemplate>
             </DataGridCheckColumn>
            <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="false">
                <SaveCommandTemplate>
                    <Button ElementId="btnSave" Size="Size.ExtraSmall" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                </SaveCommandTemplate>
                <CancelCommandTemplate>
                    <Button ElementId="btnCancel" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@context.Clicked">Cancel</Button>
                </CancelCommandTemplate>
            </DataGridCommandColumn>
        </DataGridColumns>
        <EmptyTemplate>
            <div class="box">
                No categories were found.
            </div>
        </EmptyTemplate>
        <ButtonRowTemplate>
            <Button Color="Color.Primary" Size="Size.ExtraSmall" Disabled="true" Clicked="context.EditCommand.Clicked">Edit</Button>
        </ButtonRowTemplate>
    </DataGrid>


    @code {
    [Inject] IWRCategoryService categoryService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;

    IList<WRCategory> categoryList = new List<WRCategory>();
    private WRCategory? selectedCategory;

    public async void GetCategories()
    {
        categoryList = await categoryService.GetCategories();
    }

    public async void Save()
    {
        // Loop through category list and validate? 
    }
}
