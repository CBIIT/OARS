@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@inject IHttpContextAccessor httpContextAccessor
@layout AdminLayout
@page "/admin/dmu/thor-field-format/{protocolMappingId:int}"

<DataGrid @ref=dataGridRef
          TItem="ProtocolField"
          Class="admindatagrid"
          Data="@protocolFields"
          Editable
          Responsive
          Striped
          ShowPager
          ShowPageSizes
          Filterable
           FilterMethod="DataGridFilterMethod.StartsWith"
           MaxPaginationLinks="5"
           PagerPosition="DataGridPagerPosition.Bottom"
           PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
          FixedHeader
           FixedHeaderDataGridHeight="calc(100vh - 240px)"
           FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
           EditMode="DataGridEditMode.Inline"
           RowUpdated="@Save"
           RowInserted="@Save">
     <DataGridColumns>
         <DataGridColumn Width="35%" Field="ThorField.FieldLabel" Caption="THOR Field" Filterable="true" Sortable="false">
         </DataGridColumn>
         <DataGridColumn Field="@nameof(ProtocolField.Format)" Width="65%" Caption="Format" Editable Filterable="true" Sortable="false">
         </DataGridColumn>
         <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="false">
             <EditCommandTemplate>
                 <Button Disabled="@allowEdit"><Icon Name="IconName.Edit" Clicked="@context.Clicked" /></Button>
             </EditCommandTemplate>
             <SaveCommandTemplate>
                 <Button><Icon Name="IconName.Save" Clicked="@context.Clicked" /></Button>
             </SaveCommandTemplate>
             <CancelCommandTemplate>
                 <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
             </CancelCommandTemplate>
             <ClearFilterCommandTemplate>
                 <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
             </ClearFilterCommandTemplate>
         </DataGridCommandColumn>
     </DataGridColumns>
     <EmptyTemplate>
         <div class="box">
             No fields were found.
         </div>
     </EmptyTemplate>
 </DataGrid>
@code {
    [Inject] IProtocolFieldService protocolFieldService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] INotificationService notificationService { get; set; }
    [Parameter] public int protocolMappingId { get; set; }
    [Parameter] public bool allowEdit { get; set; }
    private DataGrid<ProtocolField> dataGridRef;
    private IList<ProtocolField> protocolFields = new List<ProtocolField>();

    protected override async Task OnInitializedAsync()
    {
        this.protocolFields = await protocolFieldService.GetProtocolFieldsByMappingId(this.protocolMappingId);
    }

    public async void Save(SavedRowItem<ProtocolField, Dictionary<string, object>> savedRowItem)
    {
        var toSave = savedRowItem.Item;
        bool saved = await protocolFieldService.SaveProtocolField(this.protocolMappingId, toSave);

        if (saved)
        {
            await notificationService.Success("Field format successfully saved");
            return;
        }
        else
        {
            await notificationService.Error("Error saving field format");
            return;
        }
    }
}
