@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@inject IHttpContextAccessor httpContextAccessor
@layout AdminLayout
@*
    TODO: Add ThorRoleCheck check for DMU roles when they are created

<ThorRoleCheck AllowedRoles="@(new List<string> { "??" })"></ThorRoleCheck>
*@

<DataGrid @ref=dataGridRef
          TItem="ProfileDataCategory"
          Class="admindatagrid"
          Data="@profileCategories"
          Editable
          Responsive
          Striped
          Sortable
          ShowPager
          ShowPageSizes
          Filterable
           FilterMethod="DataGridFilterMethod.StartsWith"
           MaxPaginationLinks="5"
           PagerPosition="DataGridPagerPosition.Bottom"
           PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
           FixedHeader
           FixedHeaderDataGridHeight="calc(100vh - 240px)"
           FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
           EditMode="DataGridEditMode.Inline"
           RowUpdated="@Save"
           RowInserted="@Save">
     <DataGridColumns>
         <DataGridColumn Width="35%" Field="@nameof(ProfileDataCategory.ThorDataCategoryId)" Caption="OARS Data Category" Editable Filterable="true" Sortable="true" SortDirection="SortDirection.Ascending">
             <DisplayTemplate>
                 @{
                    if(context.ThorCategory != null)
                    {
                        @(context.ThorCategory.CategoryName + " (" + context.ThorDataCategoryId + ")")
                    }
                    else if (context.ThorCategory == null && context.ThorDataCategoryId != null)
					{
						@(this.categoryList.First(x => x.ThorDataCategoryId == context.ThorDataCategoryId).CategoryName + " (" + context.ThorDataCategoryId + ")")
					}
					else
					{
						<p></p>
					}
                }
            </DisplayTemplate>
            <EditTemplate>
                <SelectList TItem="ThorCategory" TValue="string" Data="@categoryList" TextField="@((item)=> item.CategoryName + " (" + item.ThorDataCategoryId + ")")" ValueField="@((item)=>item.ThorDataCategoryId)" SelectedValueChanged="@( v => {context.CellValue = v;})" SelectedValue="@((string?)context.CellValue)"></SelectList>
            </EditTemplate>
         </DataGridColumn>
        <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="false">
            <EditCommandTemplate>
                <Button><Icon Name="IconName.Edit" Clicked="@context.Clicked" /></Button>
            </EditCommandTemplate>
            <SaveCommandTemplate>
                <Button><Icon Name="IconName.Save" Clicked="@context.Clicked" /></Button>
            </SaveCommandTemplate>
            <CancelCommandTemplate>
                <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
            </CancelCommandTemplate>
            <ClearFilterCommandTemplate>
                <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
            </ClearFilterCommandTemplate>
        </DataGridCommandColumn>
     </DataGridColumns>
     <ButtonRowTemplate>
         <Button Color="Color.Primary" Clicked="context.NewCommand.Clicked">Add</Button>
     </ButtonRowTemplate>
     <EmptyTemplate>
         <div class="box">
             No categories were found.
         </div>
     </EmptyTemplate>
 </DataGrid>

@code {
    [Inject] IThorCategoryService categoryService { get; set; } = null!;
    [Inject] IProfileService profileService { get; set; } = null!;
    [Inject] IProfileCategoryService profileCategoryService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] INotificationService notificationService { get; set; }
    [Parameter] public int profile { get; set; }

    private DataGrid<ProfileDataCategory> dataGridRef;
    private IList<ProfileDataCategory> profileCategories;
    private IList<ThorCategory> categoryList;

    protected override async Task OnInitializedAsync()
    {
        this.profileCategories = await profileCategoryService.GetCategories(profile);
        this.categoryList = await categoryService.GetCategories();
        
    }

    public async void Save(SavedRowItem<ProfileDataCategory, Dictionary<string, object>> savedRowItem)
    {
        bool saved;
        saved = await profileCategoryService.SaveCategory(this.profile, savedRowItem.Item);

        if (saved)
        {
            await notificationService.Success("Field successfully saved");
            return;
        }
        else
        {
            await notificationService.Error("Error saving field");
            return;
        }
	}

}
