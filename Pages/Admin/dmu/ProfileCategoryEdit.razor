@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@inject IHttpContextAccessor httpContextAccessor
@layout AdminLayout
<AdminRoleCheck AllowedRoles="@(new List<string> { "IT" })" AllowedTHORRoles="@(new List<string> { "DMU Global Admin" })"></AdminRoleCheck>

<DataGrid @ref=dataGridRef
          TItem="ProfileDataCategory"
          Class="admindatagrid"
          Data="@profileCategories"
          Editable
          Responsive
          Striped
          Sortable
          SortMode="DataGridSortMode.Single"
          ShowPager
          ShowPageSizes
          Filterable
           FilterMethod="DataGridFilterMethod.Contains"
           MaxPaginationLinks="5"
           PagerPosition="DataGridPagerPosition.Bottom"
           PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
           FixedHeader
           FixedHeaderDataGridHeight="calc(100vh - 240px)"
           FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
          EditMode="DataGridEditMode.Inline"
          NewItemDefaultSetter="@CheckCategories"
           RowUpdated="@Save"
           RowInserted="@Save"
           RowRemoving="@ConfirmDelete"
          RowRemoved="@Delete"
          RowUpdating="@Verify"
          RowInserting="@Verify">
     <DataGridColumns>
         <DataGridColumn Width="35%" Field="@nameof(ProfileDataCategory.ThorDataCategoryId)" Caption="OARS Data Category ID" Editable Filterable="false" Sortable="false">
             <DisplayTemplate>
                 @{
                    if(context.ThorCategory != null)
                    {
                        @(context.ThorCategory.CategoryDisplay)
                    }
                    else if (context.ThorCategory == null && context.ThorDataCategoryId != null)
					{
                        @(this.categoryList.FirstOrDefault(x => x.ThorDataCategoryId == context.ThorDataCategoryId)?.CategoryDisplay)
					}
					else
					{
						<p></p>
					}
                }
            </DisplayTemplate>
            <EditTemplate>
                <SelectList TItem="ThorCategory" TValue="string" Data="@categoryList"
                            TextField="@((item)=> item.CategoryDisplay)"
                            ValueField="@((item)=>item.ThorDataCategoryId)" 
                    SelectedValue="@((String?)context.CellValue ?? context.Item.ThorDataCategoryId)"
                    SelectedValueChanged="@( v => {context.CellValue = v;})"
                            DefaultItemValue="@String.Empty"
                            DefaultItemText="Select the THOR DataCategory"></SelectList>
            </EditTemplate>
         </DataGridColumn>
        <DataGridColumn Field="@nameof(ProfileDataCategory.ThorCategoryDisplay)" Caption="Data Category Display" Filterable="true" Sortable="true" SortDirection="SortDirection.Ascending">
            <DisplayTemplate>
                @context.ThorCategoryDisplay
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="true">
            <EditCommandTemplate>
                <Button><Icon Name="IconName.Edit" Clicked="@(() => Edit(context, context.Item))" /></Button>
            </EditCommandTemplate>
            <SaveCommandTemplate>
                <Button><Icon Name="IconName.Save" Clicked="@context.Clicked" /></Button>
            </SaveCommandTemplate>
            <CancelCommandTemplate>
                <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
            </CancelCommandTemplate>
            <ClearFilterCommandTemplate>
                <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
            </ClearFilterCommandTemplate>
            <DeleteCommandTemplate>
                <Button><Icon Name="IconName.Delete" Clicked="@context.Clicked" /></Button>
            </DeleteCommandTemplate>
        </DataGridCommandColumn>
     </DataGridColumns>
     <ButtonRowTemplate>
         <Button Color="Color.Primary" Clicked="context.NewCommand.Clicked">Add</Button>
     </ButtonRowTemplate>
     <EmptyTemplate>
         <div class="box">
             No categories were found.
         </div>
     </EmptyTemplate>
 </DataGrid>

@code {
    [Inject] IThorCategoryService categoryService { get; set; } = null!;
    [Inject] IProfileService profileService { get; set; } = null!;
    [Inject] IProfileCategoryService profileCategoryService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] INotificationService notificationService { get; set; }
    [Inject] private IMessageService messageService { get; set; } = null!;
    [Parameter] public int profile { get; set; }

    private DataGrid<ProfileDataCategory> dataGridRef;
    private IList<ProfileDataCategory> profileCategories;
    private IList<ThorCategory> categoryList;
    private IList<ProfileDataCategory> protocolDataCategories = new List<ProfileDataCategory>();

    protected override async Task OnInitializedAsync()
    {
        this.profileCategories = await profileCategoryService.GetCategories(profile);
        this.categoryList = await categoryService.GetCategories();
        // Exclue inactive and already selected categories
        CheckCategories(null);
    }

    public void Edit(CommandContext context, ProfileDataCategory item)
    {
        CheckCategories(item);
        context.Clicked.InvokeAsync();
    }

    public async void CheckCategories(ProfileDataCategory? item)
    {
        this.categoryList = await categoryService.GetCategories();
        // Exclue inactive and already selected categories, if supplied
        this.categoryList = this.categoryList.Where(x =>
            x.IsActive &&
            (
                x.ThorDataCategoryId == item?.ThorDataCategoryId ||
                !this.profileCategories.Where(y => y.ThorDataCategoryId == x.ThorDataCategoryId).Any() 
            )
        )
        .OrderBy(x => x.CategoryDisplay)
        .ToList();
    }

    public async Task<CancellableRowChange<ProfileDataCategory>> Verify(CancellableRowChange<ProfileDataCategory, Dictionary<string, object>> e)
    {
        var profileDataCategoryId = e.Item.ProfileDataCategoryId;

        e.Values.TryGetValue("ThorDataCategoryId", out var ThorDataCategoryId);

        List<string> missingFields = new List<string>();

        if (string.IsNullOrWhiteSpace((string?)ThorDataCategoryId))
        {
            missingFields.Add("OARS Data Category");
        }

        if (missingFields.Count > 0)
        {
            await notificationService.Error("Missing fields: " + string.Join(", ", missingFields));
            e.Cancel = true;
        }


        if (!string.IsNullOrWhiteSpace((string?)ThorDataCategoryId) && protocolDataCategories.Any(x => x.ThorDataCategoryId == (string)ThorDataCategoryId && x.ProfileDataCategoryId != profileDataCategoryId))
        {
            await notificationService.Error($"The field {ThorDataCategoryId} already exists");
            e.Cancel = true;
        }

        return e;
    } 

    public async void Save(SavedRowItem<ProfileDataCategory, Dictionary<string, object>> savedRowItem)
    {
        bool saved;
        saved = await profileCategoryService.SaveCategory(this.profile, savedRowItem.Item);

        if (saved)
        {
            await notificationService.Success("Field successfully saved");
            navigation.NavigateTo($"/admin/dmu/profile-categories/{profile}", true);
            return;
        }
        else
        {
            await notificationService.Error("Error saving field");
            return;
        }
    }

    public async Task<CancellableRowChange<ProfileDataCategory>> ConfirmDelete(CancellableRowChange<ProfileDataCategory> item)
    {
        var confirm = await messageService.Confirm("Are you sure you want to delete this category?");
        if (!confirm)
        {
            item.Cancel = true;
        }
        return item;
    }

	public async void Delete(ProfileDataCategory category)
	{
		bool deleted = await profileCategoryService.DeleteCategory(category);
		if (deleted)
		{
			await notificationService.Success("Category successfully deleted");
            navigation.NavigateTo($"/admin/dmu/profile-categories/{profile}", true);
		}
		else
		{
			await notificationService.Error("Error deleting category");
		}
	}

}
