@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@inject IHttpContextAccessor httpContextAccessor
@layout AdminLayout

<DataGrid @ref=dataGridRef
          TItem="ProtocolField"
          Class="admindatagrid"
          Data="@protocolFields"
          Editable
          SelectionMode="DataGridSelectionMode.Single"
          Responsive
          Striped
          Sortable
          SortMode="DataGridSortMode.Single"
          ShowPager
          ShowPageSizes
          Filterable
           FilterMethod="DataGridFilterMethod.Contains"

           MaxPaginationLinks="5"
           PagerPosition="DataGridPagerPosition.Bottom"
           PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
          FixedHeader
           FixedHeaderDataGridHeight="calc(100vh - 240px)"
           FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
          EditMode="DataGridEditMode.Inline"
          NewItemCreator="@CreateNewItem"
          EditItemCreator="@CreateEditItem"
           RowUpdated="@Save"
           RowInserted="@Save"
           RowRemoved="@Delete"
          RowRemoving="@ConfirmDelete"
          RowUpdating="@Verify"
          RowInserting="@Verify">
     <DataGridColumns>
         <DataGridColumn Field="ThorDataCategoryId" Caption="Data Category ID" Width="15%" Editable Sortable="false" Filterable="false">
            <DisplayTemplate>
                @(context?.ThorField?.Category?.CategoryDisplay)
            </DisplayTemplate>
            <EditTemplate>
                <SelectList 
                    TItem="ThorCategory" 
                    TValue="string" 
                    Data="@categoryList" 
                    TextField="@((item)=>item.CategoryDisplay)" 
                    ValueField="@((item)=>item.ThorDataCategoryId)" 
                    SelectedValueChanged="@(async e =>
                                    {
                                        context.CellValue = Convert.ToString(e);
                                        await OnSelectedCategoryValueChanged((string)context.CellValue);
                                    })" 
                    SelectedValue="@((string?)context.CellValue ?? context.Item.ThorDataCategoryId)" 
                    DefaultItemText="Select the OARS DataCategory">
                </SelectList>
            </EditTemplate>
         </DataGridColumn>
        <DataGridColumn Field="@nameof(ProtocolField.ThorDataCategoryDisplay)" Width="15%" Caption="Data Category Display" Filterable="true" Sortable="true">
            <DisplayTemplate>
                @(context.ThorDataCategoryDisplay)
            </DisplayTemplate>
         </DataGridColumn>
        <DataGridColumn Field="ThorFieldId" Caption="Field ID" Width="15%" Filterable="false" Sortable="false" Editable>
            <DisplayTemplate>
                @(context?.ThorField?.FieldDisplay)
            </DisplayTemplate>
            <EditTemplate>
                @{
                    <SelectList 
                        TItem="ThorField" 
                        TValue="string" 
                        Data="@fieldList" 
                        TextField="@((item)=>item.FieldDisplay)" 
                        ValueField="@((item)=>item.ThorFieldId)"
                        SelectedValueChanged="@(e => {context.CellValue = Convert.ToString(e);} )"
                        SelectedValue="@((string?)context.CellValue ?? context.Item.ThorFieldId)"
                                DefaultItemText=@defaultFieldDropdownValue>
                    </SelectList>
                }
            </EditTemplate>
         </DataGridColumn>
        <DataGridColumn Field="@nameof(ProtocolField.ThorFieldDisplay)" Width="15%" Caption="Field Display" Filterable="true" Sortable="true" SortDirection="SortDirection.Ascending">
            <DisplayTemplate>
                @(context.ThorFieldDisplay)
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="IsEnabled" Width="15%" Caption="Enabled" Filterable="true" Sortable="true" Editable>
            <DisplayTemplate>
                @(context.IsEnabled ? "Enabled" : "Disabled")
            </DisplayTemplate>
            <EditTemplate>
                <Select TValue="bool" SelectedValueChanged="@( v => {context.CellValue = v;})" SelectedValue="@((bool)context.CellValue)">
                    <SelectItem Value="false">Disabled</SelectItem>
                    <SelectItem Value="true">Enabled</SelectItem>
                </Select>
            </EditTemplate>
        </DataGridColumn>
        <DataGridColumn Field="IsRequired" Width="15%" Caption="Required" Filterable="true" Sortable="true" Editable>
            <DisplayTemplate>
                @(context.IsRequired ? "Required" : "Not Required")
            </DisplayTemplate>
            <EditTemplate>
                <Select TValue="bool" SelectedValueChanged="@( v => {context.CellValue = v;})" SelectedValue="@((bool)context.CellValue)">
                    <SelectItem Value="false">Not Required</SelectItem>
                    <SelectItem Value="true">Required</SelectItem>
                </Select>
            </EditTemplate>
        </DataGridColumn>
        <DataGridColumn Field="CanBeDictionary" Width="15%" Caption="Can be a Pick List" Filterable="true" Sortable="true" Editable>
            <DisplayTemplate>
                @(context.CanBeDictionary ? "Yes" : "No")
            </DisplayTemplate>
            <EditTemplate>
                <Select TValue="bool" SelectedValueChanged="@( v => {context.CellValue = v;})" SelectedValue="@((bool)context.CellValue)">
                    <SelectItem Value="false">No</SelectItem>
                    <SelectItem Value="true">Yes</SelectItem>
                </Select>
            </EditTemplate>
        </DataGridColumn>
        <DataGridColumn Field="IsMultiForm" Width="15%" Caption="Is MultiForm" Filterable="true" Sortable="true" Editable>
            <DisplayTemplate>
                @(context.IsMultiForm ? "Yes" : "No")
            </DisplayTemplate>
            <EditTemplate>
                <Select TValue="bool" SelectedValueChanged="@( v => {context.CellValue = v;})" SelectedValue="@((bool)context.CellValue)">
                    <SelectItem Value="false">No</SelectItem>
                    <SelectItem Value="true">Yes</SelectItem>
                </Select>
            </EditTemplate>
        </DataGridColumn>
         <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="true">
             <EditCommandTemplate>
                 <Button Disabled="@preventEdit"><Icon Name="IconName.Edit" Clicked="@context.Clicked" /></Button>
             </EditCommandTemplate>
             <SaveCommandTemplate>
                 <Button><Icon Name="IconName.Save" Clicked="@context.Clicked" /></Button>
             </SaveCommandTemplate>
             <CancelCommandTemplate>
                 <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
             </CancelCommandTemplate>
             <ClearFilterCommandTemplate>
                 <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
             </ClearFilterCommandTemplate>
             <DeleteCommandTemplate>
                 <Button><Icon Name="IconName.Delete" Clicked="@context.Clicked" /></Button>
             </DeleteCommandTemplate>
         </DataGridCommandColumn>
     </DataGridColumns>
     <ButtonRowTemplate>
        <Button Color="Color.Primary" Clicked="context.NewCommand.Clicked" Disabled="@preventEdit">
            Add
        </Button>
        <Button Color="Color.Primary" Clicked="@(async evnt => await RefreshFields())" Disabled="@preventFieldRefresh">
            Refresh from Profile
        </Button>
        @{
            if (!hasProfile)
            {
                <Text>&nbsp;Select a profile / monitoring method</Text>
            }
            else if (hasFieldMappings)
            {
                <Text>&nbsp;Field mappings exist</Text>
            }
        }        
     </ButtonRowTemplate>
     <EmptyTemplate>
         <div class="box">
             No fields were found.
         </div>
     </EmptyTemplate>
 </DataGrid>
@code {
    [Inject] IProtocolMappingService protocolMappingService { get; set; } = null!;
    [Inject] IProtocolFieldService protocolFieldService { get; set; } = null!;
    [Inject] IProtocolFieldMappingService protocolFieldMappingService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] INotificationService notificationService { get; set; } = null!;
    [Inject] private IMessageService messageService { get; set; } = null!;
    [Inject] IThorCategoryService categoryService { get; set; } = null!;
    [Inject] IThorFieldService thorFieldService { get; set; } = null!;
    [Parameter] public int protocolMappingId { get; set; }
    [Parameter] public bool preventEdit { get; set; }

    private bool hasFieldMappings = false;
    private bool hasProtocolFields = false;
    private bool hasProfile = false;

    private bool preventFieldRefresh
    {
        get
        {
            return (preventEdit || !hasProfile || hasFieldMappings);
        }
    }

    private IList<ThorCategory> categoryList;
    private IList<ThorField> fieldList = new List<ThorField>();
    private string currentCategoryId = String.Empty;
    private bool deleteConfirmed = false;

    private ProtocolMapping protocolMapping;
    private DataGrid<ProtocolField> dataGridRef;
    private ProtocolField selectedField;
    private IList<ProtocolField> protocolFields = new List<ProtocolField>();

    private string defaultFieldDropdownValue = "Select";

    private async Task RefreshFields()
    {
        if (protocolMapping == null)
            return;

        this.hasFieldMappings = await protocolFieldMappingService.HasProtocolFieldMappingsForProtocolMapping(protocolMapping.ProtocolMappingId);
        if (this.hasFieldMappings)
        {
            await notificationService.Error("Field mappings exist");
            return;
        }

        this.hasProtocolFields = await protocolFieldService.HasProtocolFieldsByMappingId(protocolMapping.ProtocolMappingId);

        if (protocolMapping.ProfileId == null || protocolMapping.ProfileId == 0)
        {
            await notificationService.Error("Profile not set");
            return;
        }

        if (hasProtocolFields)
        {
            var result = await messageService.Confirm("Are you sure you want to delete the existing fields? This will reset the field list and field properties to defaults.", "Confirmation");
            if (!result)
            {
                return;
            }
            await notificationService.Info("Deleting existing protocol fields...");
            await protocolFieldService.DeleteAllFieldsForMappingId(protocolMapping.ProtocolMappingId);
        }

        await notificationService.Info("Creating protocol fields from profile...");
        await protocolFieldService.CreateProtocolFieldsFromProfile(protocolMapping.ProfileId, protocolMapping.ProtocolMappingId);

        await notificationService.Info("Loading protocol Fields...");
        this.protocolFields = await protocolFieldService.GetAllProtocolFieldsByMappingId(protocolMapping.ProtocolMappingId);

    }

    private string? TestContext(CellEditContext<ProtocolField> context, string? fieldValue)
    {
        return (string?)context.CellValue ?? fieldValue;
    }

    protected async Task RefreshCategoryList(string currentFieldId = null)
    {
        System.Console.WriteLine("RefreshCategoryList");
        System.Console.WriteLine("currentFieldId: " + currentFieldId);

        var fullFieldList = await thorFieldService.GetFieldsForMapping(protocolMappingId);
        var protocolFieldList = protocolFields.GroupBy(x => x.ThorFieldId).Select(x => x.Key).ToList();
        var fieldHash = new HashSet<string>(protocolFieldList);
        this.categoryList = fullFieldList.Where(x => x.ThorFieldId == currentFieldId || !fieldHash.Contains(x.ThorFieldId)).Select(x => x.Category!).Distinct().ToList();

        // Print sorted category list as json
        System.Console.WriteLine("RefreshCategoryList categoryList");
        System.Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(categoryList));
        await dataGridRef.Refresh();
    }

    protected async Task RefreshFieldList(string currentCategoryId, string currentFieldId=null)
    {
        if (currentCategoryId == null)
        {
            this.fieldList = new List<ThorField>();
            return;
        }
        System.Console.WriteLine("RefreshFieldList");
        System.Console.WriteLine("currentCategoryId: " + currentCategoryId);
        System.Console.WriteLine("currentFieldId: " + currentFieldId);

        var fullFieldList = await thorFieldService.GetFieldsForMapping(protocolMappingId);
        var protocolFieldList = protocolFields.Where(x => x.ThorDataCategoryId == currentCategoryId).GroupBy(x => x.ThorFieldId).Select(x => x.Key).ToList();
        var fieldHash = new HashSet<string>(protocolFieldList);
        this.fieldList = fullFieldList.Where(x => 
            x.ThorDataCategoryId == currentCategoryId && 
            ( 
                currentFieldId == x.ThorFieldId || 
                !fieldHash.Contains(x.ThorFieldId) 
            )).OrderBy(x => x.FieldDisplay).ToList();

        // Print sorted field list as json
        System.Console.WriteLine("RefreshFieldList fieldList");
        System.Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(fieldList));
        await dataGridRef.Refresh();
    }

    protected override async Task OnInitializedAsync()
    {
        this.protocolMapping = await protocolMappingService.GetProtocolMapping(protocolMappingId);

        this.hasProfile = this.protocolMapping.ProfileId != null && this.protocolMapping.ProfileId > 0;
        this.hasProtocolFields = await protocolFieldService.HasProtocolFieldsByMappingId(protocolMapping.ProtocolMappingId);
        this.hasFieldMappings = await protocolFieldMappingService.HasProtocolFieldMappingsForProtocolMapping(protocolMapping.ProtocolMappingId);
        var watch = System.Diagnostics.Stopwatch.StartNew();
        await notificationService.Info("Loading OARS Fields...");
        this.protocolFields = await protocolFieldService.GetAllProtocolFieldsByMappingId(protocolMapping.ProtocolMappingId);
        watch.Stop();
        var elapsedMs = watch.ElapsedMilliseconds;
        System.Console.WriteLine($"Protocol Category Field Elapsed time: {elapsedMs} ms");
    }

    public ProtocolField CreateNewItem()
    {
        selectedField = null;
        currentCategoryId = String.Empty;

        RefreshCategoryList().Wait();
        fieldList = new List<ThorField>();

        return new ProtocolField();
    }

    public ProtocolField CreateEditItem(ProtocolField protocolField)
    {
        selectedField = protocolField;
        currentCategoryId = protocolField.ThorDataCategoryId;

        RefreshCategoryList(selectedField.ThorFieldId).Wait();
        RefreshFieldList(selectedField.ThorDataCategoryId, selectedField.ThorFieldId).Wait();

        return protocolField;
    }

    public async Task<CancellableRowChange<ProtocolField>> Verify(CancellableRowChange<ProtocolField, Dictionary<string, object>> e)
    {
        await notificationService.Info("Validating...");

        // e.Values
        var protocolFieldId = e.Item.ProtocolFieldId;
        e.Values.TryGetValue("ThorFieldId", out var thorFieldId);

        List<string> missingFields = new List<string>();

        var thorFieldIdStr = (string)thorFieldId;

        if (string.IsNullOrWhiteSpace(thorFieldIdStr) || thorFieldIdStr == defaultFieldDropdownValue)
        {
            missingFields.Add("OARS Field");
        }

        if (missingFields.Count > 0)
        {
            await notificationService.Error("Missing fields: " + string.Join(", ", missingFields));
            e.Cancel = true;
            return e;
        }

        await notificationService.Info("Validating uniqueness...");
        if (!string.IsNullOrWhiteSpace((string?)thorFieldId) && protocolFields.Any(x => x.ThorFieldId == (string)thorFieldId && x.ProtocolFieldId != protocolFieldId))
        {
            await notificationService.Error($"The field {e.Item.ThorFieldId} already exists");
            e.Cancel = true;
        }

        return e;
    }

    public async void Save(SavedRowItem<ProtocolField, Dictionary<string, object>> savedRowItem)
    {
        var toSave = savedRowItem.Item;
        bool saved = await protocolFieldService.SaveProtocolField(protocolMappingId, toSave);

        if (saved)
        {
            await notificationService.Success("Protocol Field successfully saved");
            this.protocolFields = await protocolFieldService.GetAllProtocolFieldsByMappingId(protocolMappingId);
            return;
        }
        else
        {
            await notificationService.Error("Error saving protocol field");
            return;
        }
    }

    public async void Delete(ProtocolField item)
    {
        bool deleted = await protocolFieldService.DeleteField(item.ProtocolFieldId);
        if (deleted)
        {
            await notificationService.Success("Field successfully deleted");
            return;
        }
        else
        {
            await notificationService.Error("Error deleting field");
            return;
        }
    }

    async Task OnSelectedCategoryValueChanged(string categoryId)
    {
        if (currentCategoryId == categoryId)
        {
            return;
        }
        currentCategoryId = categoryId;
        await RefreshFieldList(categoryId);
    }

    public async Task<CancellableRowChange<ProtocolField>> ConfirmDelete(CancellableRowChange<ProtocolField> item)
    {
        var result = await messageService.Confirm("Are you sure you want to delete this field?", "Confirmation");
        if (!result)
        {
            item.Cancel = true;
        }
        return item;
    }
}
