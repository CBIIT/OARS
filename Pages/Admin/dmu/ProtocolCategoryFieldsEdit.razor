@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@inject IHttpContextAccessor httpContextAccessor
@layout AdminLayout

<DataGrid @ref=dataGridRef
          TItem="ProtocolField"
          Class="admindatagrid"
          Data="@protocolFields"
          Editable
          SelectionMode="DataGridSelectionMode.Single"
          Responsive
          Striped
          ShowPager
          ShowPageSizes
          Filterable
          Sortable
           FilterMethod="DataGridFilterMethod.StartsWith"
           MaxPaginationLinks="5"
           PagerPosition="DataGridPagerPosition.Bottom"
           PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
          FixedHeader
           FixedHeaderDataGridHeight="calc(100vh - 240px)"
           FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
           EditMode="DataGridEditMode.Inline"
           RowUpdated="@Save"
           RowInserted="@Save"
           RowRemoved="@Delete"
           RowRemoving="@ConfirmDelete">
     <DataGridColumns>
         <DataGridColumn Caption="Data Category" Width="15%" Editable Sortable="true" SortDirection="SortDirection.Ascending">
            <DisplayTemplate>
                @context?.ThorDataCategoryId
            </DisplayTemplate>
            <EditTemplate>
                <SelectList TItem="ThorCategory" TValue="string" Data="@categoryList" TextField="@((item)=>item.CategoryName)" ValueField="@((item)=>item.ThorDataCategoryId)" SelectedValueChanged="@(e =>
                                    {
                                        context.Item.ThorDataCategoryId = Convert.ToString(e);
                                        OnSelectedCategoryValueChanged(context.Item.ThorDataCategoryId);
                                    })" SelectedValue="@(context.Item.ThorDataCategoryId)" DefaultItemText="Select the OARS DataCategory"></SelectList>
            </EditTemplate>
         </DataGridColumn>
         <DataGridColumn Caption="Field" Width="15%" Filterable="true" Editable>
            <DisplayTemplate>
                @context?.ThorFieldId
            </DisplayTemplate>
            <EditTemplate>
                @{
                    if (currentCategoryId == null || currentCategoryId == String.Empty)
                    {
                        OnSelectedCategoryValueChanged(context.Item?.ThorField?.ThorDataCategoryId);
                    }

                    <SelectList TItem="ThorField" TValue="string" Data="@fieldList" TextField="@((item)=>item.ThorFieldId)" ValueField="@((item)=>item.ThorFieldId)"
                                SelectedValue="@((string?)context.CellValue ?? context.Item.ThorFieldId)"
                                SelectedValueChanged="@(e =>
                                    {
                                        context.Item.ThorFieldId = Convert.ToString(e);
                                    } )" DefaultItemText="Select">
                    </SelectList>
                }
            </EditTemplate>
         </DataGridColumn>
         <DataGridColumn Width="15%" Caption="Enabled" Filterable="true" Sortable="false" Editable>
            <DisplayTemplate>
                @(context?.IsEnabled.ToString() == "Y" ? "Enabled" : "Disabled")
            </DisplayTemplate>
            <EditTemplate>
                <SelectList TItem="SelectOption" TValue="string?" Data="@protocolEnabledOptions" TextField="@((item)=>item.Text)" ValueField="@((item)=>item.Value)"
                    SelectedValueChanged="@( v =>{ context.Item.IsEnabled = v[0]; dataGridRef.Refresh();})" SelectedValue="@((string?)context.CellValue ?? context.Item.IsEnabled.ToString())" DefaultItemText=""></SelectList>
            </EditTemplate>
        </DataGridColumn>
        <DataGridColumn Width="15%" Caption="Required" Filterable="true" Sortable="false" Editable>
            <DisplayTemplate>
                @(context?.IsRequired.ToString() == "Y" ? "Required" : "Not Required")
            </DisplayTemplate>
            <EditTemplate>
                <SelectList TItem="SelectOption" TValue="string?" Data="@protocolRequiredOptions" TextField="@((item)=>item.Text)" ValueField="@((item)=>item.Value)" SelectedValueChanged="@( v =>{context.Item.IsRequired = v[0]; dataGridRef.Refresh();})" SelectedValue="@((string?)context.CellValue ?? context.Item.IsRequired.ToString())" DefaultItemText=""></SelectList>
            </EditTemplate>
        </DataGridColumn>
        <DataGridColumn Width="15%" Caption="Can be a Pick List" Filterable="true" Sortable="false" Editable>
            <DisplayTemplate>
                @(context?.CanBeDictionary.ToString() == "Y" ? "Yes" : "No")
            </DisplayTemplate>
            <EditTemplate>
                <SelectList TItem="SelectOption" TValue="string?" Data="@protocolPickListOptions" TextField="@((item)=>item.Text)" ValueField="@((item)=>item.Value)" SelectedValueChanged="@( v =>{context.Item.CanBeDictionary = v[0]; dataGridRef.Refresh();})" SelectedValue="@((string?)context.CellValue ?? context.Item.CanBeDictionary.ToString())" DefaultItemText=""></SelectList>
            </EditTemplate>
        </DataGridColumn>
        <DataGridColumn Width="15%" Caption="Is MultiForm" Filterable="true" Sortable="false" Editable>
            <DisplayTemplate>
                @(context?.IsMultiForm.ToString() == "Y" ? "Yes" : "No")
            </DisplayTemplate>
            <EditTemplate>
                <SelectList TItem="SelectOption" TValue="string?" Data="@protocolMultiFormOptions" TextField="@((item)=>item.Text)" ValueField="@((item)=>item.Value)" SelectedValueChanged="@( v =>{context.Item.IsMultiForm = v[0]; dataGridRef.Refresh();})" SelectedValue="@((string?)context.CellValue ?? context.Item.IsMultiForm.ToString())" DefaultItemText=""></SelectList>
            </EditTemplate>
        </DataGridColumn>
         <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="true">
             <EditCommandTemplate>
                 <Button Disabled="@allowEdit"><Icon Name="IconName.Edit" Clicked="@context.Clicked" /></Button>
             </EditCommandTemplate>
             <SaveCommandTemplate>
                 <Button><Icon Name="IconName.Save" Clicked="@context.Clicked" /></Button>
             </SaveCommandTemplate>
             <CancelCommandTemplate>
                 <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
             </CancelCommandTemplate>
             <ClearFilterCommandTemplate>
                 <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
             </ClearFilterCommandTemplate>
             <DeleteCommandTemplate>
                 <Button><Icon Name="IconName.Delete" Clicked="@context.Clicked" /></Button>
             </DeleteCommandTemplate>
         </DataGridCommandColumn>
     </DataGridColumns>
     <ButtonRowTemplate>
         <Button Color="Color.Primary" Clicked="@AddRow" Disabled="@allowEdit">
            Add
        </Button>
     </ButtonRowTemplate>
     <EmptyTemplate>
         <div class="box">
             No fields were found.
         </div>
     </EmptyTemplate>
 </DataGrid>
 @code {
    [Inject] IProtocolFieldService protocolFieldService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] INotificationService notificationService { get; set; }
    [Inject] private IMessageService messageService { get; set; } = null!;
    [Inject] IThorCategoryService categoryService { get; set; } = null!;
    [Inject] IThorFieldService thorFieldService { get; set; } = null!;
    [Parameter] public int protocolMappingId { get; set; }
    [Parameter] public bool allowEdit { get; set; }

    private IList<ThorCategory> categoryList;
    private IList<ThorField> fieldList = new List<ThorField>();
    private string currentCategoryId = String.Empty;
    private bool deleteConfirmed = false;

    const string Yes = "Y";
    const string No = "N";

    private enum YesNoSelect
    {
        S,
        Y,
        N
    }

    private class SelectOption
    {
        public string Text { get; set; }
        public string Value { get; set; }
    }

    private DataGrid<ProtocolField> dataGridRef;
    private IList<ProtocolField> protocolFields = new List<ProtocolField>();

    private List<SelectOption> protocolEnabledOptions = new List<SelectOption>
    {
        new SelectOption { Text = "Enabled", Value = "Y" },
        new SelectOption { Text = "Disabled", Value = "N" }
    };

    private List<SelectOption> protocolRequiredOptions = new List<SelectOption>
    {
        new SelectOption { Text = "Required", Value = "Y" },
        new SelectOption { Text = "Not Required", Value = "N" }
    };

    private List<SelectOption> protocolPickListOptions = new List<SelectOption>
    {
        new SelectOption { Text = "Yes", Value = "Y" },
        new SelectOption { Text = "No", Value = "N" }
    };

    private List<SelectOption> protocolMultiFormOptions = new List<SelectOption>
    {
        new SelectOption { Text = "Yes", Value = "Y" },
        new SelectOption { Text = "No", Value = "N" }
    };

    protected override async Task OnInitializedAsync()
    {
        var watch = System.Diagnostics.Stopwatch.StartNew();
        this.categoryList = await categoryService.GetCategories();
        this.protocolFields = await protocolFieldService.GetAllProtocolFieldsByMappingId(protocolMappingId);
        watch.Stop();
        var elapsedMs = watch.ElapsedMilliseconds;
        System.Console.WriteLine($"Protocol Category Field Elapsed time: {elapsedMs} ms");
    }

    public async void Save(SavedRowItem<ProtocolField, Dictionary<string, object>> savedRowItem)
    {
        var toSave = savedRowItem.Item;
        bool saved = await protocolFieldService.SaveProtocolField(protocolMappingId, toSave);

        if (saved)
        {
            await notificationService.Success("Protocol Field successfully saved");
            return;
        }
        else
        {
            await notificationService.Error("Error saving protocol field");
            return;
        }
    }

    public async void Delete(ProtocolField item)
    {
        bool deleted = await protocolFieldService.DeleteField(item.ProtocolFieldId);
        if (deleted)
        {
            await notificationService.Success("Field successfully deleted");
            return;
        }
        else
        {
            await notificationService.Error("Error deleting field");
            return;
        }
    }

    async Task OnSelectedCategoryValueChanged(string categoryId)
    {
        currentCategoryId = categoryId;
        this.fieldList = await thorFieldService.GetFields();
        this.fieldList = fieldList.Where(f => f.ThorDataCategoryId.Equals(categoryId)).ToList();
    }

    public async Task<CancellableRowChange<ProtocolField>> ConfirmDelete(CancellableRowChange<ProtocolField> item)
    {
        var result = await messageService.Confirm("Are you sure you want to delete this field?", "Confirmation");
        if (!result)
        {
            item.Cancel = true;
        }
        return item;
    }

    public void AddRow()
    {
        currentCategoryId = String.Empty;
        dataGridRef.New();    
    }
}
