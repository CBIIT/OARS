@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@inject IHttpContextAccessor httpContextAccessor
@inject IConfiguration configuration
@layout AdminLayout
@page "/admin/dmu/protocol-tac/{protocolMappingId:int}"

<AdminRoleCheck AllowedRoles="@(new List<string> { "IT" })"></AdminRoleCheck>
<DataGrid @ref=dataGridRef
          TItem="ProtocolTac"
          Class="admindatagrid"
          Data="@protocolTacList"
          Editable
          Responsive
          Striped
          Sortable
          ShowPager
          ShowPageSizes
          Filterable
           FilterMethod="DataGridFilterMethod.Contains"
           MaxPaginationLinks="5"
           PagerPosition="DataGridPagerPosition.Bottom"
           PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
          FixedHeader
           FixedHeaderDataGridHeight="calc(100vh - 240px)"
           FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
           EditMode="DataGridEditMode.Inline"
           RowUpdated="@Save"
           RowInserted="@Save"
          @bind-SelectedRow="@selectedRow"
          RowRemoving=@ConfirmDelete
          RowRemoved=@DeleteRow
          RowUpdating="@Verify"
          RowInserting="@Verify">
     <DataGridColumns>
        <DataGridColumn Field="@nameof(ProtocolTac.TacCode)" Width="30%" Caption="TAC Code" Editable Filterable="true" Sortable="true" SortDirection="SortDirection.Ascending">
        </DataGridColumn>
        <DataGridColumn Field="@nameof(ProtocolTac.TacDescription)" Width="50%" Caption="TAC Description" Editable Filterable="true" Sortable="true">
         </DataGridColumn>
         
        <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="true">
            <EditCommandTemplate>
                <Button Disabled="@allowEdit"><Icon Name="IconName.Edit" Clicked="@context.Clicked" /></Button>
            </EditCommandTemplate>
            <SaveCommandTemplate>
                <Button><Icon Name="IconName.Save" Clicked="@context.Clicked" /></Button>
            </SaveCommandTemplate>
            <CancelCommandTemplate>
                <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
            </CancelCommandTemplate>
            <ClearFilterCommandTemplate>
                <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
            </ClearFilterCommandTemplate>
             <DeleteCommandTemplate>
                 <Button><Icon Name="IconName.Delete" Clicked="@context.Clicked" /></Button>
             </DeleteCommandTemplate>
        </DataGridCommandColumn>
     </DataGridColumns>
     <ButtonRowTemplate>
         <Button Color="Color.Primary" Clicked="context.NewCommand.Clicked" Disabled="@allowEdit">Add</Button>
     </ButtonRowTemplate>
     <EmptyTemplate>
         <div class="box">
             No Protocol TACs were found.
         </div>
     </EmptyTemplate>
 </DataGrid>


@code {
    [Inject] IProtocolTACService ProtocolTacService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] INotificationService notificationService { get; set; }
    [Inject] private IMessageService messageService { get; set; } = null!;

    [Parameter] public int protocolMappingId { get; set; }
    [Parameter] public bool allowEdit { get; set; }

    private DataGrid<ProtocolTac> dataGridRef;
    private IList<ProtocolTac> protocolTacList;
    private ProtocolTac selectedRow;

    protected override async Task OnInitializedAsync()
    {
        var watch = System.Diagnostics.Stopwatch.StartNew();
        if (protocolMappingId != null) this.protocolTacList = await ProtocolTacService.GetProtocolTACByProtocolMappingId(protocolMappingId);
        watch.Stop();
        var elapsedMs = watch.ElapsedMilliseconds;
        System.Console.WriteLine($"Protocol TAC Elapsed time: {elapsedMs} ms");
    }


    public async Task<CancellableRowChange<ProtocolTac>> Verify(CancellableRowChange<ProtocolTac, Dictionary<string, object>> e)
    {
        await notificationService.Info("Validating...");

        e.Values.TryGetValue("TacCode", out var TacCode);
        e.Values.TryGetValue("TacDescription", out var TacDescription);
        var protocolTacId = e.Item.ProtocolTacId;

        List<string> missingFields = new List<string>();

        if (string.IsNullOrWhiteSpace((string?)TacCode))
        {
            missingFields.Add("TAC Code");
        }

        if (string.IsNullOrWhiteSpace((string?)TacDescription))
        {
            missingFields.Add("TAC Description");
        }

        if (missingFields.Count > 0)
        {
            await notificationService.Error("Missing fields: " + string.Join(", ", missingFields));
            e.Cancel = true;
            return e;
        }

        await notificationService.Info("Validating uniqueness...");
        IList<ProtocolTac> currentTacs = protocolTacList.Where(x => x.TacCode == (string)TacCode && x.ProtocolTacId != protocolTacId).ToList();
        if (currentTacs.Count() > 0)
        {
            await notificationService.Error($"The code {TacCode} already exists");
            e.Cancel = true;
        }

        return e;
    }

    public async void Save(SavedRowItem<ProtocolTac, Dictionary<string, object>> e)
    {
        var toSave = e.Item;
        toSave.ProtocolMappingId = this.protocolMappingId;

        if (toSave.TacCode == "" || toSave.TacDescription == "")
        {
            await notificationService.Error("Please make sure to enter the TAC Code and TAC Description values in order to save!");
            return;
        }

        bool saved = await ProtocolTacService.SaveProtocolTAC(toSave);

        if (saved)
        {
            await notificationService.Success("Protocol TAC successfully saved");
            this.protocolTacList = await ProtocolTacService.GetProtocolTACByProtocolMappingId(protocolMappingId);
            return;
        }
        else
        {
            await notificationService.Error("Error saving the Protocol TAC");
            return;
        }
    }


    public async Task<CancellableRowChange<ProtocolTac>> ConfirmDelete(CancellableRowChange<ProtocolTac> item)
    {
        if (!await messageService.Confirm("Are you sure you want to delete this protocol TAC?", "Confirmation"))
        {
            item.Cancel = true;
        }

        return item;
    }

    private async Task<Boolean> DeleteRow(ProtocolTac deleteRow)
    {
        bool deleted = await ProtocolTacService.DeleteProtocolTAC(deleteRow.ProtocolTacId);

        if (deleted)
        {
            await notificationService.Success("Protocol TAC successfully deleted!");
            var currentDeletedRecord = protocolTacList.Where(p => p.ProtocolTacId == deleteRow.ProtocolTacId).FirstOrDefault();
            if (currentDeletedRecord != null) protocolTacList.Remove(currentDeletedRecord);
            return true;
        }
        else
        {
            await notificationService.Error("Error deleting the Protocol TAC");
            return false;
        }
    }
}