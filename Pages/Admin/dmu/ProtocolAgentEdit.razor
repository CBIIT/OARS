@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@inject IHttpContextAccessor httpContextAccessor
@layout AdminLayout

<DataGrid @ref=dataGridRef
          TItem="ProtocolAgent"
          Class="admindatagrid"
          Data="@protocolAgents"
          Editable
          Responsive
          Striped
          ShowPager
          ShowPageSizes
          Filterable
           FilterMethod="DataGridFilterMethod.StartsWith"
           MaxPaginationLinks="5"
           PagerPosition="DataGridPagerPosition.Bottom"
           PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
          FixedHeader
           FixedHeaderDataGridHeight="calc(100vh - 240px)"
           FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
           EditMode="DataGridEditMode.Inline"
           RowUpdated="@Save"
           RowInserted="@Save"
           RowRemoved="@Delete">
     <DataGridColumns>
         <DataGridColumn Width="15%" Caption="NSC Number" Field="@nameof(ProtocolAgent.NscNumber)" Filterable="true" Sortable="false" Editable>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(ProtocolAgent.AgentName)" Width="15%" Caption="Agent Name" Filterable="true" Sortable="false" Editable>
        </DataGridColumn>
         <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="true">
             <EditCommandTemplate>
                 <Button><Icon Name="IconName.Edit" Clicked="@context.Clicked" /></Button>
             </EditCommandTemplate>
             <SaveCommandTemplate>
                 <Button><Icon Name="IconName.Save" Clicked="@context.Clicked" /></Button>
             </SaveCommandTemplate>
             <CancelCommandTemplate>
                 <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
             </CancelCommandTemplate>
             <ClearFilterCommandTemplate>
                 <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
             </ClearFilterCommandTemplate>
             <DeleteCommandTemplate>
                 <Button><Icon Name="IconName.Delete" Clicked="@context.Clicked" /></Button>
             </DeleteCommandTemplate>
         </DataGridCommandColumn>
     </DataGridColumns>
     <ButtonRowTemplate>
         <Button Color="Color.Primary" Clicked="@context.NewCommand.Clicked">Add</Button>
     </ButtonRowTemplate>
     <EmptyTemplate>
         <div class="box">
             No agents were found.
         </div>
     </EmptyTemplate>
 </DataGrid>
 @code {
    [Inject] private IProtocolAgentService protocolAgentService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] private IMessageService messageService { get; set; } = null!;
    [Inject] INotificationService notificationService { get; set; }
    [Parameter] public int protocolMappingId { get; set; }

    private DataGrid<ProtocolAgent> dataGridRef;
    private IList<ProtocolAgent> protocolAgents = new List<ProtocolAgent>();

    protected override async Task OnInitializedAsync()
    {
        this.protocolAgents = await protocolAgentService.GetAgentsByMappingId(protocolMappingId);
    }


    public async void Save(SavedRowItem<ProtocolAgent, Dictionary<string, object>> savedRowItem)
    {
        var toSave = savedRowItem.Item;
        bool saved = await protocolAgentService.SaveAgent(toSave, this.protocolMappingId);

        if (saved)
        {
            await notificationService.Success("Agent successfully saved");
            return;
        }
        else
        {
            await notificationService.Error("Error saving agent");
            return;
        }
    }

    public async void Delete(ProtocolAgent item)
    {
        if(await messageService.Confirm("Are you sure you want to delete this agent?", "Confirmation"))
        {
            bool deleted = await protocolAgentService.DeleteAgent(item);
            if (deleted)
            {
                await notificationService.Success("Agent successfully deleted");
                return;
            }
            else
            {
                await notificationService.Error("Error deleting agent");
                return;
            }
        }

    }
}