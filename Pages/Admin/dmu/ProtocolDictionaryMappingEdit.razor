@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@inject IHttpContextAccessor httpContextAccessor
@inject IConfiguration configuration
@layout AdminLayout
@page "/admin/dmu/dictionary-list-map/{fieldId:int}"
<AdminRoleCheck AllowedRoles="@(new List<string> { "IT" })"></AdminRoleCheck>
<Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1"><h2>DMU Mapping</h2></Div>
<Row Background="Background.Light" Style="padding-bottom:10px;">
    <Row>
        <Text><b>Protocol:</b> @protocolTitle</Text>
    </Row>
    <Row>

    </Row>
</Row>
<DataGrid @ref=dataGridRef
          TItem="ProtocolDictionaryMapping"
          Class="admindatagrid"
          Data="@protocolDictionaryList"
          Editable
          Responsive
          Striped
          ShowPager
          ShowPageSizes
          MaxPaginationLinks="5"
          PagerPosition="DataGridPagerPosition.Bottom"
          PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
          FixedHeader
          FixedHeaderDataGridHeight="calc(100vh - 240px)"
          FixedHeaderDataGridMaxHeight="calc(100vh - 240px)">
    <DataGridColumns>
        <DataGridColumn Field="@nameof(ProtocolDictionaryMapping.ProtocolEDCDictionaryId)" Width="50%" Caption="For each EDC Dictionary Value">
            <DisplayTemplate>
                @context.ProtocolEDCDictionaryName
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(ProtocolDictionaryMapping.THORDictionaryId)" Width="50%" Caption="Select THOR Dictionary Value">
            <DisplayTemplate>
                @thorDictionaries.Where(d => d.ThorDictionaryId == context.THORDictionaryId).Select(d => d.DictionaryName).FirstOrDefault()
            </DisplayTemplate>
            <EditTemplate>
                <Autocomplete TItem="ThorDictionary"
                              TValue="int"
                              TextField="@((item) => item.DictionaryName)"
                              ValueField="@((item) => item.ThorDictionaryId)"
                              Data="@thorDictionaries"
                              Placeholder="Search for a THOR Dictionary Value"
                              @bind-SelectedValue="context.Item.THORDictionaryId"
                              Virtualize />
            </EditTemplate>
        </DataGridColumn>
        <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="false">
            <EditCommandTemplate>
                <Button><Icon Name="IconName.Edit" Clicked="@context.Clicked" /></Button>
            </EditCommandTemplate>
            <SaveCommandTemplate>
                <Button><Icon Name="IconName.Save" Clicked="@context.Clicked" /></Button>
            </SaveCommandTemplate>
        </DataGridCommandColumn>
    </DataGridColumns>
    <EmptyTemplate>
        <div class="box">
            No dictionary mappings found.
        </div>
    </EmptyTemplate>
</DataGrid>


@code {
    [Inject] IProtocolDictionaryMappingService dictionaryMappingService { get; set; } = null!;
    [Inject] IThorDictionaryService thorDictionaryService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] INotificationService notificationService { get; set; }
    [Inject] private IMessageService messageService { get; set; } = null!;

    [Parameter] public int protocolMappingId { get; set; }
    [Parameter] public int fieldId { get; set; }
    [Parameter] public string protocolTitle { get; set; }
    [Parameter] public string categoryName { get; set; }

    private DataGrid<ProtocolDictionaryMapping> dataGridRef;
    private IList<ProtocolDictionaryMapping> protocolDictionaryList;
    private IList<ThorDictionary> thorDictionaries;
    private List<int> selectedValues;

    protected override async Task OnInitializedAsync()
    {
        if (protocolMappingId != null)
        {
            this.protocolDictionaryList = await dictionaryMappingService.GetProtocolDictionaryMappings(protocolMappingId, fieldId);
            this.thorDictionaries = await thorDictionaryService.GetDictionaries();
        }

        // also will need to get the mapping from the fieldId, the get the actual ProtocolField id and obj, then can populate other stuff

    }
}