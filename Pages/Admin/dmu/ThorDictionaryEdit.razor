@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@inject IHttpContextAccessor httpContextAccessor
@layout AdminLayout
@page "/admin/dmu/dictionary-edit"

<AdminRoleCheck AllowedRoles="@(new List<string> { "IT" })"></AdminRoleCheck>
<DataGrid @ref=dataGridRef
          TItem="ThorDictionary"
          Class="admindatagrid"
          Data="@dictionaryList"
          Editable
          Responsive
          Striped
          Sortable
          ShowPager
          ShowPageSizes
          Filterable
          FilterMethod="DataGridFilterMethod.StartsWith"
          NewItemDefaultSetter="@SetActive"
          MaxPaginationLinks="5"
          PagerPosition="DataGridPagerPosition.Bottom"
          PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
          FixedHeader
          FixedHeaderDataGridHeight="calc(100vh - 240px)"
          FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
          EditMode="DataGridEditMode.Inline"
          RowUpdated="@Save"
          RowInserted="@Save"
          RowInserting="@Verify"
          HeaderRowStyling="@(new DataGridRowStyling() { Style="color=rgba(250, 141, 40, 1);" })">
    <DataGridColumns>
        <DataGridColumn Width="35%" Field="@nameof(ThorDictionary.DictionaryName)" Caption="OARS Dictionary Name" Editable Filterable="true" Sortable="true" SortDirection="SortDirection.Ascending">
        </DataGridColumn>
        <DataGridColumn Field="@nameof(ThorDictionary.DictionaryOption)" Width="35%" Caption="OARS Dictionary Option" Editable Filterable="true" Sortable="true">
        </DataGridColumn>
        <DataGridColumn Field="@nameof(ThorDictionary.DictionaryValue)" Caption="OARS Dictionary Value" Editable Filterable="true" Sortable="true" Width="20%">>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(ThorDictionary.SortOrder)" Caption="Order" Editable Filterable="true" Sortable="true" Width="8%">
        </DataGridColumn>
        <DataGridCheckColumn Field="@nameof(ThorDictionary.IsActive)" Caption="Active" Editable Width="7%">
            <DisplayTemplate>
                <Check TValue="bool" Checked="context.IsActive" Disabled="true" ReadOnly="true" />
            </DisplayTemplate>
        </DataGridCheckColumn>
        <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="false">
            <EditCommandTemplate>
                <Button><Icon Name="IconName.Edit" Clicked="@context.Clicked" /></Button>
            </EditCommandTemplate>
            <SaveCommandTemplate>
                <Button><Icon Name="IconName.Save" Clicked="@context.Clicked" /></Button>
            </SaveCommandTemplate>
            <CancelCommandTemplate>
                <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
            </CancelCommandTemplate>
            <ClearFilterCommandTemplate>
                <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
            </ClearFilterCommandTemplate>
        </DataGridCommandColumn>
    </DataGridColumns>
    <ButtonRowTemplate>
        <Button Color="Color.Primary" Clicked="context.NewCommand.Clicked">Add</Button>
    </ButtonRowTemplate>
    <EmptyTemplate>
        <div class="box">
            No dictionaries were found.
        </div>
    </EmptyTemplate>
</DataGrid>


@code {
    [Inject] IThorDictionaryService dictionaryService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] INotificationService notificationService { get; set; }

    private DataGrid<ThorDictionary> dataGridRef;
    private IList<ThorDictionary> dictionaryList;

    private ThorDictionary? selectedCategory;

    protected override async Task OnInitializedAsync()
    {
        this.dictionaryList = await dictionaryService.GetDictionaries();
    }

    public void SetActive(ThorDictionary item)
	{
		item.IsActive = true;
	}

    public async Task<CancellableRowChange<ThorDictionary>> Verify(CancellableRowChange<ThorDictionary, Dictionary<string, object>> e)
    {
        e.Values.TryGetValue("DictionaryName", out var dictName);
        e.Values.TryGetValue("SortOrder", out var order);
        if (dictName == null || order == null)
        {
            List<string> missingFields = new List<string>();
            if (dictName == null)
			{
				missingFields.Add("Dictionary Name");
			}
            if (order == null)
            {
                missingFields.Add("Order");
			}
            await notificationService.Error("Missing fields: " + string.Join(", ", missingFields));
            e.Cancel = true;
		}
		return e;
	}

    public async void Save(SavedRowItem<ThorDictionary, Dictionary<string, object>> e)
    {
        var newItem = e.Item;

        bool saved = await dictionaryService.SaveDictionary(newItem);

        if (saved)
        {
            await notificationService.Success("Dictionary successfully saved");
            return;
        }
        else
        {
            await notificationService.Error("Error saving dictionary");
            return;
        }
    }
}
