@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@inject IHttpContextAccessor httpContextAccessor
@layout AdminLayout
@page "/admin/dmu/select-study"
<AdminRoleCheck AllowedRoles="@(new List<string> { "IT" })" AllowedTHORRoles="@(new List<string> { "DMU Study Admin", "DMU Global Admin" })"></AdminRoleCheck>

<DataGrid @ref=dataGridRef
          TItem="ProtocolMapping"
          Class="admindatagrid"
          Data="@studyList"
          Editable
          Responsive
          Striped
          ShowPager
          ShowPageSizes
          Sortable
          Filterable
           FilterMethod="DataGridFilterMethod.StartsWith"
           MaxPaginationLinks="5"
           PagerPosition="DataGridPagerPosition.Bottom"
           PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
          FixedHeader
           FixedHeaderDataGridHeight="calc(100vh - 240px)"
           FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
           SelectionMode="DataGridSelectionMode.Multiple"
           @bind-SelectedRows="selectedProtocols">
     <DataGridColumns>
         <DataGridMultiSelectColumn Width="30px"></DataGridMultiSelectColumn>
        <DataGridColumn Width="10%" Caption="Version" Field="@nameof(ProtocolMapping.MappingVersion)" Editable Filterable="false" Sortable="false">
            <DisplayTemplate>
                @if(context.ProtocolMappingId == 0)
				{
					<Text>N/A</Text>
				}
				else
				{
					<Text>@context.MappingVersion</Text>
				}
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Width="20%" Field="Protocol.StudyId" Sortable="true" Filterable="true" Caption="Study ID" SortDirection="SortDirection.Ascending">
        </DataGridColumn>
        <DataGridColumn Width="50%" Field="Protocol.ProtocolTitle" Sortable="false" Filterable="true" Caption="Title">
        </DataGridColumn>
        <DataGridColumn Width="10%" Field="Status.StatusName" Sortable="false" Caption="Status">
        </DataGridColumn>
        <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="false">
            <EditCommandTemplate>
                 @if(context.Item.Status.StatusName != "Active" && context.Item.ProtocolMappingId != 0)
				 {
                    <Button><Icon Name="IconName.InfoCircle" Clicked="@(()=>EditMapping(context.Item))" /></Button>
                }
                else if(context.Item.ProtocolMappingId == 0)
                {
                    <Button><Icon Name="IconName.Add" Clicked="@(()=>EditMapping(context.Item))"/></Button>
                }
                else
				 {
					 <Button><Icon Name="IconName.Edit" Clicked="@(()=>EditMapping(context.Item))" /></Button>
				 }
            </EditCommandTemplate>
            <ClearFilterCommandTemplate>
                <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
            </ClearFilterCommandTemplate>
        </DataGridCommandColumn>
    </DataGridColumns>
    <ButtonRowTemplate>
        <Button Color="Color.Danger" Clicked="@ProcessSelectedStudies">Process Selected Studies</Button>
        <Button Color="Color.Secondary" Clicked="@ShowHideArchived">@(includeArchived ? "Hide Archived" : "Show Archived")</Button>
    </ButtonRowTemplate>
    <EmptyTemplate>
        <div class="box">
            No studies were found.
        </div>
    </EmptyTemplate>
</DataGrid>

@code {
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] INotificationService notificationService { get; set; }
    [Inject] IProtocolMappingService protocolMappingService { get; set; }
    [Inject] IStudyService studyService { get; set; }

    private DataGrid<ProtocolMapping> dataGridRef;
    private IList<ProtocolMapping> studyList;

    private List<ProtocolMapping> selectedProtocols;
    private bool includeArchived = false;

    protected override async Task OnInitializedAsync()
    {
        studyList = await protocolMappingService.GetProtocolMappings(includeArchived);
    }

    private async Task EditMapping(ProtocolMapping mapping)
    {
        if(mapping.ProtocolMappingId > 0)
        {
            navigation.NavigateTo($"/admin/dmu/study-admin/{mapping.ProtocolMappingId}?published={mapping.Status.StatusName}");
        }
        else
        {
            List<ProtocolPhase> phases = new List<ProtocolPhase>();
            await protocolMappingService.SaveProtocolMapping(mapping, phases);
            navigation.NavigateTo($"/admin/dmu/study-admin/{mapping.ProtocolMappingId}");
        }
    }

    private void AddStudy()
    {
        navigation.NavigateTo("/admin/dmu/study-setup");
    }

    private async void ShowHideArchived()
    {
        includeArchived = !includeArchived;
        studyList = await protocolMappingService.GetProtocolMappings(includeArchived);
        await dataGridRef.Refresh();
    }
    private async Task ProcessSelectedStudies()
	{
        //Placeholder for future functionality
    }
}
