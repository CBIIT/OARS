@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@inject IHttpContextAccessor httpContextAccessor
@inject IConfiguration configuration
@layout AdminLayout
@page "/admin/dmu/multi-form-field/{fieldId}"
<AdminRoleCheck AllowedRoles="@(new List<string> { "IT" })"></AdminRoleCheck>
<Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1"><h2>DMU Mapping</h2></Div>
<Row Background="Background.Light" Style="padding-bottom:10px;">
    <Row>
        <Text><b>Protocol:</b> @protocol</Text>
    </Row>
    <Row>
        <Text><b>Report Category:</b> @category</Text>
    </Row>
    <Row>
        <Text><b>Target OARS Field:</b> @fieldName </Text>
    </Row>
</Row>
<DataGrid @ref=dataGridRef
          TItem="ProtocolFieldMapping"
          Class="admindatagrid"
          Data="@protocolFieldMappingList"
          Editable
          Responsive
          Striped
          ShowPager
          ShowPageSizes
          MaxPaginationLinks="5"
          PagerPosition="DataGridPagerPosition.Bottom"
          PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
          FixedHeader
          FixedHeaderDataGridHeight="calc(100vh - 240px)"
          FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
          EditMode="DataGridEditMode.Inline"
          RowUpdated="@Save"
          RowInserted="@Save"
          RowRemoved="@Delete"
          RowRemoving="@ConfirmDelete">
    <DataGridColumns>
        <DataGridColumn Field="@nameof(ProtocolFieldMapping.ProtocolEDCFormId)" Width="50%" Caption="Select EDC Form" Filterable="true" Editable="true">
            <DisplayTemplate>
                @{
                    if(context.ProtocolEDCFormId != null && context.ProtocolEDCFormId != 0)
                    {
                        <Text>@protocolEDCFormList.FirstOrDefault(x => x.ProtocolEDCFormId == context.ProtocolEDCFormId)?.EDCFormIdentifier</Text>
                    } else
                    {
                        <Text>@context.ProtocolEDCField.ProtocolEDCForm.EDCFormIdentifier</Text>
                    }
                }
            </DisplayTemplate>
            <EditTemplate>
                <Autocomplete TItem="ProtocolEDCForm" Data="@protocolEDCFormList" TValue="int" TextField="@((item) => item.EDCFormIdentifier)" ValueField="@((item) => item.ProtocolEDCFormId)" SelectedValueChanged="@(e => {@GetFields(e); context.CellValue=e;})" SelectedValue="@((int?)context.CellValue ?? context.Item.ProtocolEDCFormId)" Placeholder="Start typing a form identifier..." Virtualize MinLength="0"></Autocomplete>
            </EditTemplate>
        </DataGridColumn>
         <DataGridColumn Field="@nameof(ProtocolFieldMapping.ProtocolEDCFieldId)" Width="30%" Caption="Select EDC Field" Editable="true">
            <DisplayTemplate>
                @{
                    if(context.ProtocolEDCFieldId != null && context.ProtocolEDCFieldId != 0 && context.ProtocolEDCField == null)
					{
						<Text>@protocolEDCFieldList.FirstOrDefault(x => x.ProtocolEDCFieldId == context.ProtocolEDCFieldId)?.EDCFieldIdentifier</Text>
					} else
					{
						<Text>@(context.ProtocolEDCField.EDCFieldIdentifier + " - " + context.ProtocolEDCField.EDCFieldName)</Text>
					}
                }
            </DisplayTemplate>
            <EditTemplate>
                <SelectList TItem="ProtocolEDCField" TValue="int" Data="@protocolEDCFieldList" TextField="@((item)=>item.EDCFieldIdentifier + " - " + item.EDCFieldName)"
                    ValueField="@((item) => item.ProtocolEDCFieldId)"
                            SelectedValueChanged="@( v =>{context.CellValue = v;})" 
                            SelectedValue="@((int?)context.CellValue ?? context.Item.ProtocolEDCFieldId)"
                    DefaultItemText="Select"></SelectList>
            </EditTemplate>
        </DataGridColumn>
        <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="true">
            <SaveCommandTemplate>
                <Button><Icon Name="IconName.Save" Clicked="@context.Clicked" /></Button>
            </SaveCommandTemplate>
            <EditCommandTemplate>
                <Button><Icon Name="IconName.Edit" Clicked="@context.Clicked" /></Button>
            </EditCommandTemplate>
            <DeleteCommandTemplate>
				<Button><Icon Name="IconName.Delete" Clicked="@context.Clicked" /></Button>
                </DeleteCommandTemplate>
            <CancelCommandTemplate>
                <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
            </CancelCommandTemplate>
        </DataGridCommandColumn>
    </DataGridColumns>
    <ButtonRowTemplate>
        <Button Color="Color.Primary" Clicked="@context.NewCommand.Clicked">Add</Button>
    </ButtonRowTemplate>
    <EmptyTemplate>
        <div class="box">
            No multi-form field mappings found.
        </div>
    </EmptyTemplate>
</DataGrid>


@code {
    [Inject] IProtocolEDCFormService protocolEDCFormService { get; set; } = null!;
    [Inject] IProtocolEDCFieldService protocolEDCFieldService { get; set; } = null!;
    [Inject] IProtocolFieldMappingService protocolFieldMappingService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] INotificationService notificationService { get; set; }
    [Inject] private IMessageService messageService { get; set; } = null!;

    [SupplyParameterFromQuery][Parameter] public string protocol { get; set; }
    [SupplyParameterFromQuery][Parameter] public string category { get; set; }
    [SupplyParameterFromQuery][Parameter] public string fieldName { get; set; }
    [Parameter] public string fieldId { get; set; }

    private DataGrid<ProtocolFieldMapping> dataGridRef;
    private IList<ProtocolFieldMapping> protocolFieldMappingList;
    private IList<ProtocolEDCForm> protocolEDCFormList;
    private IList<ProtocolEDCField> protocolEDCFieldList;

    protected override async Task OnInitializedAsync()
    {
        this.protocolFieldMappingList = await protocolFieldMappingService.GetProtocolFieldMappings(fieldId);
        this.protocolEDCFormList = await protocolEDCFormService.GetProtocolEDCForms();
    }

    public async void GetFields(int formId)
    {
        this.protocolEDCFieldList = await protocolEDCFieldService.GetFieldsByFormIds(new List<int> { formId });
    }

    public async void Save(SavedRowItem<ProtocolFieldMapping, Dictionary<string, object>> savedRowItem)
    {
        var toSave = savedRowItem.Item;
        toSave.ThorFieldId = fieldId;

        bool saved = await protocolFieldMappingService.SaveProtocolFieldMapping(toSave);

        if (saved)
        {
            await notificationService.Success("Mapping successfully saved");
            return;
        }
        else
        {
            await notificationService.Error("Error saving mapping");
            return;
        }
    }

    public async Task<CancellableRowChange<ProtocolFieldMapping>> ConfirmDelete(CancellableRowChange<ProtocolFieldMapping> item)
    {
        if (!await messageService.Confirm("Are you sure you want to delete this mapping?", "Confirmation"))
        {
            item.Cancel = true;
        }

        return item;
    }


    public async void Delete(ProtocolFieldMapping item)
    {
        bool deleted = await protocolFieldMappingService.DeleteProtocolFieldMapping(item);
        if (deleted)
        {
            await notificationService.Success("Mapping successfully deleted");
            return;
        }
        else
        {
            await notificationService.Error("Error deleting mapping");
            return;
        }
    }
}