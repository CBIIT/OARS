@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@inject IHttpContextAccessor httpContextAccessor
@layout AdminLayout
@page "/admin/dmu/protocol-data-system-edit"

<AdminRoleCheck AllowedRoles="@(new List<string> { "IT" })" AllowedTHORRoles="@(new List<string> { "DMU Global Admin" })"></AdminRoleCheck>
<DataGrid @ref=dataGridRef
          TItem="ProtocolDataSystem"
          Class="admindatagrid"
          Data="@protocolDataSystemList"
          Editable
          Responsive
          Striped
          Sortable
          SortMode="DataGridSortMode.Single"
          ShowPager
          ShowPageSizes
          NewItemDefaultSetter="@SetActive"
          Filterable
          FilterMethod="DataGridFilterMethod.Contains"
          MaxPaginationLinks="5"
          PagerPosition="DataGridPagerPosition.Bottom"
          PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
          FixedHeader
          FixedHeaderDataGridHeight="calc(100vh - 240px)"
          FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
          EditMode="DataGridEditMode.Inline"
          EditItemCreator="@CreatEditItem"
          NewItemCreator="@CreateNewItem"
          RowUpdated="@Save"
          RowInserted="@Save"
          RowUpdating="@Verify"
          RowInserting="@Verify"
          HeaderRowStyling="@(new DataGridRowStyling() { Style="color=rgba(250, 141, 40, 1);" })">
    <DataGridColumns>
        <DataGridColumn Width="100%" Field="@nameof(ProtocolDataSystem.DataSystemName)" Caption="Protocol Data System Name" Editable Filterable="true" Sortable="true" SortDirection="SortDirection.Ascending">
        </DataGridColumn>
        <DataGridColumn Field="@nameof(ProtocolDataSystem.SortOrder)" Caption="Order" Editable Filterable="true" Sortable="true" Width="8%">
        </DataGridColumn>
        <DataGridCheckColumn Field="@nameof(ProtocolDataSystem.IsActive)" Caption="Active" Editable Width="7%">
            <DisplayTemplate>
                <Check TValue="bool" Checked="context.IsActive" Disabled="true" ReadOnly="true" />
            </DisplayTemplate>
        </DataGridCheckColumn>
        <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="false">
            <EditCommandTemplate>
                <Button><Icon Name="IconName.Edit" Clicked="@context.Clicked" /></Button>
            </EditCommandTemplate>
            <SaveCommandTemplate>
                <Button><Icon Name="IconName.Save" Clicked="@context.Clicked" /></Button>
            </SaveCommandTemplate>
            <CancelCommandTemplate>
                <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
            </CancelCommandTemplate>
            <ClearFilterCommandTemplate>
                <Button><Icon Name="IconName.Times" Clicked="@context.Clicked" /></Button>
            </ClearFilterCommandTemplate>
        </DataGridCommandColumn>
    </DataGridColumns>
    <ButtonRowTemplate>
        <Button Color="Color.Primary" Clicked="context.NewCommand.Clicked">Add</Button>
    </ButtonRowTemplate>
    <EmptyTemplate>
        <div class="box">
            No data systems were found.
        </div>
    </EmptyTemplate>
</DataGrid>


@code {
    [Inject] IProtocolDataSystemService protocolDataSystemService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] INotificationService notificationService { get; set; }

    private DataGrid<ProtocolDataSystem> dataGridRef;
    private IList<ProtocolDataSystem> protocolDataSystemList;

    private ProtocolDataSystem? selectedDataSystem;

    protected override async Task OnInitializedAsync()
    {
        this.protocolDataSystemList = await protocolDataSystemService.GetProtocolDataSystems();
    }

    public void SetActive(ProtocolDataSystem item)
    {
        item.IsActive = true;
    }

    public ProtocolDataSystem CreateNewItem()
    {
        selectedDataSystem = null;
        return new ProtocolDataSystem();
    }

    public ProtocolDataSystem CreatEditItem(ProtocolDataSystem protocolDataSystem)
    {
        selectedDataSystem = protocolDataSystem;
        return protocolDataSystem;
    }

    public async Task<CancellableRowChange<ProtocolDataSystem>> Verify(CancellableRowChange<ProtocolDataSystem, Dictionary<string, object>> e)
    {
        // e.Values
        var protocolDataSystemId = e.Item.ProtocolDataSystemId;
        e.Values.TryGetValue("DataSystemName", out var dataSystemName);
        e.Values.TryGetValue("SortOrder", out var sortOrder);

        if (dataSystemName == null || sortOrder == null)
        {
            List<string> missingFields = new List<string>();
            if (dataSystemName == null)
            {
                missingFields.Add("Data System Name");
            }
            if (sortOrder == null)
            {
                missingFields.Add("Sort Order");
            }
            await notificationService.Error("Missing fields: " + string.Join(", ", missingFields));
            e.Cancel = true;
        }

        if (dataSystemName != null && this.selectedDataSystem?.DataSystemName != (string)dataSystemName && protocolDataSystemList.Any(x => x.DataSystemName == (string)dataSystemName && x.ProtocolDataSystemId != protocolDataSystemId))
        {
            await notificationService.Error($"Data System {dataSystemName} already exists");
            e.Cancel = true;
        }

        return e;

	}

    public async void Save(SavedRowItem<ProtocolDataSystem, Dictionary<string, object>> e)
    {
        var newItem = e.Item;

        var exists = protocolDataSystemList.Any(x => x.DataSystemName == newItem.DataSystemName && x.ProtocolDataSystemId != newItem.ProtocolDataSystemId);

        if (exists)
        {
            await notificationService.Error($"Data System {newItem.DataSystemName} already exists");
            return;
        }

        bool saved = await protocolDataSystemService.SaveProtocolDataSystem(newItem);

        if (saved)
        {
            await notificationService.Success("Protocol Data System successfully saved");
            return;
        }
        else
        {
            await notificationService.Error("Error saving the Protocol Data System");
            return;
        }
    }
}
