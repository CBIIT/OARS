@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services;
@using TheradexPortal.Data.Static;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Models.Configuration;
@using Microsoft.Extensions.Options;
@inject IHttpContextAccessor httpContextAccessor
@inject IOptions<EmailSettings> emailSettings;
@layout AdminLayout

@page "/admin/review-item"
<AdminRoleCheck AllowedRoles="@(new List<string> { "IT" })"></AdminRoleCheck>
<Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1"><h2>Add/Edit Review Items</h2></Div>
<Row Background="Background.Light">
    <Column ColumnSize="ColumnSize.IsFull">
        <Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
            <Items>
                <Tab Name="piReview">PI Review Items</Tab>
                <Tab Name="moReview">MO Review Items</Tab>
            </Items>
            <Content>
                <TabPanel Name="piReview">
                     <DataGrid TItem="ReviewItem"
                      Class="admindatagrid"
                      Data="@lstReviewItems"
                      Responsive
                      Filterable
                      Striped
                      ShowPager
                      ShowPageSizes
                      MaxPaginationLinks="5"
                      PagerPosition="DataGridPagerPosition.Bottom"
                      PagerOptions="new(){ButtonSize=Size.Default, 
                                    PaginationPosition=PagerElementPosition.Default,
                                    TotalItemsPosition=PagerElementPosition.End,
                                    }"
                      FixedHeader
                      FixedHeaderDataGridHeight="calc(100vh - 240px)"
                      FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
                      CommandMode="DataGridCommandMode.ButtonRow">
                    <DataGridColumns>
                        <DataGridMultiSelectColumn Width="30px"> </DataGridMultiSelectColumn>
                        <DataGridCommandColumn />
                        <DataGridColumn Field="@nameof(ReviewItem.ReviewItemName)" Caption="Review Item" />
                        <DataGridColumn Field="@nameof(ReviewItem.IsActive)" Filterable="false" Caption="Active" Width="125px">
                            <DisplayTemplate>
                                @{
                                    var isActive = (context as ReviewItem)?.IsActive;

                                    if(isActive == 'T')
                                    {
                                        @("Yes")
                                    }
                                    else
                                    {
                                        @("No")
                                    }

                                }
                            </DisplayTemplate>
                        </DataGridColumn>
                        <DataGridDateColumn Field="@nameof(ReviewItem.UpdateDate)" Filterable="false" Caption="Modified Date" Width="250px">
                            <DisplayTemplate>
                                @{
                                    var date = (context as ReviewItem)?.UpdateDate;

                                    if (date != null)
                                    {
                                        @(date.Value.Add(timeOffset).ToString("dd-MMM-yyyy hh:mm:ss tt ") + timeZoneAbbrev)
                                    }
                                }
                            </DisplayTemplate>
                        </DataGridDateColumn>
                        <DataGridColumn Sortable="false" Filterable="false" Width="65px">
                            <DisplayTemplate>
                                <Button Color="Color.Info" Clicked="@(()=>EditUserClick(context as ReviewItem))">
                                    Edit
                                </Button>
                            </DisplayTemplate>
                        </DataGridColumn>
                        <DataGridColumn Sortable="false" Filterable="false" Width="115px">
                            <DisplayTemplate>
                                @{
                                    var isActive = (context as ReviewItem)?.IsActive;
                                    
                                    if(isActive == 'T')
                                    {
                                        <Button Color="Color.Danger" Clicked="@(()=>ShowDeactivateModal(context as ReviewItem))" Visibility="@IsDeactivatable(context as ReviewItem)">
                                            Deactivate
                                        </Button>
                                    }
                                }
                            </DisplayTemplate>
                        </DataGridColumn>
                        </DataGridColumns>
                        <ButtonRowTemplate>
                            <Button Color="Color.Primary"  Clicked="@NewUserClick">New PI Review Item</Button>
                        </ButtonRowTemplate>
                    </DataGrid>
                </TabPanel>
                <TabPanel Name="moReview">
                    <DataGrid TItem="ReviewItem"
                              Class="admindatagrid"
                              Data="@lstMOReviewItems"
                              Responsive
                              Filterable
                              Striped
                              ShowPager
                              ShowPageSizes
                              MaxPaginationLinks="5"
                              PagerPosition="DataGridPagerPosition.Bottom"
                              PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
                              FixedHeader
                              CommandMode="DataGridCommandMode.ButtonRow">
                        <DataGridColumns>
                            <DataGridMultiSelectColumn Width="30px"> </DataGridMultiSelectColumn>
                            <DataGridCommandColumn />
                            <DataGridColumn Field="@nameof(ReviewItem.ReviewItemName)" Caption="Review Item" />
                            <DataGridColumn Field="@nameof(ReviewItem.IsActive)" Filterable="false" Caption="Active" Width="125px">
                                <DisplayTemplate>
                                    @{
                                        var isActive = (context as ReviewItem)?.IsActive;

                                        if (isActive == 'T')
                                        {
                                            @("Yes")
                                        }
                                        else
                                        {
                                            @("No")
                                        }

                                    }
                                </DisplayTemplate>
                            </DataGridColumn>
                            <DataGridDateColumn Field="@nameof(ReviewItem.UpdateDate)" Filterable="false" Caption="Modified Date" Width="250px">
                                <DisplayTemplate>
                                    @{
                                        var date = (context as ReviewItem)?.UpdateDate;

                                        if (date != null)
                                        {
                                            @(date.Value.Add(timeOffset).ToString("dd-MMM-yyyy hh:mm:ss tt ") + timeZoneAbbrev)
                                        }
                                    }
                                </DisplayTemplate>
                            </DataGridDateColumn>
                            <DataGridColumn Sortable="false" Filterable="false" Width="65px">
                                <DisplayTemplate>
                                    <Button Color="Color.Info" Clicked="@(()=>EditUserClick(context as ReviewItem))">
                                        Edit
                                    </Button>
                                </DisplayTemplate>
                            </DataGridColumn>
                            <DataGridColumn Sortable="false" Filterable="false" Width="115px">
                                <DisplayTemplate>
                                    <Button Color="Color.Danger" Clicked="@(()=>ShowDeactivateModal(context as ReviewItem))" Visibility="@IsDeactivatable(context as ReviewItem)">
                                        Deactivate
                                    </Button>
                                </DisplayTemplate>
                            </DataGridColumn>
                        </DataGridColumns>
                        <ButtonRowTemplate>
                            <Button Color="Color.Primary" Clicked="@NewUserClick">New MO Review Item</Button>
                        </ButtonRowTemplate>
                    </DataGrid>
                </TabPanel>
            </Content>
        </Tabs>
    </Column>
</Row>

<Modal @ref="deactivateModalRef">
    <ModalContent Centered>
        <ModalHeader Background="Background.Primary">
            <ModalTitle>Deactivate User: @userToDeactivate</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            Warning:  Continuing will deactivate this user.
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Danger" Clicked="@DeactivateUserClick">Deactivate</Button>
            <Button Color="Color.Light" Clicked="@HideModal">Cancel</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
@code {
    [Inject] private NavigationManager navigation {get; set; } = null!;
    [Inject] IUserService userService { get; set; } = null!;
    [Inject] INotificationService NotificationService { get; set; }
    [Inject] TimeZoneService timeZoneService { get; set; } = null!;
    [Inject] IOktaService oktaService { get; set; } = null!;
    [Inject] IEmailService emailService { get; set; } = null;
    [Inject] IConfiguration configuration { get; set; } = null!;
    [Inject] IReviewItemService reviewItemService { get; set; } = null!;

    private IList<User> userList = new List<User>();
    private Modal deactivateModalRef;
    private string userToDeactivate;
    private int userToDeactivateId;
    private string timeZoneAbbrev = "";
    private TimeSpan timeOffset;
    private string[] allowedRoleList;
    private List<int> pagesizes = new List<int>() { 5, 10, 15, 25, 50 }; // For use when customizing. Blazorise will always default to 10 on page load, even when not an option.
    private IList<ReviewItem> lstReviewItems;
    private IList<ReviewItem> lstMOReviewItems;
    string selectedTab = "piReview";

    private Task OnSelectedTabChanged(string name)
    {
        selectedTab = name;

        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
        User curUser = await userService.GetUserAsync(userId);
        userList = await userService.GetAllUsersAsync();
        lstReviewItems = await reviewItemService.GetReviewItemsByTypeAsync("PI");
        lstMOReviewItems = await reviewItemService.GetReviewItemsByTypeAsync("MO");
        if (lstReviewItems.Count == 0)
        {
            lstReviewItems.Add(new ReviewItem { ReviewItemName = "No PI Review Items Present." });
        }
        if(lstMOReviewItems.Count == 0)
        {
            lstMOReviewItems.Add(new ReviewItem { ReviewItemName = "No MO Review Items Present." });
        }

        timeZoneAbbrev = curUser.TimeZoneAbbreviation;
        timeOffset = TimeSpan.FromMinutes((double)curUser.TimeOffset);
        allowedRoleList = new string[2] { "IT", "Biz" };
    }

    private Visibility IsDeactivatable(ReviewItem u)
    {
        //if (u.IsActive)
            return Visibility.Visible;
        //else
        //    return Visibility.Invisible;
    }

    private async void NewUserClick()
    {
        navigation.NavigateTo("/admin/user");
    }

    private async void EditUserClick(ReviewItem u)
    {
        //navigation.NavigateTo($"/admin/user/{u.UserId}");
    }

    private Task ShowDeactivateModal(ReviewItem u)
    {
        /*userToDeactivate = u.FirstName + " " + u.LastName;
        userToDeactivateId = u.UserId;*/
        return deactivateModalRef.Show();
    }

    private Task HideModal()
    {
        return deactivateModalRef.Hide();
    }

    private async void DeactivateUserClick()
    {
        deactivateModalRef.Hide();
        int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
        bool success = userService.DeactivateUser(userToDeactivateId, userId);
        if (success)
        {
            await NotificationService.Success( "User deactivated");
        }
        else
        {
            await NotificationService.Error( "Error deactivating user");
        }
    }
}
