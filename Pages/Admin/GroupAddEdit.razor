@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@layout AdminLayout

@page "/admin/group/{groupid:int?}"
<Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1 mb-3"><h2>@AddOrEdit</h2></Div>
<Div Padding="Padding.Is2" Background="Background.Light">
    <Field>
        <FieldLabel ColumnSize="ColumnSize.Is10" TextWeight="TextWeight.Bold">Group Name</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is6">
            <Validations @ref="validations" Mode="ValidationMode.Manual">
            <Validation Validator="@ValidationRule.IsNotEmpty">
                <TextEdit Placeholder="Group Name" MaxLength="50" @bind-Text="@groupName">
                    <Feedback>
                        <ValidationError>Please enter a Group Name</ValidationError>
                    </Feedback>
                </TextEdit>
            </Validation>
            </Validations>
        </FieldBody>
    </Field>
</Div>
<Div Flex="Flex.AlignItems.Start" Background="Background.Light">
    <Div Padding="Padding.Is2" Style="@flexContainerStyle2">
        <Field>
            <FieldLabel ColumnSize="ColumnSize.Is5" TextWeight="TextWeight.Bold">Available Studies</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is2">
                <SelectList TItem="Protocol"
                    MaxVisibleItems = "20"
                    TValue="string"
                    Data="@protocolsAvailable"
                    TextField="@((protocol)=>protocol.StudyId)"
                    ValueField="@((protocol)=>protocol.StudyId)"
                    @bind-SelectedValues="@availableSelected"
                    Multiple />
            </FieldBody>
        </Field>
    </Div>
    <Div Padding="Padding.Is1" Style="@flexContainerStyle3">
        <Button Color="Color.Primary" Clicked="@MoveToSelectedActive">Add to Group/Active</Button>
        <Divider />
        <Button Color="Color.Primary" Clicked="@MoveToAvailable">Remove from Group/Active</Button>
    </Div>
    <Div Padding="Padding.Is2" Style="@flexContainerStyle2">
        <Field>
            <FieldLabel ColumnSize="ColumnSize.Is5" TextWeight="TextWeight.Bold">Group Studies/Active</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is2">
                <SelectList TItem="Protocol"
                    MaxVisibleItems="20"
                    TValue="string"
                    Data="@protocolsInGroupActive"
                    TextField="@((protocol)=>protocol.StudyId)"
                    ValueField="@((protocol)=>protocol.StudyId)"
                    @bind-SelectedValues="@groupSelectedActive"
                    Multiple />
            </FieldBody>
        </Field>
    </Div>
    <Div Padding="Padding.Is1" Style="@flexContainerStyle3">
        <Button Color="Color.Primary" Clicked="@MoveToSelectedInactive">Add to Group/Inactive</Button>
        <Divider />
        <Button Color="Color.Primary" Clicked="@MoveBackToSelectedActive">Remove from Group/Inactive</Button>
    </Div>
    <Div Padding="Padding.Is2" Style="@flexContainerStyle2">
        <Field>
            <FieldLabel ColumnSize="ColumnSize.Is5" TextWeight="TextWeight.Bold">Group Studies/Inactive</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is2">
                <SelectList TItem="Protocol"
                    MaxVisibleItems="20"
                    TValue="string"
                    Data="@protocolsInGroupInactive"
                    TextField="@((protocol)=>protocol.StudyId)"
                    ValueField="@((protocol)=>protocol.StudyId)"
                    @bind-SelectedValues="@groupSelectedInactive"
                    Multiple />
            </FieldBody>
        </Field>
    </Div>
</Div>
<Divider />
<Field Flex="Flex.JustifyContent.Between">
    <Button Color="Color.Danger" Visibility="@visibilityDelete" Clicked="@Delete">Delete Group</Button>
    <Div>
        <Button Color="Color.Light" Clicked="@Cancel">Cancel</Button>
        <Button Color="Color.Primary" Type="ButtonType.Submit" PreventDefaultOnSubmit Clicked="@Save">Save Group</Button>
    </Div>
</Field>

@code {
    [Inject] IGroupService groupService { get; set; } = null!;
    [Inject] IStudyService studyService { get; set; } = null!;
    [Inject] private NavigationManager navigation {get; set; } = null!;
    [Inject] INotificationService NotificationService { get; set; }

    [Parameter] public int? GroupId { get; set; }

    public string AddOrEdit { get; set; }
    string groupName = "";
    Visibility visibilityDelete = Visibility.Invisible;
    Validations validations;

    IReadOnlyList<string> availableSelected { get; set; }
    IReadOnlyList<string> groupSelectedActive { get; set; }
    IReadOnlyList<string> groupSelectedInactive { get; set; }
    IList<Protocol> protocolsAvailable;
    IList<Protocol> protocolsInGroupActive;
    IList<Protocol> protocolsInGroupInactive;

    string flexContainerStyle = $"width:30%;";
    string flexContainerStyle2 = $"width:30%;";
    string flexContainerStyle3 = $"width:10%;margin-top:150px;";

    protected override async Task OnInitializedAsync()
    {
        protocolsAvailable = (await studyService.GetAllProtocolsAsync()).OrderBy(p=>p.StudyId).ToList();
        protocolsInGroupActive = new List<Protocol>();
        protocolsInGroupInactive = new List<Protocol>();

        if (GroupId == null )
        {
            AddOrEdit = "Create Group";
            visibilityDelete = Visibility.Invisible;
        }
        else
        {
            AddOrEdit = "Edit Group";
            visibilityDelete = Visibility.Visible;
            GetGroup(GroupId);
        }
    }

    private async void GetGroup(int? groupId)
    {
        Group curGroup = await groupService.GetGroupAsync(Convert.ToInt32(groupId));
        groupName = curGroup.GroupName;

        foreach (GroupProtocol gp in curGroup.GroupProtocols)
        {
            Protocol foundProtocol = protocolsAvailable.First(p => p.StudyId == gp.StudyId);
            protocolsAvailable.Remove(foundProtocol);
            if (gp.IsActive)
                protocolsInGroupActive.Add(foundProtocol);
            else
                protocolsInGroupInactive.Add(foundProtocol);
        }
        // Re-sort
        protocolsAvailable = protocolsAvailable.OrderBy(p => p.StudyId).ToList();
        protocolsInGroupActive = protocolsInGroupActive.OrderBy(p => p.StudyId).ToList();
        protocolsInGroupInactive = protocolsInGroupInactive.OrderBy(p => p.StudyId).ToList();
    }

    private async void MoveToSelectedActive()
    {
        // Add studies to selected protocol select control
        if (availableSelected != null)
        {
            foreach (string availStudy in availableSelected)
            {
                Protocol foundProtocol = protocolsAvailable.First(p => p.StudyId == availStudy);
                protocolsAvailable.Remove(foundProtocol);
                protocolsInGroupActive.Add(foundProtocol);
                protocolsInGroupActive = protocolsInGroupActive.OrderBy(p => p.StudyId).ToList();
            }
        }
        availableSelected = null;
    }

    private async void MoveToAvailable()
    {
        // Add studies to selected protocol select control
        if (groupSelectedActive != null)
        {
            foreach (string groupStudy in groupSelectedActive)
            {
                Protocol foundProtocol = protocolsInGroupActive.First(p => p.StudyId == groupStudy);
                protocolsInGroupActive.Remove(foundProtocol);
                protocolsAvailable.Add(foundProtocol);
                protocolsAvailable = protocolsAvailable.OrderBy(p => p.StudyId).ToList();
            }
        }
        groupSelectedActive = null;
    }

    private async void MoveToSelectedInactive()
    {
        // Add studies to selected protocol select control
        if (groupSelectedActive != null)
        {
            foreach (string activeStudy in groupSelectedActive)
            {
                Protocol foundProtocol = protocolsInGroupActive.First(p => p.StudyId == activeStudy);
                protocolsInGroupActive.Remove(foundProtocol);
                protocolsInGroupInactive.Add(foundProtocol);
                protocolsInGroupInactive = protocolsInGroupInactive.OrderBy(p => p.StudyId).ToList();
            }
        }
        groupSelectedActive = null;
    }

    private async void MoveBackToSelectedActive()
    {
        // Add studies to selected protocol select control
        if (groupSelectedInactive != null)
        {
            foreach (string inactiveStudy in groupSelectedInactive)
            {
                Protocol foundProtocol = protocolsInGroupInactive.First(p => p.StudyId == inactiveStudy);
                protocolsInGroupInactive.Remove(foundProtocol);
                protocolsInGroupActive.Add(foundProtocol);
                protocolsInGroupActive = protocolsInGroupActive.OrderBy(p => p.StudyId).ToList();
            }
        }
        groupSelectedInactive = null;
    }

    private async void Save()
    {
        bool saved = false;

        if (await validations.ValidateAll())
        {
            DateTime saveDateTime = DateTime.UtcNow;
            Group saveGroup = new Group();
            if (GroupId != null)
            {
                saveGroup.WRGroupId = (int)GroupId;
            }
            saveGroup.GroupName = groupName;

            // Iterate through Active & Inactive selects to create GroupProtocol records
            foreach (Protocol activeProt in protocolsInGroupActive)
            {
                GroupProtocol newGP = new GroupProtocol();
                newGP.StudyId = activeProt.StudyId;
                newGP.IsActive = true;
                saveGroup.GroupProtocols.Add(newGP);
            }
            foreach (Protocol inactiveProt in protocolsInGroupInactive)
            {
                GroupProtocol newGP = new GroupProtocol();
                newGP.StudyId = inactiveProt.StudyId;
                newGP.IsActive = false;
                saveGroup.GroupProtocols.Add(newGP);
            }

            saved = groupService.SaveGroup(saveGroup);

            if (saved)
            {
                await NotificationService.Success( "Group successfully saved");
                navigation.NavigateTo("/admin/groups");
            }
            else
            {
                await NotificationService.Error( "Error saving group");
                navigation.NavigateTo("/admin/groups");
            }
        }
    }

    private void Cancel()
    {
        navigation.NavigateTo("/admin/groups");
    }

    private async void Delete()
    {
        // Check if any users are members of the Group before deleting
        Tuple<bool, string> delete = groupService.DeleteGroup((int)GroupId);
        if (delete.Item1 == true)
            await NotificationService.Success(delete.Item2);
        else
            await NotificationService.Error(delete.Item2);

        navigation.NavigateTo("/admin/groups");
    }
}
