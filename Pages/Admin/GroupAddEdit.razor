@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@inject IHttpContextAccessor httpContextAccessor
@layout AdminLayout

@page "/admin/group/{groupid:int?}"
<AdminRoleCheck AllowedRoles="@(new List<string> { "Super" })"></AdminRoleCheck>
<Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1 mb-3"><h2>@AddOrEdit</h2></Div>
<Div Padding="Padding.Is2" Background="Background.Light">
    <Field>
        <FieldLabel ColumnSize="ColumnSize.Is10" TextWeight="TextWeight.Bold">Group Name</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is6">
            <Validations @ref="validations" Mode="ValidationMode.Manual">
            <Validation Validator="@ValidationRule.IsNotEmpty">
                <TextEdit Placeholder="Group Name" MaxLength="50" @bind-Text="@groupName">
                    <Feedback>
                        <ValidationError>Please enter a Group Name</ValidationError>
                    </Feedback>
                </TextEdit>
            </Validation>
            </Validations>
        </FieldBody>
    </Field>
</Div>
<Div Flex="Flex.AlignItems.Start" Background="Background.Light">
    <Div Padding="Padding.Is2" Style="@flexContainerStyle2">
        <Field>
            <FieldLabel ColumnSize="ColumnSize.Is5" TextWeight="TextWeight.Bold">Available Studies</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is2">
                <SelectList TItem="Protocol"
                    MaxVisibleItems = "20"
                    TValue="string"
                    Data="@protocolsAvailable"
                    TextField="@((protocol)=>protocol.StudyId)"
                    ValueField="@((protocol)=>protocol.StudyId)"
                    @bind-SelectedValues="@availableSelected"
                    Multiple />
            </FieldBody>
        </Field>
        <Button Color="Color.Primary" Clicked="@AddToGroup">Add to Assigned</Button>
    </Div>
    <Div Padding="Padding.Is2">
        <Field>
            <FieldLabel TextWeight="TextWeight.Bold">Assigned Studies</FieldLabel>
            <FieldBody>
                <DataGrid TItem="GroupProtocol"
                            Class="admindataeditgrid"
                            Data="@selectedGroupProtocolList"
                            @bind-SelectedRow="@selectedGroupProtocol"
                            @bind-SelectedRows="@selectedGroupProtocols"
                            Editable
                            Responsive
                            PageSize="2000"
                            FixedHeader
                            FixedHeaderDataGridHeight="454px"
                            FixedHeaderDataGridMaxHeight="454px"
                            SelectionMode = "DataGridSelectionMode.Multiple"
                            CommandMode="DataGridCommandMode.Commands"
                            EditMode="DataGridEditMode.Inline">
                    <DataGridColumns>
                        <DataGridColumn Width="200px" Field="@nameof(GroupProtocol.StudyId)"  Caption="Study Id" />
                        <DataGridColumn Field="@nameof(GroupProtocol.IsActive)" Width="150" Caption="Is Active" Editable>
                            <DisplayTemplate>
                                @{
                                    bool isActive = (bool)(context as GroupProtocol)?.IsActive;

                                    if (isActive)
                                    {
                                        @("Yes")
                                    }
                                    else
                                    {
                                        @("No")
                                    }
                                }
                            </DisplayTemplate>
                        </DataGridColumn>
                        <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="false">
                            <SaveCommandTemplate>
                                <Button ElementId="btnSave" Size="Size.ExtraSmall" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                            </SaveCommandTemplate>
                            <CancelCommandTemplate>
                                <Button ElementId="btnCancel" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@context.Clicked">Cancel</Button>
                            </CancelCommandTemplate>
                        </DataGridCommandColumn>
                    </DataGridColumns>
                    <ButtonRowTemplate>
                        <Button Color="Color.Primary" Size="Size.ExtraSmall" Disabled="(selectedGroupProtocol is null)" Clicked="context.EditCommand.Clicked">Edit</Button>
                    </ButtonRowTemplate>
                </DataGrid>
            </FieldBody>
        </Field>
        <Button Color="Color.Primary" Clicked="@RemoveFromGroup">Remove from Assigned</Button>                    
    </Div>
</Div>
<Divider />
<Field Flex="Flex.JustifyContent.Center">
    <Div>
        <Button Color="Color.Light" Clicked="@Cancel">Cancel</Button>
        <Button Color="Color.Primary" Type="ButtonType.Submit" PreventDefaultOnSubmit Clicked="@Save">Save Group</Button>
    </Div>
</Field>

@code {
    [Inject] IGroupService groupService { get; set; } = null!;
    [Inject] IStudyService studyService { get; set; } = null!;
    [Inject] private NavigationManager navigation {get; set; } = null!;
    [Inject] INotificationService NotificationService { get; set; }
    [Inject] IUserService userService { get; set; } = null!;

    [Parameter] public int? GroupId { get; set; }

    public string AddOrEdit { get; set; }
    string groupName = "";
    Visibility visibilityDelete = Visibility.Invisible;
    Validations validations;

    IReadOnlyList<string> availableSelected { get; set; }
    IList<GroupProtocol> selectedGroupProtocolList = new List<GroupProtocol>();
    private GroupProtocol selectedGroupProtocol;
    List<GroupProtocol> selectedGroupProtocols { get; set; }
    IList<Protocol> protocolsAvailable;

    string flexContainerStyle = $"width:30%;";
    string flexContainerStyle2 = $"width:30%;";
    string flexContainerStyle3 = $"width:10%;margin-top:150px;";

    protected override async Task OnInitializedAsync()
    {
        protocolsAvailable = (await studyService.GetAllProtocolsAsync()).OrderBy(p=>p.StudyId).ToList();

        if (GroupId == null )
        {
            AddOrEdit = "Create Group";
            visibilityDelete = Visibility.Invisible;
        }
        else
        {
            AddOrEdit = "Edit Group";
            visibilityDelete = Visibility.Visible;
            GetGroup(GroupId);
            AddOrEdit = "Edit Group - " + groupName;
        }

        int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(WRClaimType.UserId).Value);
        userService.SaveActivityLog(userId, WRActivityType.Navigation, "User Group", AddOrEdit);
    }

    private async void GetGroup(int? groupId)
    {
        Group curGroup = await groupService.GetGroupAsync(Convert.ToInt32(groupId));

        groupName = curGroup.GroupName;

        // Add to assigned groups
        selectedGroupProtocolList = curGroup.GroupProtocols.ToList();
        // Remove assigned from group list
        foreach (GroupProtocol gp in selectedGroupProtocolList)
        {
            Protocol foundProtocol = protocolsAvailable.First(p => p.StudyId == gp.StudyId);
            protocolsAvailable.Remove(foundProtocol);
        }

        // Re-sort
        protocolsAvailable = protocolsAvailable.OrderBy(p => p.StudyId).ToList();
        selectedGroupProtocolList = selectedGroupProtocolList.OrderBy(p => p.StudyId).ToList();
    }

    private async void AddToGroup()
    {
        // Add studies to selected protocol select control
        if (availableSelected != null)
        {
            foreach (string availStudy in availableSelected)
            {
                Protocol foundProtocol = protocolsAvailable.First(p => p.StudyId == availStudy);
                protocolsAvailable.Remove(foundProtocol);
                GroupProtocol newGP = new GroupProtocol();
                newGP.StudyId = foundProtocol.StudyId;
                newGP.IsActive = true;
                selectedGroupProtocolList.Add(newGP);
            }
            selectedGroupProtocolList = selectedGroupProtocolList.OrderBy(sup => sup.StudyId).ToList();

        }
        availableSelected = null;        
    }

    private async void RemoveFromGroup()
    {
        // Remove studies from assigned grid
        if (selectedGroupProtocols != null)
        {
            foreach (GroupProtocol selGroupProtocol in selectedGroupProtocols)
            {
                // Remove from Assigned list
                selectedGroupProtocolList.Remove(selGroupProtocol);

                //Add to Available list
                Protocol newP = new Protocol();
                newP.StudyId = selGroupProtocol.StudyId;
                protocolsAvailable.Add(newP);
            }
            protocolsAvailable = protocolsAvailable.OrderBy(pa => pa.StudyId).ToList();
        }
        selectedGroupProtocols = null;        
    }

    private async void Save()
    {
        bool saved = false;

        if (await validations.ValidateAll())
        {
            // Check for existing group name
            if (!groupService.CheckGroupName(groupName, (int)(GroupId != null ? GroupId : 0)))
            {
                await NotificationService.Error( "Group Name already exists.");
                return;
            }
            DateTime saveDateTime = DateTime.UtcNow;
            Group saveGroup = new Group();
            if (GroupId != null)
            {
                saveGroup.WRGroupId = (int)GroupId;
            }
            saveGroup.GroupName = groupName;

            // Iterate through assigned protocols to create GroupProtocol records
            foreach (GroupProtocol groupProt in selectedGroupProtocolList)
            {
                GroupProtocol newGP = new GroupProtocol();
                newGP.StudyId = groupProt.StudyId;
                newGP.IsActive = groupProt.IsActive;
                newGP.CreateDate = saveDateTime;
                saveGroup.GroupProtocols.Add(newGP);
            }

            saved = groupService.SaveGroup(saveGroup);

            if (saved)
            {
                await NotificationService.Success( "Group successfully saved");
                navigation.NavigateTo("/admin/groups");
            }
            else
            {
                await NotificationService.Error( "Error saving group");
                navigation.NavigateTo("/admin/groups");
            }
        }
    }

    private void Cancel()
    {
        navigation.NavigateTo("/admin/groups");
    }


}
