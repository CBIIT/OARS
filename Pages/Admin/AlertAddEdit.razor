@using System.Diagnostics.CodeAnalysis
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@using Blazorise.Markdown
@inject IHttpContextAccessor httpContextAccessor
@layout AdminLayout

@page "/admin/alert/{wralertid:int?}"
<Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1 mb-3"><h2>@AddOrEdit</h2></Div>
<h4>Alert Info</h4>
<Divider />
<Div Flex="Flex.AlignItems.Start" Margin="Margin.Is3.FromBottom" Background="Background.Light">
    <Div Padding="Padding.Is4" Style="@flexContainerStyle">
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Alert Type</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is6">
                <RadioGroup @bind-CheckedValue="@alertType">
                    <Radio Value="@typeAlert">Alert</Radio>
                    <Radio Value="@typeNote">Note</Radio>
                </RadioGroup>
            </FieldBody>
        </Field>
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Alert Text Editor</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is6">
                <MemoEdit @bind-Text="@alertText" Rows="5" /><br />
                Use HTML tags to edit text appearance <br />
                &lt;b&gt;<b>Bold</b>&lt;/b&gt; &lt;i&gt;<i>Italics</i>&lt;/i&gt; | use &lt;br/&gt; for line break
            </FieldBody>
        </Field>
    </Div>
    <Div Padding="Padding.Is4" Style="@flexContainerStyle">
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Is Active</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is6">
                <Switch TValue="bool" @bind-Checked="@isActive" Color="Color.Primary" />
            </FieldBody>
        </Field>
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Alert Preview</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is6">
            <Alert Color="@currentColor" Visible>
                <AlertDescription TextOverflow="TextOverflow.Wrap">@((MarkupString)@alertText)</AlertDescription>
            </Alert>
            </FieldBody>
        </Field>
    </Div>
</Div>
<Div Flex="Flex.AlignItems.Start" Margin="Margin.Is3.FromBottom" Background="Background.Light">
    <Div Padding="Padding.Is4" Style="@flexContainerStyle">
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Page</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is6">
                    <RadioGroup @bind-CheckedValue="@alertType" @onchange="OnAlertTypeValueChanged" Buttons Color="Color.Primary" Orientation="Orientation.Vertical">
                        <Radio Value="@pageLogin">@pageLogin</Radio>
                    <Radio Value="@pageSystem">@pageSystem</Radio>
                        <Radio Value="@pageDashboard">@pageDashboard</Radio>
                </RadioGroup>
            </FieldBody>
         </Field>
            <Field Horizontal @bind-Disabled="@dashboardFieldDisabled">
            <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Dashboard</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is6">
                <Select TValue="int" @bind-SelectedValue="@dashboardId">
                    <SelectItem Value="@invalidId">Select Dashboard</SelectItem>
                    @foreach (var dashboard in dashboards)
                    {
                        <SelectItem Value="@dashboard.WRDashboardId">@dashboard.Name</SelectItem>
                    }
                </Select>
            </FieldBody>
         </Field>
    </Div>
</Div>
<Div Flex="Flex.AlignItems.Start" Margin="Margin.Is3.FromBottom" Background="Background.Light">
    <Div Padding="Padding.Is4" Style="@flexContainerStyle">
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Start Date</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is6">
                <Addons>
                    <Addon AddonType="AddonType.Body">
                        <DatePicker @ref="@startDatePicker" TValue="DateTime?" />
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <Button Color="Color.Primary" Clicked="@(()=>startDatePicker.ToggleAsync())">
                            <Icon Name="IconName.CalendarDay" />
                        </Button>
                    </Addon>
                </Addons>
            </FieldBody>
        </Field>
        <Field Horizontal @bind-Disabled="@dashboardFieldDisabled">
            <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">End Date (Inclusive)</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is6">
                <Addons>
                    <Addon AddonType="AddonType.Body">
                        <DatePicker @ref="@endDatePicker" TValue="DateTime?" />
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <Button Color="Color.Primary" Clicked="@(()=>endDatePicker.ToggleAsync())">
                            <Icon Name="IconName.CalendarDay" />
                        </Button>
                    </Addon>
                </Addons>
            </FieldBody>
        </Field>
    </Div>
</Div>
<Divider />
<Div Display="Display.Flex" Class="justify-content-center pe-5">

</Div>

@code {
    [Inject] IAlertService alertService { get; set; } = null!;
    [Inject] INotificationService NotificationService { get; set; }
    [Inject] IDashboardService dashboardService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;

    [Parameter] public int? WRAlertId { get; set; }
    [AllowNull] private Steps stepsRef; 
    [AllowNull] private DatePicker<DateTime?> startDatePicker;
    [AllowNull] private DatePicker<DateTime?> endDatePicker;

    private IList<Dashboard> dashboards = new List<Dashboard>();

    public string AddOrEdit { get; set; }

    private static int invalidId = -1;
    private string typeAlert = string.Empty;
    private string typeNote = string.Empty;
    private string pageLogin = string.Empty;
    private string pageSystem = string.Empty;
    private string pageDashboard = string.Empty;
    private Color? alertColor;
    private Color? noteColor;
    private Color? infoColor;
    private Color? currentColor;

    private bool dashboardFieldDisabled = true;

    private string alertType = string.Empty;
    private string alertText = string.Empty;
    private bool isActive = false;

    private string pageName = string.Empty;
    private int dashboardId = 0;

    private DateTime startDate = new DateTime();
    private DateTime endDate = new DateTime();

    string flexContainerStyle = $"width:50%;";
    string flexItemStylePrimRole = $"width:300px;";
    string flexItemStyleSecRole = $"width:340px;";
    string flexItemStyleSecRole2 = $"width:600px;";
    string flexItemStyleProts = $"width:300px;";
    string flexItemStyleProtsGrid = $"width:500px;";
    string flexItemStyleSpacer = $"width:1px;background-color: gray;";

    protected override async Task OnInitializedAsync()
    {
        bool isAdmin = httpContextAccessor.HttpContext.User.HasClaim(WRClaimType.IsAdmin, "True");
        int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(WRClaimType.UserId).Value);

        dashboards = await dashboardService.GetDashboardsForUserAsync(userId, isAdmin);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.typeAlert = await alertService.AlertType();
            this.typeNote = await alertService.NoteType();
            this.pageLogin = await alertService.LoginPage();
            this.pageSystem = await alertService.SystemPage();
            this.pageDashboard = await alertService.DashboardPage();
            this.alertColor = await alertService.AlertColor();
            this.noteColor = await alertService.NoteColor();
            this.infoColor = await alertService.InfoColor();
            this.currentColor = noteColor;
            StateHasChanged();
        }
    }

    private async Task OnAlertTypeValueChanged(ChangeEventArgs args)
    {
        if (alertType.Equals(pageDashboard))
        {
            dashboardFieldDisabled = false;
        }
        else
        {
            dashboardFieldDisabled = true;
        }
    }

    private bool NavigationAllowed(StepNavigationContext context)
    {
        return true;
    }
}
