@using System.Diagnostics.CodeAnalysis
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@using Blazorise.Markdown
@inject IHttpContextAccessor httpContextAccessor
@layout AdminLayout

@page "/admin/alert/{wralertid:int?}"
<Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1 mb-3"><h2>@AddOrEdit</h2></Div>
<h4>Alert Info</h4>
<Divider />
<Div Flex="Flex.AlignItems.Start" Margin="Margin.Is3.FromBottom" Background="Background.Light">
    <Validations @ref="alertValidations" Mode="ValidationMode.Manual">
        <Div Padding="Padding.Is4" Style="@flexContainerStyle">
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Alert Type</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is6">
                <RadioGroup TValue="string" CheckedValue="@alertType" CheckedValueChanged="OnAlertTypeValueChanged" Color="Color.Primary">
                    <Radio Value="@typeAlert">@typeAlert</Radio>
                    <Radio Value="@typeNote">@typeNote</Radio>
                </RadioGroup>
            </FieldBody>
        </Field>
        <Validation Validator="@ValidationRule.IsNotEmpty">
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Alert Text Editor</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is9">
                    <MemoEdit @bind-Text="@alertText" Rows="5" />
                    Use HTML tags to edit text appearance <br />
                    &lt;b&gt;<b>Bold</b>&lt;/b&gt; &lt;i&gt;<i>Italics</i>&lt;/i&gt; | use &lt;br/&gt; for line break
                </FieldBody>
            </Field>
        </Validation>
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Page</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is6">
                    <RadioGroup TValue="string" CheckedValue="@pageName" CheckedValueChanged="OnPageTypeValueChanged" Color="Color.Primary">
                    <Radio Value="@pageLogin">@pageLogin</Radio>
                    <Radio Value="@pageSystem">@pageSystem</Radio>
                    <Radio Value="@pageDashboard">@pageDashboard</Radio>
                </RadioGroup>
            </FieldBody>
        </Field>
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Dashboard</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is6">
                <Select TValue="int" @bind-SelectedValue="@dashboardId" @bind-Disabled="@dashboardFieldDisabled">
                    <SelectItem Value="@invalidId">Select Dashboard</SelectItem>
                    @foreach (var dashboard in dashboards)
                    {
                        <SelectItem Value="@dashboard.WRDashboardId">@dashboard.Name</SelectItem>
                    }
                </Select>
            </FieldBody>
        </Field>
    </Div>
    <Div Padding="Padding.Is4" Style="@flexContainerStyle">
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Is Active</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is6">
                <Switch TValue="bool" @bind-Checked="@isActive" Color="Color.Primary" />
            </FieldBody>
        </Field>
        <Field Horizontal Class="nci-alert-scroll-y">
            <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Alert Preview</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is6">
                <Alert Color="@currentColor" Visible>
                    <AlertDescription TextOverflow="TextOverflow.Wrap">@((MarkupString)@alertText)</AlertDescription>
                </Alert>
            </FieldBody>
        </Field>
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Start Date</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is6">
                <Addons>
                    <Addon AddonType="AddonType.Body">
                        <DatePicker @ref="@startDatePicker" Date="@startDate" TValue="DateTime?" DisplayFormat="@dateFormat" Placeholder="@datePlaceholder" DateChanged="OnStartDateChanged" />
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <Button Color="Color.Primary" Clicked="@(()=>startDatePicker.ToggleAsync())">
                            <Icon Name="IconName.CalendarDay" />
                        </Button>
                    </Addon>
                </Addons>
            </FieldBody>
            <FieldHelp Display="@startDateError"><Text TextColor="TextColor.Danger">Please select a start date</Text></FieldHelp>
        </Field>
        <Field Horizontal >
            <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">End Date (Inclusive)</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is6">
                <Addons>
                    <Addon AddonType="AddonType.Body">
                        <DatePicker @ref="@endDatePicker" @bind-Date="@endDate" TValue="DateTime?" DisplayFormat="@dateFormat" Placeholder="@datePlaceholder" />
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <Button Color="Color.Primary" Clicked="@(()=>endDatePicker.ToggleAsync())">
                            <Icon Name="IconName.CalendarDay" />
                        </Button>
                    </Addon>
                </Addons>
            </FieldBody>
        </Field>
        @if (currAlert != null && currAlert.CreateDate != null)
        {
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Create Date</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is6">
                    @currAlert.CreateDate.Value.ToString(dateFormat)
                </FieldBody>
            </Field>
        }
            @if (currAlert != null && currAlert.UpdateDate != null)
        {
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Last Updated</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is6">
                    @currAlert.UpdateDate.Value.ToString(dateFormat)
                </FieldBody>
            </Field>
        }
        
    </Div>
    </Validations>
</Div>
<Divider />
<Field Flex="Flex.JustifyContent.Center">
    <Div>
        <Button Color="Color.Light" Clicked="@Cancel">Cancel</Button>
        <Button Color="Color.Primary" Type="ButtonType.Submit" PreventDefaultOnSubmit Clicked="@Save">Save Alert</Button>
    </Div>
</Field>

@code {
    [Inject] IAlertService alertService { get; set; } = null!;
    [Inject] INotificationService NotificationService { get; set; }
    [Inject] IDashboardService dashboardService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;

    [Parameter] public int? WRAlertId { get; set; }

    private IList<Dashboard> dashboards = new List<Dashboard>();
    private IFluentDisplay startDateError = Display.None;

    public string AddOrEdit { get; set; }
    private Validations? alertValidations;

    // Ref Values
    private static int invalidId = 0;
    private string typeAlert = string.Empty;
    private string typeNote = string.Empty;
    private string pageLogin = string.Empty;
    private string pageSystem = string.Empty;
    private string pageDashboard = string.Empty;
    private string dateFormat = "dd-MMM-yyyy";
    private string datePlaceholder = "DD-MMM-YYYY";
    private Color? alertColor;
    private Color? noteColor;
    private Color? infoColor;
    private Color? currentColor;
    private bool dashboardFieldDisabled = true;
    private bool newAlert = true;
    private DateTime defaultDateTime = new DateTime(2000, 01, 01);

    private WRAlert currAlert;

    private string alertType = string.Empty;
    private string pageName = string.Empty;
    private string alertText = string.Empty;
    private bool isActive = false;
    private int dashboardId;

    private DateTime? startDate;
    private DateTime? endDate;
    private DatePicker<DateTime?> startDatePicker;
    private DatePicker<DateTime?> endDatePicker;

    string flexContainerStyle = $"width:50%;";

    protected override async Task OnInitializedAsync()
    {
        bool isAdmin = httpContextAccessor.HttpContext.User.HasClaim(WRClaimType.IsAdmin, "True");
        int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(WRClaimType.UserId).Value);

        dashboards = await dashboardService.GetDashboardsForUserAsync(userId, isAdmin);

        // Initialize ref values
        this.typeAlert = await alertService.AlertType();
        this.typeNote = await alertService.NoteType();
        this.pageLogin = await alertService.LoginPage();
        this.pageSystem = await alertService.SystemPage();
        this.pageDashboard = await alertService.DashboardPage();
        this.alertColor = await alertService.AlertColor();
        this.noteColor = await alertService.NoteColor();
        this.infoColor = await alertService.InfoColor();
        this.currentColor = this.alertColor;
        this.alertType = typeAlert;
        this.pageName = pageLogin;

        if (WRAlertId == null)
        {
            AddOrEdit = "Create Alert";
        }
        else
        {
            AddOrEdit = "Edit Alert";
            this.newAlert = false;
            this.LoadAlert((int) WRAlertId);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }

    }

    private Task OnAlertTypeValueChanged(string value)
    {
        alertType = value;
        this.ChangeAlertColor();

        return Task.CompletedTask;
    }

    private Task OnPageTypeValueChanged(string value)
    {
        pageName = value;

        if (pageName.Equals(pageDashboard))
        {
            dashboardFieldDisabled = false;
        }
        else
        {
            dashboardFieldDisabled = true;
        }

        return Task.CompletedTask;
    }

    private Task OnStartDateChanged(DateTime? value)
    {
        startDate = value;

        if (startDate != null)
        {
            startDateError = Display.None;
        }
        else
        {
            startDateError = Display.Block;
        }

        return Task.CompletedTask;
    }

    private Task ChangeAlertColor()
    {
        if (alertType.Equals(typeAlert))
        {
            this.currentColor = alertColor;
        }
        else if (alertType.Equals(typeNote))
        {
            this.currentColor = noteColor;
        }
        else
        {
            this.currentColor = infoColor;
        }

        return Task.CompletedTask;
    }

    private async Task LoadAlert(int alertId)
    {
        currAlert = await alertService.GetAlertById(alertId);
        alertType = currAlert.AlertType;
        await this.ChangeAlertColor();

        pageName = currAlert.PageName;
        if (currAlert.PageName.Equals(pageDashboard))
        {
            dashboardId = (int) currAlert.DashboardId;
            dashboardFieldDisabled = false;
        }
        else 
        {
            dashboardFieldDisabled = true;
        }

        alertText = currAlert.AlertText;
        isActive = currAlert.IsActive;
        startDate = (DateTime) currAlert.StartDate;

        if (endDate != null && !endDate.Equals(string.Empty) && endDate > defaultDateTime)
        {
            endDate = (DateTime)currAlert.EndDate;
        }
        else
        {
            endDate = null;
        }
    }

    private async void Save()
    {
        if (await alertValidations.ValidateAll() && startDate != null)
        {
            var saved = false;
            var now = DateTime.UtcNow;

            WRAlert alert;
            if (newAlert)
            {
                alert = new WRAlert();
                alert.CreateDate = now;
            }
            else
            {
                alert = currAlert;
                alert.UpdateDate = now;
            }
            alert.PageName = pageName;
            alert.DashboardId = dashboardId;
            if (!alert.PageName.Equals(pageDashboard))
            {
                alert.DashboardId = null;
            }
            alert.AlertType = alertType;
            alert.AlertText = alertText;
            alert.IsActive = isActive;
            alert.StartDate = startDate;
            alert.EndDate = endDate;

            saved = alertService.SaveAlert(alert);

            if (saved)
            {
                await NotificationService.Success("Alert successfully saved");
                navigation.NavigateTo("/admin/alerts");
            }
            else
            {
                await NotificationService.Error("Error saving Alert");
                navigation.NavigateTo("/admin/alerts");
            }
        }
        else
        {
            await OnStartDateChanged(null);
        }
    }

    private void Cancel()
    {
        navigation.NavigateTo("/admin/alerts");
    }

    private bool NavigationAllowed(StepNavigationContext context)
    {
        return true;
    }
}
