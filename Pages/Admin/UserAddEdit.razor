@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@layout AdminLayout

@page "/admin/user/{userid:int?}"
<Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1 mb-3"><h2>@AddOrEdit</h2></Div>
<Steps @ref="stepsRef" SelectedStep="@selectedStep" SelectedStepChanged="@OnSelectedStepChanged" NavigationAllowed="NavigationAllowed">
    <Items>
        <Step Name="step1">User info</Step>
        <Step Name="step2">Roles</Step>
        <Step Name="step3">Studies & Groups</Step>
        <Step Name="step4">
            <Marker>
                <Icon Name="IconName.Flag" />
            </Marker>
            <Caption>
                Review & Save
            </Caption>
        </Step>
    </Items>
    <Content>
        <StepPanel Name="step1">
            <h4>User Information</h4>
            <Divider />
            <Div Flex="Flex.AlignItems.Start" Margin="Margin.Is3.FromBottom" Background="Background.Light">
                <Div Padding="Padding.Is4" Style="@flexContainerStyle">
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">First Name</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is6">
                            <TextEdit Placeholder="First Name" MaxLength="50" @bind-Text="@firstName" />
                        </FieldBody>
                    </Field>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Last Name</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is6">
                            <TextEdit Placeholder="Last Name" MaxLength="50" @bind-Text="@lastName" />
                        </FieldBody>
                    </Field>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Email Address</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is6">
                            <TextEdit Placeholder="Email Address" MaxLength="255" @bind-Text="@email" />
                        </FieldBody>
                    </Field>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Title</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is6">
                            <TextEdit Placeholder="Title" MaxLength="50" @bind-Text="@title" />
                        </FieldBody>
                    </Field>
                </Div>
                <Div Padding="Padding.Is4" Style="@flexContainerStyle">
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Is Active</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is6">
                            <Switch TValue="bool" @bind-Checked="@isActive"></Switch>
                        </FieldBody>
                    </Field>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Is CTEP User</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is6">
                            <Switch TValue="bool" @bind-Checked="@isCTEPUser"></Switch>
                        </FieldBody>
                    </Field>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">CTEP Id</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is6">
                            <TextEdit Placeholder="CTEP Id" MaxLength="100" @bind-Text="@ctepUserId" />
                        </FieldBody>
                    </Field>
                </Div>
            </Div>
        </StepPanel>
        <StepPanel Name="step2">
            <h4>Role Assignment</h4>
            <Divider />
            <Div Flex="Flex.JustifyContent.Start" Margin="Margin.Is4.FromBottom" Background="Background.Light">
                <Div Padding="Padding.Is2" Style="@flexItemStylePrimRole">
                    <Field>
                        <FieldLabel ColumnSize="ColumnSize.Is12" TextWeight="TextWeight.Bold">Primary Role</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is4" Margin="Margin.IsAuto">
                            <SelectList TItem="Role"
                                        TValue="int"
                                        Data="@primaryRoles"
                                        TextField="@((role)=>role.RoleName)"
                                        ValueField="@((role)=>role.RoleId)"
                                        SelectedValue = "@primaryRoleId"
                                        SelectedValueChanged = "@OnChangeRole"
                                        
                                        DefaultItemText="Select the Primary Role" />
                        </FieldBody>
                    </Field>
                </Div>
                <Div Style="@flexItemStyleSpacer"></Div>
                <Div Padding="Padding.Is2" Style="@flexItemStyleSecRole" Display="@showSecondaryRoles">
                    <Field>
                        <FieldLabel ColumnSize="ColumnSize.Is10" TextWeight="TextWeight.Bold">Available Secondary Roles</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is4" Margin="Margin.IsAuto">
                            <SelectList TItem="Role"
                                        TValue="int"
                                        Data="@rolesAvailable"
                                        TextField="@((role)=>role.RoleName)"
                                        ValueField="@((role)=>role.RoleId)"
                                        @bind-SelectedValues="@availabelRolesSelected"
                                        MaxVisibleItems = "12"
                                        Multiple />
                        </FieldBody>
                    </Field>
                    <Button Color="Color.Primary" Clicked="@MoveToSelectedRole">Add to Assigned</Button>
                </Div>
                <Div Padding="Padding.Is2" Style="@flexItemStyleSecRole2" Display="@showSecondaryRoles">
                    <Field>
                        <FieldLabel TextWeight="TextWeight.Bold">Assigned Seconday Roles</FieldLabel>
                        <FieldBody>
                            <DataGrid TItem="UserRole"
                                        Class="admindataeditgrid"
                                        Data="@selectedUserRoleList"
                                        @bind-SelectedRow="@selectedUserRole"
                                        @bind-SelectedRows="@selectedUserRoles"
                                        Editable
                                        Responsive
                                        PageSize="2000"
                                        FixedHeader
                                        FixedHeaderDataGridHeight="278px"
                                        FixedHeaderDataGridMaxHeight="278px"
                                        SelectionMode = "DataGridSelectionMode.Multiple"
                                        CommandMode="DataGridCommandMode.Commands"
                                        EditMode="DataGridEditMode.Inline">
                                <DataGridColumns>
                                    <DataGridColumn Width="260px"  Caption="Role Name">
                        	            <DisplayTemplate>
                                                <Text>@GetRoleName((context as UserRole).RoleId)</Text>
                                        </DisplayTemplate>
                                    </DataGridColumn> 
                                    <DataGridColumn Field="@nameof(UserRole.ExpirationDate)" Width="150" Caption="Last Access Date" Editable DisplayFormat="{0:dd-MMM-yyyy}">
                                    </DataGridColumn>
                                    <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="false">
                                        <SaveCommandTemplate>
                                            <Button ElementId="btnSave" Size="Size.ExtraSmall" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                                        </SaveCommandTemplate>
                                        <CancelCommandTemplate>
                                            <Button ElementId="btnCancel" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@context.Clicked">Cancel</Button>
                                        </CancelCommandTemplate>
                                    </DataGridCommandColumn>
                                </DataGridColumns>
                                <ButtonRowTemplate>
                                    <Button Color="Color.Primary" Size="Size.ExtraSmall" Disabled="(selectedUserRole is null)" Clicked="context.EditCommand.Clicked">Edit</Button>
                                </ButtonRowTemplate>
                            </DataGrid>
                        </FieldBody>
                    </Field>
                    <Button Color="Color.Primary" Clicked="@RemoveFromSelectedRole">Remove from Assigned</Button>                    
                </Div>
            </Div>
        </StepPanel>
        <StepPanel Name="step3">
            <h4>Study and Group Assignment</h4>
            <Divider />
            <Div Display="@showStudies">
                <Div Padding="Padding.Is2">
                    <Field ColumnSize="ColumnSize.Is4">
                        <FieldLabel ColumnSize="ColumnSize.Is8" TextWeight="TextWeight.Bold">Study Assignment options</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is2" Margin="Margin.IsAuto">
                            <Select TValue="int" SelectedValue="@studySelectionType" SelectedValueChanged="@OnStudySelectionChanged">
                                <SelectItem Value="0">Please select an option</SelectItem>
                                <SelectItem Value="1">Access by Study and Group Assignments</SelectItem>
                                <SelectItem Value="2">All Studies Assigned</SelectItem>
                            </Select>
                        </FieldBody>
                    </Field>
                </Div>
                <Div Flex="Flex.JustifyContent.Start" Margin="Margin.Is4.FromBottom" Background="Background.Light" Display="@studyGroupAssignmentDiv">
                    <Div Padding="Padding.Is2" Style="@flexItemStyleProts">
                        <Field>
                            <FieldLabel TextWeight="TextWeight.Bold">Available Studies</FieldLabel>
                            <FieldBody>
                                <SelectList TItem="Protocol"
                                    MaxVisibleItems = "14"
                                    TValue="string"
                                    Data="@protocolsAvailable"
                                    TextField="@((protocol)=>protocol.StudyId)"
                                    ValueField="@((protocol)=>protocol.StudyId)"
                                    @bind-SelectedValues="@availableSelected"
                                    Multiple />
                            </FieldBody>
                        </Field>
                        <Button Color="Color.Primary" Clicked="@MoveToSelectedProtocol">Add to Assigned</Button>
                    </Div>
                    <Div Padding="Padding.Is2" Style="@flexItemStyleProtsGrid">
                        <Field>
                            <FieldLabel TextWeight="TextWeight.Bold">Assigned Studies</FieldLabel>
                            <FieldBody>
                                <DataGrid TItem="UserProtocol"
                                          Class="admindataeditgrid"
                                          Data="@selectedUserProtocolList"
                                          @bind-SelectedRow="@selectedUserProtocol"
                                          @bind-SelectedRows="@selectedUserProtocols"
                                          Editable
                                          Responsive
                                          PageSize="2000"
                                          FixedHeader
                                          FixedHeaderDataGridHeight="324px"
                                          FixedHeaderDataGridMaxHeight="324px"
                                          SelectionMode = "DataGridSelectionMode.Multiple"
                                          CommandMode="DataGridCommandMode.Commands"
                                          EditMode="DataGridEditMode.Inline">
                                    <DataGridColumns>
                                        <DataGridColumn Field="@nameof(UserProtocol.StudyId)" Width="100px" Caption="Study Id" />
                                        <DataGridColumn Field="@nameof(UserProtocol.ExpirationDate)" Width="200px" Caption="Last Access Date" Editable DisplayFormat="{0:dd-MMM-yyyy}">
                                        </DataGridColumn>
                                        <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="false">
                                            <SaveCommandTemplate>
                                                <Button ElementId="btnSave" Size="Size.ExtraSmall" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                                            </SaveCommandTemplate>
                                            <CancelCommandTemplate>
                                                <Button ElementId="btnCancel" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@context.Clicked">Cancel</Button>
                                            </CancelCommandTemplate>
                                        </DataGridCommandColumn>
                                    </DataGridColumns>
                                    <ButtonRowTemplate>
                                        <Button Color="Color.Primary" Size="Size.ExtraSmall" Disabled="(selectedUserProtocol is null)" Clicked="context.EditCommand.Clicked">Edit</Button>
                                    </ButtonRowTemplate>
                                </DataGrid>
                            </FieldBody>
                        </Field>
                        <Button Color="Color.Primary" Clicked="@RemoveFromSelectedProtocol">Remove from Assigned</Button>
                    </Div>
                    <Div Style="@flexItemStyleSpacer"></Div>
                    <Div Padding="Padding.Is2" Style="@flexItemStyleProts">
                        <Field>
                            <FieldLabel TextWeight="TextWeight.Bold">Available Groups</FieldLabel>
                            <FieldBody>
                                <SelectList TItem="Group"
                                    MaxVisibleItems = "14"
                                    TValue="int"
                                    Data="@groupsAvailable"
                                    TextField="@((group)=>group.GroupName)"
                                    ValueField="@((group)=>group.WRGroupId)"
                                    @bind-SelectedValues="@availableGroupsSelected"
                                    Multiple />
                            </FieldBody>
                        </Field>
                        <Button Color="Color.Primary" Clicked="@MoveToSelectedGroup">Add to Assigned</Button>
                    </Div>
                    <Div Padding="Padding.Is2" Style="@flexItemStyleProtsGrid">
                        <Field>
                            <FieldLabel TextWeight="TextWeight.Bold">Assigned Groups</FieldLabel>
                            <FieldBody>
                                <DataGrid TItem="UserGroup"
                                          Class="admindataeditgrid"
                                          Data="@selectedUserGroupList"
                                          @bind-SelectedRow="@selectedUserGroup"
                                          @bind-SelectedRows="@selectedUserGroups"
                                          Editable
                                          Responsive
                                          PageSize="2000"
                                          FixedHeader
                                          FixedHeaderDataGridHeight="320px"
                                          FixedHeaderDataGridMaxHeight="320px"
                                          SelectionMode = "DataGridSelectionMode.Multiple"
                                          CommandMode="DataGridCommandMode.Commands"
                                          EditMode="DataGridEditMode.Inline">
                                    <DataGridColumns>
                                        <DataGridColumn Width="240px"  Caption="Group Name">
                        	                <DisplayTemplate>
                                                    <Text>@GetGroupName((context as UserGroup).GroupId)</Text>
                                            </DisplayTemplate>
                                        </DataGridColumn> 
                                        <DataGridColumn Field="@nameof(UserGroup.ExpirationDate)" Width="200" Caption="Last Access Date" Editable DisplayFormat="{0:dd-MMM-yyyy}">
                                        </DataGridColumn>
                                        <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="false">
                                            <SaveCommandTemplate>
                                                <Button ElementId="btnSave" Size="Size.ExtraSmall" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                                            </SaveCommandTemplate>
                                            <CancelCommandTemplate>
                                                <Button ElementId="btnCancel" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@context.Clicked">Cancel</Button>
                                            </CancelCommandTemplate>
                                        </DataGridCommandColumn>
                                    </DataGridColumns>
                                    <ButtonRowTemplate>
                                        <Button Color="Color.Primary" Size="Size.ExtraSmall" Disabled="(selectedUserGroup is null)" Clicked="context.EditCommand.Clicked">Edit</Button>
                                    </ButtonRowTemplate>
                                </DataGrid>
                            </FieldBody>
                        </Field>
                        <Button Color="Color.Primary" Clicked="@RemoveFromSelectedGroup">Remove from Assigned</Button>
                    </Div>
                </Div>
            </Div>
            <Div Padding="Padding.Is2" Background="Background.Light" Display="@showIsAdmin">
                <Text TextColor="TextColor.Dark">Admin users have permissions to all Studies by default</Text>
            </Div>
        </StepPanel>
        <StepPanel Name="step4">
            <h4>Review and Save</h4>
        </StepPanel>
    </Content>
</Steps>
<Divider />
<Div Display="Display.Flex" Class="justify-content-center pe-5">
    <Button Color="Color.Light" Display="Display.Block" Clicked="@Cancel">Cancel</Button>
    <Div Class="pe-2"></Div>
    <Button Color="Color.Primary" Display="@displayPrev" Clicked="() => stepsRef.PreviousStep()"> Previous</Button>
    <Div Class="pe-2" Display="displayPrev"></Div>
    <Button Color="Color.Primary" Display="@displayNext" Clicked="() => stepsRef.NextStep()">Next</Button>
    <Button Color="Color.Danger" Display="@displaySave" Clicked="@Save">Save User</Button>
</Div>
@code {
    [Inject] IUserService userService { get; set; } = null!;
    [Inject] IUserRoleService userRoleService { get; set; } = null!;
    [Inject] IStudyService studyService { get; set; } = null!;
    [Inject] IGroupService groupService { get; set; } = null!;
    [Inject] INotificationService NotificationService { get; set; }
    [Inject] private NavigationManager navigation {get; set; } = null!;

    [Parameter] public int? UserId { get; set; }

    // All steps
    public string AddOrEdit { get; set; }
    string selectedStep = "step1";
    private Steps stepsRef;
    IFluentDisplay displayPrev = Display.None;
    IFluentDisplay displayNext = Display.Block;
    IFluentDisplay displaySave = Display.None;
    string flexContainerStyle = $"width:50%;";
    string flexItemStylePrimRole = $"width:300px;";
    string flexItemStyleSecRole = $"width:340px;";
    string flexItemStyleSecRole2 = $"width:600px;";
    string flexItemStyleProts = $"width:300px;";
    string flexItemStyleProtsGrid = $"width:500px;";
    string flexItemStyleSpacer = $"width:1px;background-color: gray;";

    // Step 1 vars (User Info)
    string firstName = "";
    string lastName = "";
    string email = "";
    string title = "";
    bool isActive = false;
    bool isCTEPUser = false;
    string ctepUserId = "";
    bool isAdmin = false;

    // Step 2 vars (Role assignment)
    IFluentDisplay showSecondaryRoles = Display.None;
    int primaryRoleId = 0;
    List<Role> allRoles;
    IList<Role> primaryRoles;
    IList<Role> rolesAvailable;
    IReadOnlyList<int> availabelRolesSelected { get; set; }
    IList<UserRole> selectedUserRoleList = new List<UserRole>();
    private UserRole selectedUserRole;
    List<UserRole> selectedUserRoles { get; set; }

    // Step 3 vars (Protocol & Group Assignment)
    IFluentDisplay showStudies = Display.None;
    IFluentDisplay showIsAdmin = Display.None;
    IFluentDisplay studyGroupAssignmentDiv = Display.None;

    //  Protocol vars
    int studySelectionType = 2;
    List<Group> allGroups;
    IList<Protocol> protocolsAvailable;
    IReadOnlyList<string> availableSelected { get; set; }
    IList<UserProtocol> selectedUserProtocolList = new List<UserProtocol>();
    private UserProtocol selectedUserProtocol;
    List<UserProtocol> selectedUserProtocols { get; set; }
    // Group vars
    IList<Group> groupsAvailable;
    IReadOnlyList<int> availableGroupsSelected { get; set; }
    IList<UserGroup> selectedUserGroupList = new List<UserGroup>();
    private UserGroup selectedUserGroup;
    List<UserGroup> selectedUserGroups { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId == null )
        {
            AddOrEdit = "Create User";
        }
        else
        {
            AddOrEdit = "Edit User";
        }

        allRoles = (await userRoleService.GetAllRolesAsync()).ToList();
        primaryRoles = allRoles.ToList().Where(p => p.IsPrimary).ToList();
        rolesAvailable = allRoles.ToList().Where(p => !p.IsPrimary).ToList();

        protocolsAvailable = (await studyService.GetAllProtocolsAsync()).OrderBy(p=>p.StudyId).ToList();
        groupsAvailable = (await groupService.GetAllGroupsAsync()).OrderBy(g => g.GroupName).ToList();
        allGroups = (await groupService.GetAllGroupsAsync()).OrderBy(g => g.GroupName).ToList();

        if (UserId != null)
        {
            GetUser(UserId);
            AddOrEdit = "Edit User - " + firstName + " " + lastName;
            OnChangeRole(primaryRoleId);
        }
    }

    private Task OnSelectedStepChanged( string name )
    {
        selectedStep = name;

        // Navigation buttons
        if (stepsRef.SelectedStep == "step1")
        {
            displayPrev = Display.None;
            displayNext = Display.Block;
            displaySave = Display.None;
        }
        else if (stepsRef.SelectedStep == "step4")
        {
            displayPrev = Display.Block;
            displayNext = Display.None;
            displaySave = Display.Block;
        }
        else
        {
            displayPrev = Display.Block;
            displayNext = Display.Block;
            displaySave = Display.None;
        }

        // Roles step
        if (stepsRef.SelectedStep == "step2")
        {
            if (isAdmin)
                showSecondaryRoles = Display.None;
            else
                showSecondaryRoles = Display.Block;
        }

        // Protocol & Group div
        if  (stepsRef.SelectedStep == "step3")
        {
            if (isAdmin)
            {
                showStudies = Display.None;
                showIsAdmin = Display.Block;
            }
            else
            {
                showStudies = Display.Block;
                showIsAdmin = Display.None;
            }
        }
        return Task.CompletedTask;
    }

    private bool NavigationAllowed( StepNavigationContext context )
    {
        //if ( context.CurrentStepIndex == 2 && context.NextStepIndex > 2 && !ValidationRule.IsEmail( email ) )
        //{
        //    return false;
        //}

        return true;
    }

    private async void GetUser(int? userId)
    {
        User curUser = await userService.GetUserAsync(Convert.ToInt32(userId));
        List<Role> curRoles = await userRoleService.GetUserRolesAsync(Convert.ToInt32(userId));

        // Step 1
        firstName = curUser.FirstName;
        lastName = curUser.LastName;
        email = curUser.EmailAddress;
        title = curUser.Title;
        isActive = curUser.IsActive;
        isCTEPUser = curUser.IsCtepUser;
        ctepUserId = curUser.CtepUserId;

        // Step 2
        // Get the primary role
        var curPrimRole = curUser.UserRoles.Where(r => r.Role.IsPrimary == true);
        primaryRoleId = curPrimRole.FirstOrDefault().RoleId;
        // Get the secondary roles
        var curSecondaryRoles = curUser.UserRoles.Where(r=>r.Role.IsPrimary == false);
        selectedUserRoleList = curSecondaryRoles.ToList();
        // Remove assigned from role list
        foreach (UserRole ur in selectedUserRoleList)
        {
            Role foundRole = rolesAvailable.First(r=>r.RoleId == ur.RoleId);
            rolesAvailable.Remove(foundRole);
        }

        // Step 3
        if (curPrimRole.FirstOrDefault().Role.AdminType == WRAdminType.None && curUser.AllStudies)
            studySelectionType = 2;
        else
            studySelectionType = 1;

         await OnStudySelectionChanged(studySelectionType);

        // Add to assigned studies
        selectedUserProtocolList = curUser.UserProtocols.ToList();
        // Remove assigned from study list
        foreach (UserProtocol up in selectedUserProtocolList)
        {
            Protocol foundProtocol = protocolsAvailable.First(p => p.StudyId == up.StudyId);
            protocolsAvailable.Remove(foundProtocol);
        }

        // Add to assigned groups
        selectedUserGroupList = curUser.UserGroups.ToList();
        // Remove assigned from group list
        foreach (UserGroup ug in selectedUserGroupList)
        {
            Group foundGroup = groupsAvailable.First(g=>g.WRGroupId == ug.GroupId);
            groupsAvailable.Remove(foundGroup);
        }
    }

    private Task OnChangeRole( int value )
    {
        primaryRoleId = value;
        Role selectedRole = allRoles.FirstOrDefault(r => r.RoleId == primaryRoleId);
        if (selectedRole != null && selectedRole.AdminType != WRAdminType.None)
            isAdmin = true;
        else
            isAdmin = false;

        if (isAdmin)
            showSecondaryRoles = Display.None;
        else
            showSecondaryRoles = Display.Block;

        return Task.CompletedTask;
    }

    private async void MoveToSelectedProtocol()
    {
        // Add studies to assigned grid
        if (availableSelected != null)
        {
            foreach (string availStudy in availableSelected)
            {
                // Remove from Available list
                Protocol foundProtocol = protocolsAvailable.First(p => p.StudyId == availStudy);
                protocolsAvailable.Remove(foundProtocol);
                // Add to Assigned list
                UserProtocol newUP = new UserProtocol();
                newUP.StudyId = foundProtocol.StudyId;
                selectedUserProtocolList.Add(newUP);
            }
            selectedUserProtocolList = selectedUserProtocolList.OrderBy(sup => sup.StudyId).ToList();
        }
        availableSelected = null;
    }

    private async void RemoveFromSelectedProtocol()
    {
        // Remove studies from assigned grid
        if (selectedUserProtocols != null)
        {
            foreach (UserProtocol selProtocol in selectedUserProtocols)
            {
                // Remove from Assigned list
                selectedUserProtocolList.Remove(selProtocol);

                //Add to Available list
                Protocol newP = new Protocol();
                newP.StudyId = selProtocol.StudyId;
                protocolsAvailable.Add(newP);
            }
            protocolsAvailable = protocolsAvailable.OrderBy(pa => pa.StudyId).ToList();
        }
        selectedUserProtocols = null;
    }

    private Task OnStudySelectionChanged(int value)
    {
        studySelectionType = value;
        if (studySelectionType == 1)
            studyGroupAssignmentDiv = Display.Block;
        else
            studyGroupAssignmentDiv = Display.None;

        return Task.CompletedTask;
    }

    private string GetGroupName(int groupId)
    {
        return allGroups.Find(g => g.WRGroupId == groupId).GroupName;
    }

    private async void MoveToSelectedGroup()
    {
        if (availableGroupsSelected != null)
        {
            foreach (int selGroup in availableGroupsSelected)
            {
                // Add to assigned list
                Group foundGroup = groupsAvailable.First(g=>g.WRGroupId == selGroup);
                groupsAvailable.Remove(foundGroup);
                // Remove from available list
                UserGroup newUG = new UserGroup();
                newUG.GroupId = foundGroup.WRGroupId;
                newUG.Group = foundGroup;
                selectedUserGroupList.Add(newUG);
            }
        }
        availableGroupsSelected = null;
    }

    private async void RemoveFromSelectedGroup()
    {
        // Remove groups from assigned grid
        if (selectedUserGroups != null)
        {
            foreach(UserGroup selUserGroup in selectedUserGroups)
            {
                // Remove from Assigned List
                selectedUserGroupList.Remove(selUserGroup);

                //Add to Available list
                Group newG = new Group();
                newG.WRGroupId = selUserGroup.GroupId;
                newG.GroupName = allGroups.Find(g => g.WRGroupId == selUserGroup.GroupId).GroupName;
                groupsAvailable.Add(newG);
            }
        }
        selectedUserGroups = null;
    }

    private string GetRoleName(int roleId)
    {
        return allRoles.Find(r => r.RoleId == roleId).RoleName;
    }

    private async void MoveToSelectedRole()
    {
        if (availabelRolesSelected != null)
        {
            foreach (int selRole in availabelRolesSelected)
            {
                // Add to assigned list
                Role foundRole = rolesAvailable.First(r => r.RoleId == selRole);
                rolesAvailable.Remove(foundRole);
                // Remove from available list
                UserRole newUR = new UserRole();
                newUR.RoleId = foundRole.RoleId;
                newUR.Role = foundRole;
                selectedUserRoleList.Add(newUR);
            }
        }
        availabelRolesSelected = null;
    }

    private async void RemoveFromSelectedRole()
    {
        // Remove roles from assigned grid
        if (selectedUserRoles != null)
        {
            foreach(UserRole selUserRole in selectedUserRoles)
            {
                // Remove from Assigned List
                selectedUserRoleList.Remove(selUserRole);

                //Add to Available list
                Role newR = new Role();
                newR.RoleId = selUserRole.RoleId;
                newR.RoleName = allRoles.Find(r => r.RoleId == selUserRole.RoleId).RoleName;
                rolesAvailable.Add(newR);
            }
        }
        selectedUserRoles = null;        
    }

    private DateTime? ExpirationDate()
    {
        return selectedUserProtocol.ExpirationDate ;
    }

    private async void Save()
    {
        bool saved = false;
        DateTime createDateTime = DateTime.UtcNow;

        // Step 1 - user info
        User saveUser = new User();
        if (UserId != null)
            saveUser.UserId = (int)UserId;
        saveUser.FirstName = firstName;
        saveUser.LastName = lastName;
        saveUser.EmailAddress = email;
        saveUser.Title = title;
        saveUser.IsActive = isActive;
        saveUser.IsCtepUser = isCTEPUser;
        saveUser.CtepUserId = ctepUserId;
        saveUser.IsLockedOut = false;
        saveUser.CreateDate = createDateTime;
        saveUser.AllStudies = isAdmin;

        //Step 2 - Roles
        //  Save Primary role
        UserRole newUR = new UserRole();
        newUR.RoleId = primaryRoleId;
        newUR.CreateDate = createDateTime;
        saveUser.UserRoles.Add(newUR);

        if (!isAdmin)
        {
            //  Save Secondary Roles
            foreach (UserRole userRole in selectedUserRoleList)
            {
                UserRole newUR2 = new UserRole();
                newUR2.RoleId = userRole.RoleId;
                newUR2.ExpirationDate = userRole.ExpirationDate;
                newUR2.CreateDate = createDateTime;
                saveUser.UserRoles.Add(newUR2);
            }

            //Step 3 - Protocols & Groups
            if (studySelectionType == 1)
            {
                // Use study and protocols for assignments
                foreach (UserProtocol userProt in selectedUserProtocolList)
                {
                    UserProtocol newUP = new UserProtocol();
                    newUP.StudyId = userProt.StudyId;
                    newUP.ExpirationDate = userProt.ExpirationDate;
                    newUP.CreateDate = createDateTime;
                    saveUser.UserProtocols.Add(newUP);
                }

                foreach (UserGroup userGroup in selectedUserGroupList)
                {
                    UserGroup newUG = new UserGroup();
                    newUG.GroupId = userGroup.GroupId;
                    newUG.ExpirationDate = userGroup.ExpirationDate;
                    newUG.CreateDate = createDateTime;
                    saveUser.UserGroups.Add(newUG);
                }
            }
            else if (studySelectionType == 2)
                saveUser.AllStudies = true;
        }

        saved = userService.SaveUser(saveUser);

        if (saved)
        {
            await NotificationService.Success( "User successfully saved");
            navigation.NavigateTo("/admin/users");
        }
        else
        {
            await NotificationService.Error( "Error saving user");
            navigation.NavigateTo("/admin/users");
        }
    }

    private void Cancel()
    {
        navigation.NavigateTo("/admin/users");
    }

    private void OnHelpClicked()
    {
        
    }
}
