@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@inject IHttpContextAccessor httpContextAccessor
@layout AdminLayout

@page "/admin/dashboards"
<AdminRoleCheck AllowedRoles="@(new List<string> { "IT" })"></AdminRoleCheck>
<Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1"><h2>Dashboard List</h2></Div>
<Row Background="Background.Light">
    <Column ColumnSize="ColumnSize.IsFull">
        <DataGrid TItem="Dashboard"
                  Class="admindatagrid"
                  Data="@dashboardList"
                  Responsive
                  Striped
                  ShowPager
                  ShowPageSizes
                  MaxPaginationLinks="5"
                  PagerPosition="DataGridPagerPosition.Bottom"
                  PagerOptions="new(){ButtonSize=Size.Default, 
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
                  FixedHeader
                  FixedHeaderDataGridHeight="calc(100vh - 240px)"
                  FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
                  CommandMode="DataGridCommandMode.ButtonRow">
            <DataGridColumns>
                <DataGridMultiSelectColumn Width="30px"> </DataGridMultiSelectColumn>
                <DataGridCommandColumn />
                <DataGridColumn Field="@nameof(Dashboard.Name)" Caption="Dashboard Name" Width="250px" />
                <DataGridColumn Field="@nameof(Dashboard.Description)" Caption="Description" />
                <DataGridColumn Sortable="false" Filterable="false" Width="140px">
                    <DisplayTemplate>
                        <Button Color="Color.Info" Clicked="@(()=>EditDashboardClick(context as Dashboard))">Edit</Button>
                        <Button Color="Color.Secondary" Clicked="@(()=>DeleteDashboardClick(context as Dashboard))">Delete</Button>
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
            <ButtonRowTemplate>
                <Button Color="Color.Primary" Clicked="@NewDashboardClick">Create Dashboard</Button>
                <Button Color="Color.Primary" Clicked="@OnOrderDashboardsClicked">Change Display Order</Button>
            </ButtonRowTemplate>
        </DataGrid>
    </Column>
</Row>
<Modal @ref="reorderRef" Closing="@OnModalClosing">
    <ModalContent>
        <ModalHeader Background="Background.Primary" TextColor="TextColor.Light">
            <ModalTitle>Order Dashboards</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <DropContainer @ref="reorderContainer" TItem="DropItem" Items="@items" ItemsFilter="@((item, dropZone) => item.Group == dropZone)" ItemDropped="@ItemDropped" Flex="Flex.Wrap.Grow.Is1">
                <ChildContent>
                    <DropZone TItem="DropItem" Name="All" AllowReorder Border="Border.Rounded" Background="Background.Light" Padding="Padding.Is1" Margin="Margin.Is1" Flex="Flex.Grow.Is1">
                        <Heading Size="HeadingSize.Is5">Drag and drop dashboards to the correct order</Heading>
                    </DropZone>
                </ChildContent>
                <ItemTemplate>
                    <Card Shadow="Shadow.Small" Background="Background.Light" Margin="Margin.Is1.OnY">
                        <CardBody>
                            @context.Name
                        </CardBody>
                    </Card>
                </ItemTemplate>
            </DropContainer>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@CancelReorder">Cancel</Button>
            <Button Color="Color.Primary" Clicked="@UpdateOrder">Update</Button>
        </ModalFooter>            
    </ModalContent>
</Modal>
<Modal @ref="deleteModalRef">
    <ModalContent Centered>
        <ModalHeader Background="Background.Primary" TextColor="TextColor.Light">
            <ModalTitle>Delete Dashboard: @dashboardToDelete</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            Warning:  Continuing will delete this dashboard.
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Light" Clicked="@HideDeleteModal">Cancel</Button>
            <Button Color="Color.Danger" Clicked="@DeleteDashboardClick2">Delete</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
@code {
    [Inject] private NavigationManager navigation {get; set; } = null!;
    [Inject] IDashboardService dashboardService { get; set; } = null!;
    [Inject] INotificationService NotificationService { get; set; }

    public List<Dashboard> dashboardList = new List<Dashboard>();
    private Modal? reorderRef;
    private bool cancelClose;
    private DropContainer<DropItem> reorderContainer;
    List<DropItem> items = new List<DropItem>();
    List<int> dashIdOrder = new List<int>();

    private Modal deleteModalRef;
    private string dashboardToDelete;
    private int dashboardToDeleteId;

    protected override async Task OnInitializedAsync()
    {
        dashboardList = (await dashboardService.GetAllDashboardsAsync()).ToList();
        SetItemOrder();
    }

    private void SetItemOrder()
    {
        items.Clear();
        dashIdOrder.Clear();
        foreach (Dashboard dash in dashboardList)
        {
            items.Add(new DropItem() { Name = dash.Name!, DashId = dash.DashboardId, DisplayOrder = dash.DisplayOrder, Group="All" });
            dashIdOrder.Add(dash.DashboardId);
        }
    }

    private void NewDashboardClick()
    {
        navigation.NavigateTo("/admin/dashboard");
    }

    private void EditDashboardClick(Dashboard d)
    {
        navigation.NavigateTo($"/admin/dashboard/{d.DashboardId}");
    }

    private Task ShowDeleteModal(Dashboard d)
    {
        dashboardToDelete = d.Name;
        dashboardToDeleteId = d.DashboardId;
        return deleteModalRef.Show();
    }

    private Task HideDeleteModal()
    {
        return deleteModalRef.Hide();
    }

    private async void DeleteDashboardClick(Dashboard d)
    {
        Tuple<bool, string> canDelDashboard = dashboardService.CanDeleteDashboard(d.DashboardId);

        if (!canDelDashboard.Item1)
            await NotificationService.Error(canDelDashboard.Item2);
        else
        {
            dashboardToDelete = d.Name;
            dashboardToDeleteId = d.DashboardId;
            await deleteModalRef.Show();
        }
    }

    private async void DeleteDashboardClick2()
    {
        Dashboard dashToDel;
        // Check if any roles assigned to dashboard - if not ok to delete
        int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
        Tuple<bool, string> delDashboard = dashboardService.DeleteDashboard(dashboardToDeleteId, userId);

        await deleteModalRef.Hide();
        if (delDashboard.Item1)
        {
            await NotificationService.Success( "Dashboard deleted successfully");
            // Remove from dashboard list & ordering list
            dashToDel = dashboardList.Find(d => d.DashboardId == dashboardToDeleteId);
            dashboardList.Remove(dashToDel);
            SetItemOrder();
            StateHasChanged();
            reorderContainer.Refresh();
        }
        else
        {
             await NotificationService.Error(delDashboard.Item2);
        }
    }

    private Task OnOrderDashboardsClicked()
    {
        return reorderRef.Show();
    }

    public class DropItem
    {
        public string Name { get; init; }
        public int DashId { get; init; }
        public int DisplayOrder { get; set; }
        public string Group { get; init; }
    }

    private Task ItemDropped( DraggableDroppedEventArgs<DropItem> dropItem )
    {
        // All ordering will be saved in the dashIdOrder list
        int newIndex = dropItem.IndexInZone;
        int oldIndex = dashIdOrder.FindIndex( d=> d == dropItem.Item.DashId);
        dashIdOrder.RemoveAt(oldIndex);
        dashIdOrder.Insert(newIndex, dropItem.Item.DashId);

        return Task.CompletedTask;
    }

    private Task CancelReorder()
    {
        // Re-order back to original
        SetItemOrder();
        reorderContainer.Refresh();
        return reorderRef.Hide();
    }

    private Task UpdateOrder()
    {
        int newOrder = 0;
        // Iterate through items and re-order
        foreach (int order in dashIdOrder)
        {
            newOrder++;
            Dashboard foundDB = dashboardList.Find(d => d.DashboardId == order)!;
            foundDB.DisplayOrder = newOrder;
        }

        //reorderContainer.Refresh();
        dashboardList = dashboardList.OrderBy(d => d.DisplayOrder).ToList();
        StateHasChanged();

        int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
        bool saveDashes = dashboardService.SaveDashboardOrder(dashIdOrder, userId);

        if (saveDashes)
        {
            NotificationService.Success( "Dashboard order successfully saved");
        }
        else
        {
            NotificationService.Error( "Error saving dashboard order");
        }            
        return reorderRef.Hide();

    }

    private Task OnModalClosing( ModalClosingEventArgs e )
    {
        // just set Cancel to prevent modal from closing
        e.Cancel = cancelClose 
            || e.CloseReason != CloseReason.UserClosing;

        return Task.CompletedTask;
    }
}
