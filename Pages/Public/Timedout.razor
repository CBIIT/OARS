@page "/timedout"
@inject IConfiguration configuration
@layout LoginLayout

<Div Flex="Flex.JustifyContent.Between" Margin="Margin.Is3.FromBottom">
    <Div>
        <Image Source="img/DNA-Left.jpg"></Image>
    </Div>
    <Div Margin="Margin.Is5.FromTop">
        <h2>NCI Theradex Oncology Reporting</h2>
    </Div>
    <Div Margin="Margin.Is4.FromTop">
        <Image Source="img/theradex-logo.png"></Image>
    </Div>
    <Div Margin="Margin.Is5.FromTop">
        <h2>Focused. Connected.  Nimble.</h2>
    </Div>
    <Div>
        <Image Source="img/DNA-Right.jpg"></Image>
    </Div>
</Div>
<div class="loginVideoDiv">
    <video id="loginVideo" src="/video/Oncology CRO Services.mp4" autoplay loop muted defaultmuted playsinline></video>
    <Div Padding="Padding.Is2" Class="nci-centered-div">
        <Card Height="Height.Auto" Class="nci-login-card">
            <CardBody>
                <CardTitle Size="5">
                    Inactivity Timeout
                </CardTitle>
            </CardBody>
            <CardBody>
                <Div Flex="Flex.JustifyContent.Center">
                    You have been logged out due to inactivity.<BR />Please use the button below to return to the login screen.
                </Div>
                <Div Class="my-2" Flex="Flex.JustifyContent.Center">
                    <Button Flex="Flex.JustifyContent.Center" Block Color="Color.Primary" TextColor="TextColor.White" Clicked="@OnButtonClicked">Return to Login</Button>
                </Div>
                <Div Class="my-2" TextAlignment="TextAlignment.Center" Flex="Flex.JustifyContent.Center">
                    <EnvironmentLbl />
                </Div>
                <Div Class="my-2" TextAlignment="TextAlignment.Center" id="loginHelp">If you need assistance, please contact us at <a href="mailTo:@supportEmail">@supportEmail</a></Div>
            </CardBody>
        </Card>
    </Div>
</div>
@code {
    [Inject] public NavigationManager Navigation { get; set; }
    private int iconHeight = 24;
    public string CurrentEnvironment { get; set; }
    private string supportEmail = "";

    string loginPaneStyle = $"width:35%";
    string border = $"width:100%;";

    protected override async Task OnInitializedAsync()
    {
        string currentEnvironment = configuration.GetValue<string>("System:Environment");
        if (currentEnvironment != "Prod")
            CurrentEnvironment = currentEnvironment;
        else
            CurrentEnvironment = "";

        supportEmail = configuration.GetValue<string>("EmailSettings:SupportEmail");
        await base.OnInitializedAsync();
    }

    Task OnButtonClicked()
    {
        Navigation.NavigateTo($"landing", true);

        return Task.CompletedTask;
    }
}
