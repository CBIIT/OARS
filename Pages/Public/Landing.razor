@page "/"
@page "/landing"
@page "/login"
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services;
@using TheradexPortal.Data;
@using TheradexPortal.Data.Services.Abstract;
@layout LoginLayout

<Container Position="Position.Absolute.Top.Is50.Start.Is50.Translate.Middle">
    <Row>
        <Column ColumnSize="ColumnSize.Is4.Is4.WithOffset">
            <Card>
                <CardBody>
                    <CardTitle Size="5">
                        Web Reporting 3.0
                    </CardTitle>
                </CardBody>
                <CardBody>
                    <Div Class="my-2" Flex="Flex.JustifyContent.Center">
                        <!--Button Flex="Flex.JustifyContent.Center" Block Color="Color.Secondary" Type="ButtonType.Link" To="/Login/Login">Theradex Sign In</!--Button-->
                        <Button Flex="Flex.JustifyContent.Center" Block Color="Color.Primary" TextColor="TextColor.White" Clicked="@OnButtonClicked">Theradex Sign In</Button>
                    </Div>
                    <Div Class="my-2" Flex="Flex.JustifyContent.Center">
                        <Button Flex="Flex.JustifyContent.Center" Block Color="Color.Primary" TextColor="TextColor.White" Clicked="@OnSAMLButtonClicked">CTEP/NIH Sign In</Button>
                    </Div>
                </CardBody>
            </Card>
            <br />
            <Div>
                <Alert Color="Color.Info" @bind-Visible="@noteVisible">
                    <AlertMessage>Notes and Updates</AlertMessage>
                    <AlertDescription>@activeNote.AlertText</AlertDescription>
                </Alert>
                <Alert Color="Color.Warning" @bind-Visible="@alertVisible">
                    <AlertMessage>Alerts</AlertMessage>
                    <AlertDescription>@activeAlert.AlertText</AlertDescription>
                </Alert>
            </Div>
        </Column>
    </Row>
</Container>

@code {
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject] private IAlertService alertService { get; set; } = null!;
    private IList<WRAlert> activeAlerts = new List<WRAlert>();
    private IList<WRAlert> activeNotes = new List<WRAlert>();
    private WRAlert activeAlert = new WRAlert();
    private WRAlert activeNote = new WRAlert();
    protected bool noteVisible;
    protected bool alertVisible;

    protected override async Task OnInitializedAsync()
    {
        this.initializeAlerts();
        this.showAlerts();
        await base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    Task OnButtonClicked()
    {
        Navigation.NavigateTo($"Login", true);

        return Task.CompletedTask;
    }

    Task OnSAMLButtonClicked()
    {
        Navigation.NavigateTo($"Auth/Login", true);

        return Task.CompletedTask;
    }

    private async void initializeAlerts()
    {
        activeAlerts = await alertService.GetActiveLoginAlertsAsync();
        activeNotes = await alertService.GetActiveLoginNotesAsync();
    }

    private void showAlerts()
    {
        if (this.activeAlerts.Count > 0)
        {
            this.activeAlert = this.activeAlerts.FirstOrDefault()!;
            alertVisible = true;
        }

        if (this.activeNotes.Count > 0)
        {
            this.activeNote = this.activeNotes.FirstOrDefault()!;
            noteVisible = true;
        }
    }
}
