@page "/"
@page "/landing"
@page "/login"
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services;
@using TheradexPortal.Data;
@using TheradexPortal.Data.Services.Abstract;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage SessionData
@inject IConfiguration configuration
@layout LoginLayout

<Div Flex="Flex.JustifyContent.Between" Margin="Margin.Is3.FromBottom">
    <Div>
        <Image Source="img/DNA-Left.jpg"></Image>
    </Div>
    <Div Margin="Margin.Is5.FromTop">
        <h2>Web Reporting</h2>
    </Div>
    <Div Margin="Margin.Is4.FromTop">
        <Image Source="img/theradex-logo.png"></Image>
    </Div>
    <Div Margin="Margin.Is5.FromTop">
        <h3>Focused. Connected.  Nimble.</h3>
    </Div>
    <Div>
        <Image Source="img/DNA-Right.jpg"></Image>
    </Div>
</Div>
<div class="loginVideoDiv">
    <video id="loginVideo" src="/video/Oncology CRO Services.mp4" autoplay loop muted defaultmuted playsinline></video>
    <Div Padding="Padding.Is2" Class="nci-centered-div">
        <Card Height="Height.Auto" Class="nci-login-card">
            <CardBody>
                <CardTitle Size="5">
                    Sign in
                </CardTitle>
            </CardBody>
            <CardBody>
                <Div Class="my-2" Flex="Flex.JustifyContent.Center">
                    <Button Flex="Flex.JustifyContent.Center" Block Color="Color.Primary" TextColor="TextColor.White" TextWeight="TextWeight.Bold" Clicked="@OnSAMLButtonClicked">CTEP/NIH Sign In</Button>
                </Div>
                <Div Class="my-2" Flex="Flex.JustifyContent.Center">
                    <Button Flex="Flex.JustifyContent.Center" Block Color="Color.Light" TextColor="TextColor.White" Clicked="@OnButtonClicked">Theradex Sign In</Button>
                </Div>
                <Div Class="my-2" TextAlignment="TextAlignment.Center" Flex="Flex.JustifyContent.Center">
                    <EnvironmentLbl />
                </Div>
            </CardBody>
        </Card>
    </Div>
</div>
<Div Flex="Flex.AlignItems.Stretch" Style="@border" >
    <Column>
        <Div Padding="Padding.Is2" Style="@border">
            <Accordion Class="nci-alert-accordion">
                <Collapse Visible>
                    <CollapseHeader>
                        <AccordionToggle>
                            <Image Source="img/alert-icon.png" height="@iconHeight" Class="nci-alert-icon" />
                            Alerts
                        </AccordionToggle>
                    </CollapseHeader>
                    <CollapseBody>
                        <AlertBar Alert LoginScreen NoAlertsMessage CSS="nci-alert-component" />
                    </CollapseBody>
                </Collapse>
            </Accordion>
        </Div>
    </Column>
    <Column>
        <Div Padding="Padding.Is2" Style="@border">
            <Accordion>
                <Collapse Visible>
                    <CollapseHeader>
                        <AccordionToggle>
                            <Image Source="img/notification-icon.png" height="@iconHeight" Class="nci-alert-icon" />
                            Notes
                        </AccordionToggle>
                    </CollapseHeader>
                    <CollapseBody Class="nci-alert-accordion">
                        <AlertBar Note LoginScreen NoAlertsMessage CSS="nci-alert-component" />
                    </CollapseBody>
                </Collapse>
            </Accordion>
        </Div>
    </Column>
</Div>

@code {
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject] private IAlertService alertService { get; set; } = null!;
    private IList<WRAlert> activeAlerts = new List<WRAlert>();
    private IList<WRAlert> activeNotes = new List<WRAlert>();
    private int iconHeight = 24;
    public string CurrentEnvironment { get; set; }

    string loginPaneStyle = $"width:35%";
    string border = $"width:100%;";

    protected override async Task OnInitializedAsync()
    {
        this.clearSessionData();
        activeAlerts = await alertService.GetActiveLoginAlertsAsync();
        activeNotes = await alertService.GetActiveLoginNotesAsync();
        
        string currentEnvironment = configuration.GetValue<string>("System:Environment");
        if (currentEnvironment != "Prod")
            CurrentEnvironment = currentEnvironment;
        else
            CurrentEnvironment = "";

        await base.OnInitializedAsync();
    }

    Task OnButtonClicked()
    {
        Navigation.NavigateTo($"Login", true);

        return Task.CompletedTask;
    }

    Task OnSAMLButtonClicked()
    {
        Navigation.NavigateTo($"Auth/Login", true);

        return Task.CompletedTask;
    }

    private void clearSessionData()
    {
        // Clear dismissed alerts from SessionData
        SessionData.SetAsync("dismissedAlerts", string.Empty);
    }
}
