@using System.Diagnostics.CodeAnalysis
@using Microsoft.Extensions.Options
@using Newtonsoft.Json
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Models.ADDR;
@using TheradexPortal.Data.Services
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Services.Abstract.Pharma
@using TheradexPortal.Data.Static;
@using TheradexPortal.Data.Models.Configuration;
@using TheradexPortal.Data.Services.Abstract.ADDR;
@using Microsoft.AspNetCore.Mvc;
@using System.Collections.Generic;
@using System.Linq;
@using TheradexPortal.Data.Models.Pharma;
@using TheradexPortal.Data.Identity
@inherits LayoutComponentBase

@inject IHttpContextAccessor httpContextAccessor;
@inject IConfiguration configuration;
@inject IOptions<EmailSettings> emailSettings;
@inject IJSRuntime JS;

@page "/pharma/pharmansctacs/{dashboardid:int?}/{reportid:int?}"

<Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1">
    <h2>Pharmas NSC TACS List </h2>
</Div>
<Row Background="Background.Light">
    <Column ColumnSize="ColumnSize.IsFull">
        <Div style="padding:16px; background-color:#f8f9fa; display:flex; justify-content:flex-end;">
            <Button Background="Background.Dark" Size="Size.Small" TextColor="TextColor.Light" Clicked="@NewClick">Create TAC Association</Button>
        </Div>
    </Column>
</Row>
<Row Background="Background.Light">
    <Column ColumnSize="ColumnSize.IsFull">
        <DataGrid TItem="PharmaNscTac"
        Class="addr-data-grid"
        Data="@pharmaNscTacList"
        Responsive
        Groupable
        ShowGrouping
        Hoverable
        Narrow
        Filterable
        ShowPager
        PageSize="50"
        ShowPageSizes
        MaxPaginationLinks="5"
        PagerPosition="DataGridPagerPosition.Bottom"
        FixedHeader
        FixedHeaderDataGridHeight="calc(100vh - 240px)"
        FixedHeaderDataGridMaxHeight="calc(100vh - 240px)"
        FilterMode="DataGridFilterMode.Menu"
        Resizable
        SortMode="DataGridSortMode.Multiple"
        ResizeMode="TableResizeMode.Columns"
        Striped
        PagerOptions="new(){ButtonSize=Size.Default,
                                PaginationPosition=PagerElementPosition.Default,
                                TotalItemsPosition=PagerElementPosition.End,
                                }"
        CommandMode="DataGridCommandMode.ButtonRow">
            <DataGridColumns>
                <DataGridMultiSelectColumn Width="30px"> </DataGridMultiSelectColumn>
                <DataGridCommandColumn />
                <DataGridColumn Field="@nameof(PharmaNscTac.Id)" Caption="Id" Displayable="true" />
                <DataGridColumn Field="@nameof(PharmaNscTac.AgreementNumber)" Caption="Agreement" Groupable />
                <DataGridColumn Field="@nameof(PharmaNscTac.Nsc)" Caption="NSC" Groupable />
                <DataGridColumn Field="@nameof(PharmaNscTac.ProtocolNumber)" Caption="Study" Groupable />
                <DataGridColumn Field="@nameof(PharmaNscTac.TrtAsgnmtCode)" Caption="Treatment Assignment  Code" Groupable />
                <DataGridColumn Field="@nameof(PharmaNscTac.TrtAsgnmtDescription)" Caption="Treatment Assignment  Description" />
                <DataGridColumn Field="@nameof(PharmaNscTac.Created)" Caption="Date Created" Displayable="false" />
                <DataGridColumn Field="@nameof(PharmaNscTac.Updated)" Caption="Date Updated" Displayable="false" />
                <DataGridColumn Field="@nameof(PharmaNscTac.Deleted)" Caption="Date Deleted" Displayable="false" Groupable />
                <DataGridColumn Field="@nameof(PharmaNscTac.IsDeleted)" Caption="Deleted" Displayable="true" Groupable />
                <DataGridColumn Field="@nameof(PharmaNscTac.IsActive)" Caption="Active" Displayable="true" Groupable />
                <DataGridColumn Sortable="false" Filterable="false" Width="140px">
                    <DisplayTemplate>
                        @* <Button Color="Color.Info" Clicked="@(()=>EditClick(context as PharmaNscTac))">Edit</Button> *@
                        <Button Color="Color.Secondary" Clicked="@(()=>ShowDeleteModal(context as PharmaNscTac))">Remove TAC Association</Button>
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
            <ButtonRowTemplate>
            </ButtonRowTemplate>
        </DataGrid>
    </Column>
</Row>
<Row Background="Background.Light">
    <Column ColumnSize="ColumnSize.IsFull">
        <Div style="padding:16px; background-color:#f8f9fa; display:flex; justify-content:flex-end;">
            <Button Background="Background.Dark" Size="Size.Small" TextColor="TextColor.Light" Clicked="@NewClick">Create TAC Association</Button>
        </Div>
    </Column>
</Row>
<Modal @ref="deleteModalRef">
    <ModalContent Centered>
        <ModalHeader Background="Background.Primary" TextColor="TextColor.Light">
            <ModalTitle>Delete TAC Association: @pharmaNscTacToDelete</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            Warning:  Continuing will delete this TAC Association.
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Light" Clicked="@HideDeleteModal">Cancel</Button>
            <Button Color="Color.Danger" Clicked="@DeleteClick">Delete</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
@code {
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] INotificationService NotificationService { get; set; }
    [Inject] IPharmaNscTacService pharmaNscTacService { get; set; } = null!;
    [Inject] IReceivingStatusService service { get; set; } = null!;
    [Inject] IUserService userService { get; set; } = null!;
    [Inject] TimeZoneService timeZoneService { get; set; } = null!;
    [Inject] IOktaService oktaService { get; set; } = null!;
    [Inject] IEmailService emailService { get; set; } = null;
    [Inject] IStudyService studyService { get; set; }
    [Inject] IProfileService profileService { get; set; } = null!;

    [Parameter] public bool IsAdminDisplay { get; set; } = false;
    [Parameter] public string ProtocolNumber { get; set; } = string.Empty;
    [Parameter] public int DashboardId { get; set; }
    [Parameter] public int ReportId { get; set; }

    private IList<Protocol> Protocols { get; set; } = new List<Protocol>();
    private string SelectedProtocol { get; set; } = string.Empty;
    private TimeSpan timeOffset;
    private string timeZoneAbbrev = "";

    private Modal deleteModalRef;
    private string pharmaNscTacToDelete;
    private int pharmaNscTacToDeleteId;
    private IList<PharmaNscTac> pharmaNscTacList = new List<PharmaNscTac>();

    protected override async Task OnInitializedAsync()
    {
        int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
        User curUser = await userService.GetUserAsync(userId);
        timeZoneAbbrev = curUser.TimeZoneAbbreviation;
        timeOffset = TimeSpan.FromMinutes((double)curUser.TimeOffset);

        // Fetch protocols
        //Protocols = await service.GetProtocols();
        Protocols = studyService.GetProtocolsForUserAsync(userId, true).ToList().Where(i => i.STS != null && i.STS.ToLower() == "yes" && i.CDASH != null && i.CDASH.ToLower() == "yes").ToList();
        pharmaNscTacList = (await pharmaNscTacService.GetAllAsync()).ToList();

        // List<string> allowed = new List<string> { "DMU Study Admin", "DMU Global Admin" };
        // allowed = new List<string> { };
        // List<string> adminRole = new List<string> { "IT" };

        // if (httpContextAccessor?.HttpContext?.User.HasAnyTHORRole(allowed.ToArray()) == false && httpContextAccessor?.HttpContext?.User.HasAnyAdminRole(adminRole.ToArray()) == false)
        // {
        //     var studyIds = userService.GetProtocolAccessForUser(httpContextAccessor.HttpContext.User.GetUserId());
        //     Protocols = Protocols.Where(x => studyIds.Contains(x.StudyId)).ToList();
        //     pharmaNscTacList = pharmaNscTacList.Where(x => studyIds.Contains(x.ProtocolNumber)).ToList();
        // }
    }


    private async void NewClick()
    {
        navigation.NavigateTo("/pharma/pharmansctac/");
    }

    private async void EditClick(PharmaNscTac p)
    {
        navigation.NavigateTo($"/pharma/pharmansctac/{p.Id}");
    }

    private async Task ShowDeleteModal(PharmaNscTac p)
    {
        bool canDel= await pharmaNscTacService.CanDelete(p.Id);
        if (!canDel)
            await NotificationService.Error("Can not delete Pharmas NSC TACS.");
        else
        {
            pharmaNscTacToDelete = $"Id - {p.Id} , Agreement - {p.AgreementNumber}, NSC - {p.Nsc}, Study - {p.ProtocolNumber}";
            pharmaNscTacToDeleteId = p.Id;
            await deleteModalRef.Show();
        }
    }

    private Task HideDeleteModal()
    {
        return deleteModalRef.Hide();
    }

    private async void DeleteClick()
    {
       
        int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
        Tuple<bool, string> delpharmaNscTac = await pharmaNscTacService.DeleteAsync(pharmaNscTacToDeleteId, userId);

        await deleteModalRef.Hide();
        if (delpharmaNscTac.Item1)
        {
            await NotificationService.Success($"Pharmas NSC TACS {pharmaNscTacToDelete} deleted successfully");
            pharmaNscTacList = (await pharmaNscTacService.GetAllAsync()).ToList();
            StateHasChanged();
        }
        else
        {
            await NotificationService.Error(delpharmaNscTac.Item2);
        }
    }
}
