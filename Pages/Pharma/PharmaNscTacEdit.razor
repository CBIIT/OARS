@using System.Diagnostics.CodeAnalysis
@using Microsoft.Extensions.Options
@using Newtonsoft.Json
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Models.ADDR;
@using TheradexPortal.Data.Services
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Services.Abstract.Pharma
@using TheradexPortal.Data.Static;
@using TheradexPortal.Data.Models.Configuration;
@using TheradexPortal.Data.Services.Abstract.ADDR;
@using Microsoft.AspNetCore.Mvc;
@using System.Collections.Generic;
@using System.Linq;
@using TheradexPortal.Data.Models.Pharma;
@using TheradexPortal.Data.Identity
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inherits LayoutComponentBase


@inject IHttpContextAccessor httpContextAccessor;
@inject IConfiguration configuration;
@inject IOptions<EmailSettings> emailSettings;
@inject IJSRuntime JS;

@inject IHttpContextAccessor httpContextAccessor
@inject IConfiguration configuration
@inject IHttpContextAccessor httpContextAccessor
@inject ProtectedSessionStorage SessionData
@inject IJSRuntime JSRuntime


@page "/pharma/pharmansctac/{id:int?}"
<LayoutContent>
    <Container Fluid>
        <Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1 mb-3"><h2>@AddOrEdit</h2></Div>
        <LoadingIndicator @ref=loading>
            <Div Padding="Padding.Is4" Margin="Margin.Is3.FromBottom">
                <Row Background="Background.Light">
                    <Column ColumnSize="ColumnSize.Is9">
                        <Row Padding="Padding.Is2">
                            <Column ColumnSize="ColumnSize.Is4">
                                <Text>Aggrement:</Text>
                            </Column>
                            <Column ColumnSize="ColumnSize.Is4">
                                <!-- Protocol Selection Dropdown -->
                                <Autocomplete TItem="string"
                                              TValue="string"
                                              Data="@allAggrements"
                                              TextField="@(( item ) => item)"
                                              ValueField="@(( item ) => item)"
                                              SelectedValue="@selectedAggrement"
                                              Validator="IsValidValue"
                                              SelectedValueChanged="@(async (v) => await OnChangeProtocol(v))"
                                              Placeholder="Select Aggrement..."
                                              Filter="AutocompleteFilter.StartsWith"
                                              FreeTyping
                                              HighlightSearch
                                              CustomFilter="@(( item, searchValue ) => item.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )">
                                    <NotFoundContent> Sorry... @context was not found! :( </NotFoundContent>
                                    <ItemContent>
                                        <Div Flex="Flex.InlineFlex.JustifyContent.Between" Width="Width.Is100">
                                            <Heading Margin="Margin.Is2.FromBottom">@context.Value</Heading>
                                        </Div>
                                    </ItemContent>

                                </Autocomplete>
                            </Column>
                        </Row>
                        <Row Padding="Padding.Is2">
                            <Column ColumnSize="ColumnSize.Is4">
                                <Text>NSC:</Text>
                            </Column>
                            <Column ColumnSize="ColumnSize.Is4">
                                @*                         <SelectList TItem="string"
                                    TValue="String"
                                    Data="@allNscs"
                                    TextField="@(( item ) => item)"
                                    ValueField="@(( item ) => item)"
                                    SelectedValue="@nsc"
                                    SelectedValueChanged="@OnChangeDrug"
                                    DefaultItemText="Select the Nsc"
                                    Disabled="@drugDisabled" /> *@
                                <!-- Protocol Selection Dropdown -->
                                <Autocomplete TItem="string"
                                              TValue="string"
                                              Data="@allNscs"
                                              TextField="@(( item ) => item)"
                                              ValueField="@(( item ) => item)"
                                              SelectedValue="@selectedAggrement"
                                              Validator="IsValidValue"
                                              SelectedValueChanged="@(async (v) => await OnChangeDrug(v))"
                                              Placeholder="Select Nsc..."
                                              Filter="AutocompleteFilter.StartsWith"
                                              FreeTyping
                                              HighlightSearch
                                              CustomFilter="@(( item, searchValue ) => item.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )">
                                    <NotFoundContent> Sorry... @context was not found! :( </NotFoundContent>
                                    <ItemContent>
                                        <Div Flex="Flex.InlineFlex.JustifyContent.Between" Width="Width.Is100">
                                            <Heading Margin="Margin.Is2.FromBottom">@context.Value</Heading>
                                        </Div>
                                    </ItemContent>
                                </Autocomplete>
                            </Column>
                        </Row>
                        <Row Padding="Padding.Is2">
                            <Column ColumnSize="ColumnSize.Is4">
                                <Text>Protocol:</Text>
                            </Column>
                            <Column ColumnSize="ColumnSize.Is4">
                                <!-- Protocol Selection Dropdown -->
                                <Autocomplete TItem="string"
                                              TValue="string"
                                              Data="@allProtocols"
                                              TextField="@(( item ) => item)"
                                              ValueField="@(( item ) => item)"
                                              SelectedValue="@selectedAggrement"
                                              Validator="IsValidValue"
                                              SelectedValueChanged="@(async (v) => await OnChangeProtocol(v))"
                                              Placeholder="Select Protocol..."
                                              Filter="AutocompleteFilter.StartsWith"
                                              FreeTyping
                                              HighlightSearch
                                              CustomFilter="@(( item, searchValue ) => item.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )">
                                    <NotFoundContent> Sorry... @context was not found! :( </NotFoundContent>
                                    <ItemContent>
                                        <Div Flex="Flex.InlineFlex.JustifyContent.Between" Width="Width.Is100">
                                            <Heading Margin="Margin.Is2.FromBottom">@context.Value</Heading>
                                        </Div>
                                    </ItemContent>
                                </Autocomplete>
                            </Column>
                        </Row>
                        <Row Padding="Padding.Is2">
                            <Column ColumnSize="ColumnSize.Is4">
                                <Text>Treatment Assignment Code:</Text>
                            </Column>
                            <Column ColumnSize="ColumnSize.Is4">
                                <!-- Protocol Selection Dropdown -->
                                <Autocomplete TItem="Data.Models.Pharma.ProtocolTac"
                                              TValue="string"
                                              Data="@allPharmaProtocolTacs"
                                              TextField="@(( item ) => item.TrtAsgnmtCode)"
                                              ValueField="@(( item ) => item.TrtAsgnmtCode)"
                                              SelectedValue="@selectedAggrement"
                                              Validator="IsValidValue"
                                              SelectedValueChanged="@(async (v) => await OnChangeProtocol(v))"
                                              Placeholder="Select Treatment Assignment Code..."
                                              Filter="AutocompleteFilter.StartsWith"
                                              FreeTyping
                                              HighlightSearch
                                              CustomFilter="@((item, searchValue) => item.TrtAsgnmtCode.IndexOf(searchValue, 0, StringComparison.CurrentCultureIgnoreCase) >= 0)">
                                    <NotFoundContent> Sorry... @context was not found! :( </NotFoundContent>
                                    <ItemContent>
                                        <Div Flex="Flex.InlineFlex.JustifyContent.Between" Width="Width.Is100">
                                            <Heading Margin="Margin.Is2.FromBottom">@context.Value</Heading>
                                        </Div>
                                        <Paragraph Margin="Margin.Is2.FromBottom"><Small>Study Id : @context.Item.StudyId</Small>|<Small>Treatment Code : @context.Item.TrtAsgnmtCode</Small>|<Small>Description : @context.Item.TrtAsgnmtDescription</Small></Paragraph>
                                    </ItemContent>
                                </Autocomplete>
                            </Column>
                        </Row>
                        @* <Row Padding="Padding.Is2">
                    <Column ColumnSize="ColumnSize.Is4">
                        <Text>Select Protocol2:</Text>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is4">
                        <SelectList TItem="Data.Models.Pharma.ProtocolTac"
                                    TValue="String"
                                    Data="@allPharmaProtocolTacs"
                                    TextField="@((protocol)=>protocol.StudyId)"
                                    ValueField="@((protocol)=>protocol.StudyId)"
                                    SelectedValue="@protocol"
                                    SelectedValueChanged="@OnChangeProtocol"
                                    DefaultItemText="Select the Protocol"
                                    Disabled="@protocolDisabled" />
                    </Column>
                </Row> *@

                    </Column>
                </Row>
            </Div>
            <Div Padding="Padding.Is2" Background="Background.Light">
            </Div>
            <Divider />
            <Field Flex="Flex.JustifyContent.Center">
                <Div>
                    <Button Color="Color.Light" Clicked="@Cancel">Cancel</Button>
                    <Button Color="Color.Primary" Type="ButtonType.Submit" PreventDefaultOnSubmit Clicked="@Save">Save</Button>
                </Div>
            </Field>
            @*     <Div Padding="Padding.Is2" Background="Background.Light">
        <Field>
            <FieldLabel ColumnSize="ColumnSize.Is12" TextWeight="TextWeight.Bold">Protocol Name</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is4" Margin="Margin.IsAuto">
                <SelectList TItem="Data.Models.Pharma.ProtocolTac"
                            TValue="String"
                            Data="@allPharmaProtocolTacs"
                            TextField="@((protocol)=>protocol.StudyId)"
                            ValueField="@((protocol)=>protocol.StudyId)"
                            SelectedValue="@protocol"
                            SelectedValueChanged="@OnChangeProtocol"
                            DefaultItemText="Select the Protocol"
                            Disabled="@protocolDisabled" />
            </FieldBody>
        </Field>
        <Field>
            <FieldLabel ColumnSize="ColumnSize.Is12" TextWeight="TextWeight.Bold">NSC</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is4" Margin="Margin.IsAuto">
                <SelectList TItem="DrugList"
                            TValue="String"
                            Data="@allPharmaDrugLists"
                            TextField="@((drug)=>drug.Nsc)"
                            ValueField="@((drug)=>drug.Nsc)"
                            SelectedValue="@protocol"
                            SelectedValueChanged="@OnChangeDrug"
                            DefaultItemText="Select the Drug"
                            Disabled="@drugDisabled" />
            </FieldBody>
        </Field>
    </Div>
 *@    
        </LoadingIndicator>
    </Container>
</LayoutContent>

@code {
    [Inject] IPharmaNscTacService pharmaNscTacService { get; set; } = null!;
    [Inject] IPharmaProtocolTacService protocolService { get; set; } = null!;
    [Inject] IPharmaDrugListService drugListService { get; set; } = null!;
    [Inject] IStudyService studyService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] INotificationService notificationService { get; set; }
    [Inject] IUserService userService { get; set; } = null!;
    [Inject] private IMessageService messageService { get; set; } = null!;

    IList<Role> primaryRoles;

    IList<DrugList> allPharmaDrugLists { get; set; }
    IList<Data.Models.Pharma.ProtocolTac> allPharmaProtocolTacs { get; set; }
    //IList<Protocol> allProtocols;

    IList<string> allAggrements = new List<string>();
    IList<string> allNscs = new List<string>();
    IList<string> allProtocols = new List<string>();

    IList<KeyValuePair<string, string>> allTacs = new List<KeyValuePair<string, string>>();


    [Parameter] public int? Id { get; set; }

    private LoadingIndicator loading;
    private int activeUserId;

    public string AddOrEdit { get; set; }
    Visibility visibilityDelete = Visibility.Invisible;
    Validations validations;

    IReadOnlyList<string> availableSelected { get; set; }

    string flexContainerStyle = $"width:30%;";
    string flexContainerStyle2 = $"width:30%;";
    string flexContainerStyle3 = $"width:10%;margin-top:150px;";

    string protocol = string.Empty;
    string nsc = string.Empty;

    bool protocolDisabled = false;
    bool drugDisabled = false;

    User loggedinUser;
    bool loggedinUserIsITAdmin = false;
    string selectedAggrement = "11-1-00002";
    string selectedNSC = "11-1-00002";
    string selectedProtocol = "11-1-00002";
    string selectedTreatmentAssignmentCode = "11-1-00002";

    protected override async Task OnInitializedAsync()
    {
        // Determine action (Create or Edit) and visibility
        if (Id == null)
        {
            AddOrEdit = "Create Pharma NSC TAC ";
            visibilityDelete = Visibility.Invisible;
        }
        else
        {
            AddOrEdit = $"Edit Pharma NSC TAC - {Id}";
            visibilityDelete = Visibility.Visible;
        }

        // Get the active user ID and logged-in user details
        activeUserId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
        loggedinUser = await userService.GetUserAsync(activeUserId);

        // Determine if the user is an IT Admin
        loggedinUserIsITAdmin = loggedinUser.UserRoles
            .Any(r => r.Role.IsPrimary && r.Role.AdminType == ThorAdminType.IT);

        // Fetch all necessary data in parallel to improve performance
        var drugListTask = drugListService.GetAllAsync();
        var protocolTask = protocolService.GetAllAsync();
        var pharmaNscTacTask = pharmaNscTacService.GetAllAsync();
        var protocolAsyncTask = studyService.GetAllProtocolsAsync();

        await Task.WhenAll(drugListTask, protocolTask, pharmaNscTacTask, protocolAsyncTask);

        // Extract results from tasks
        allPharmaDrugLists = drugListTask.Result.ToList();
        allPharmaProtocolTacs = protocolTask.Result.ToList();
        var allPharmaNscTacs = pharmaNscTacTask.Result.ToList();
        var allProtocolsData = protocolAsyncTask.Result;

        // Extract and transform data
        allNscs = allPharmaDrugLists.OrderBy(p => p.Nsc).Select(d => d.Nsc).Distinct().ToList();
        allTacs = allPharmaProtocolTacs.OrderBy(p => p.TrtAsgnmtCode).ThenBy(p => p.TrtAsgnmtDescription).Select(p => new KeyValuePair<string, string>(p.TrtAsgnmtCode, p.TrtAsgnmtDescription)).Distinct().ToList();
        allAggrements = allPharmaNscTacs.Where(p => string.IsNullOrEmpty(p.AgreementNumber) == false).Select(p => p.AgreementNumber).Order().Distinct().ToList();
        allProtocols = allProtocolsData.OrderBy(p => p.StudyId).Select(p => p.StudyId).Distinct().ToList();

        // Save activity log
        userService.SaveActivityLog(activeUserId, ThorActivityType.Navigation, "PharmaNscTac", AddOrEdit);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await loading.Show();
            if (Id != null)
            {
                await notificationService.Info("Loading data...");
                GetPharmaNscTac(Id);
            }
            StateHasChanged();
            await loading.Hide();
        }
        return;

    }
    private async void GetPharmaNscTac(int? id)
    {
        if (id == null)
        {
            return;
        }

        PharmaNscTac pharmaNscTac = await pharmaNscTacService.GetByIdAsync(id.Value);

        if (pharmaNscTac == null)
        {
            await notificationService.Error("Pharma Nsc Tac not found.");
            navigation.NavigateTo("/admin/pharmansctacs");
            return;
        }


    }
    public async Task<CancellableRowChange<PharmaNscTac>> ConfirmDelete(CancellableRowChange<PharmaNscTac> item)
    {
        if (!await messageService.Confirm("Are you sure you want to delete this?", "Confirmation"))
        {
            item.Cancel = true;
        }

        return item;
    }
    private async Task<Boolean> Delete(PharmaNscTac deleteRow)
    {
        Tuple<bool, string> deleted = pharmaNscTacService.DeleteAsync(deleteRow.Id, activeUserId);

        if (deleted.Item1)
        {
            await notificationService.Success("Successfully deleted!");

            return true;
        }
        else
        {
            await notificationService.Error("Error Deleting");
            return false;
        }
    }
    private async void Save()
    {
        bool saved = false;
        if (await validations.ValidateAll())
        {
            // Check for existing group name
            // if (!pharmaNscTacService.CheckGroupName(groupName, (int)(GroupId != null ? GroupId : 0)))
            // {
            //     await NotificationService.Error("Group Name already exists.");
            //     return;
            // }
            DateTime saveDateTime = DateTime.UtcNow;
        }
    }

    private async void Cancel()
    {
        string navTo = "/";
        var result = await SessionData.GetAsync<string>("dashboardUrl");
        if (result.Success)
        {
            navTo = result.Value ?? "/";
        }
        navigation.NavigateTo(navTo, true);
    }

    private Task OnChangeProtocol(string value)
    {
        protocol = value;
        return Task.CompletedTask;
    }
    private Task OnChangeDrug(string value)
    {
        nsc = value;
        return Task.CompletedTask;
    }
    void IsValidValue(ValidatorEventArgs e)
    {
        Console.WriteLine(e.Value);

        e.Status = !string.IsNullOrEmpty(e.Value?.ToString()) && allAggrements.Any(x => x == e.Value.ToString())
            ? ValidationStatus.Success
            : ValidationStatus.Error;

        if (e.Status == ValidationStatus.Error)
        {
            e.ErrorText = "ERROR";
        }
        else
        {
            e.ErrorText = "OK";
        }
    }
}
