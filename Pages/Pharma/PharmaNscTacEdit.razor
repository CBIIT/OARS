@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@inject IHttpContextAccessor httpContextAccessor
@layout AdminLayout

@page "/pharma/pharmansctac/{id:int?}"
<LoadingIndicator @ref=loading>
    <Div Background="Background.Primary" TextColor="TextColor.Light" Class="p-1 mb-3"><h2>@AddOrEdit</h2></Div>
    <Div Padding="Padding.Is2" Background="Background.Light">
        <Field>
            <FieldLabel ColumnSize="ColumnSize.Is10" TextWeight="TextWeight.Bold">Study</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is6">
                <Validations @ref="validations" Mode="ValidationMode.Manual">
                    <Validation Validator="@ValidationRule.IsNotEmpty">
                        <TextEdit Placeholder="Study Name" MaxLength="500">
                            <Feedback>
                                <ValidationError>Please enter a Study Name</ValidationError>
                            </Feedback>
                        </TextEdit>
                    </Validation>
                </Validations>
            </FieldBody>
        </Field>
    </Div>
    <Divider />
    <Field Flex="Flex.JustifyContent.Center">
        <Div>
            <Button Color="Color.Light" Clicked="@Cancel">Cancel</Button>
            <Button Color="Color.Primary" Type="ButtonType.Submit" PreventDefaultOnSubmit Clicked="@Save">Save</Button>
        </Div>
    </Field>
</LoadingIndicator>

@code {
    [Inject] IPharmaNscTacService pharmaNscTacService { get; set; } = null!;
    [Inject] IStudyService studyService { get; set; } = null!;
    [Inject] private NavigationManager navigation { get; set; } = null!;
    [Inject] INotificationService notificationService { get; set; }
    [Inject] IUserService userService { get; set; } = null!;
    [Inject] private IMessageService messageService { get; set; } = null!;

    [Parameter] public int? Id { get; set; }

    private LoadingIndicator loading;
    private int activeUserId;

    public string AddOrEdit { get; set; }
    Visibility visibilityDelete = Visibility.Invisible;
    Validations validations;

    IReadOnlyList<string> availableSelected { get; set; }

    string flexContainerStyle = $"width:30%;";
    string flexContainerStyle2 = $"width:30%;";
    string flexContainerStyle3 = $"width:10%;margin-top:150px;";

    protected override async Task OnInitializedAsync()
    {
        if (Id == null)
        {
            AddOrEdit = "Create Pharma Nsc Tac ";
            visibilityDelete = Visibility.Invisible;
        }
        else
        {
            AddOrEdit = "Edit Pharma Nsc Tac ";
            visibilityDelete = Visibility.Visible;
            AddOrEdit = "Edit Pharma Nsc Tac - " + Id;
        }

        activeUserId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);
        userService.SaveActivityLog(activeUserId, ThorActivityType.Navigation, "PharmaNscTac", AddOrEdit);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await loading.Show();
            if (Id != null)
            {
                await notificationService.Info("Loading data...");
                //TODO: GetPharmaNscTac(Id);
            }
            StateHasChanged();
            await loading.Hide();
        }
        return;

    }
    private async void GetPharmaNscTac(int? id)
    {
    }
    public async Task<CancellableRowChange<PharmaNscTac>> ConfirmDelete(CancellableRowChange<PharmaNscTac> item)
    {
        if (!await messageService.Confirm("Are you sure you want to delete this?", "Confirmation"))
        {
            item.Cancel = true;
        }

        return item;
    }
    private async Task<Boolean> DeleteRow(PharmaNscTac deleteRow)
    {
        Tuple<bool, string> deleted = pharmaNscTacService.DeleteAsync(deleteRow.Id, activeUserId);

        if (deleted.Item1)
        {
            await notificationService.Success("Successfully deleted!");

            return true;
        }
        else
        {
            await notificationService.Error("Error Deleting");
            return false;
        }
    }
    private async void Save()
    {
        bool saved = false;
        if (await validations.ValidateAll())
        {
            // Check for existing group name
            // if (!pharmaNscTacService.CheckGroupName(groupName, (int)(GroupId != null ? GroupId : 0)))
            // {
            //     await NotificationService.Error("Group Name already exists.");
            //     return;
            // }
            DateTime saveDateTime = DateTime.UtcNow;
        }
    }

    private void Cancel()
    {
        navigation.NavigateTo("/admin/pharmansctacs");
    }

}
