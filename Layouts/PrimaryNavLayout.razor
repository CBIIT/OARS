@using Amazon;
@using Amazon.Auth;
@using Amazon.SimpleEmail;
@using Amazon.SimpleEmail.Model;
@using Amazon.S3;
@using Amazon.S3.Transfer;
@using System.Text.RegularExpressions;
@using System.Web;
@using TheradexPortal.Data.Identity;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@inject IHttpContextAccessor httpContextAccessor
@inherits LayoutComponentBase
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services;
@using TheradexPortal.Data;
@inject IConfiguration configuration
@layout AuthLayout

<Div Class="nci-main-wrapper">
    <Layout Class="nci-main-layout">
        <LayoutHeader>
            <Bar Breakpoint="Breakpoint.Desktop" NavigationBreakpoint="Breakpoint.Desktop" Style="@GetHeaderColor()" Class="nci-navbar px-4">
                <BarBrand>
                    <Image Source="img/theradex-logo.png" AlternateText="Theradex Oncology" />
                </BarBrand>
                <BarToggler />
                <BarMenu>
                    <BarStart Display="Display.None.OnDesktop">
                        <PrimaryNav />
                    </BarStart>
                    <BarEnd>
                        <BarItem>
                            <EnvironmentLbl />
                        </BarItem>
                        <BarItem>
                            <Tooltip Text="@systemAlertsTooltip">
                                <BarDropdown RightAligned @ref="@alertBarDropDown" Visible="@systemAlertsDropdownVisible">
                                    <BarDropdownToggle Class="nci-bar-dropdown">
                                        <Badge Class="nci-alert-badge" Pill Position="Position.Absolute.Top.Is50.Start.Is100.Translate.Middle">@systemAlertsCount</Badge>
                                        <Image Source="img/alert-icon.png" height="@iconHeight" Class="nci-alert-icon" />
                                    </BarDropdownToggle>
                                    <BarDropdownMenu Class="nci-alert-dropdown">
                                        <AlertBar @ref="@systemAlerts" Alert System NoAlertsMessage Dismissable AlertsCountChanged=SystemAlertsCountChanged CSS="nci-alert-component" />
                                    </BarDropdownMenu>
                                </BarDropdown>
                            </Tooltip>
                        </BarItem>
                        <BarItem>
                            <Tooltip Text="@systemNotesTooltip">
                                <BarDropdown RightAligned @ref="@noteBarDropDown">
                                    <BarDropdownToggle Class="nci-bar-dropdown">
                                        <Badge Class="nci-note-badge" Pill Position="Position.Absolute.Top.Is50.Start.Is100.Translate.Middle">@systemNotesCount</Badge>
                                        <Image Source="img/notification-icon.png" height="@iconHeight" Class="nci-alert-icon" />
                                    </BarDropdownToggle>
                                    <BarDropdownMenu Class="nci-alert-dropdown">
                                        <AlertBar @ref="@systemNotes" Note System NoAlertsMessage Dismissable AlertsCountChanged=SystemNotesCountChanged CSS="nci-alert-component" />
                                    </BarDropdownMenu>
                                </BarDropdown>
                            </Tooltip>
                        </BarItem>
                        <BarItem>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                        </BarItem>
                        <BarItem>
                            <Tooltip Text="Contact Us">
                                <Button Flex="Flex.JustifyContent.Center" Type="ButtonType.Button" Clicked="@ShowContactUsModal">
                                    <Image Source="img/contact.png" height="@iconHeight" />
                                </Button>
                            </Tooltip>
                        </BarItem>
                        <BarItem>
                            <Tooltip Text="Administration">
                                <Button Flex="Flex.JustifyContent.Center" Display="@adminDisplay" Type="ButtonType.Link" To="admin">
                                    <Image Source="img/admin.png" height="@iconHeight" />
                                </Button>
                            </Tooltip>
                        </BarItem>
                        <BarItem>
                            <Tooltip Text="Logout">
                                <Button Flex="Flex.JustifyContent.Center" Block Clicked="@OnButtonClicked">
                                    <Image Source="img/logout.png" height="@iconHeight" />
                                </Button>
                            </Tooltip>
                        </BarItem>
                    </BarEnd>
                </BarMenu>
            </Bar>
            <Bar Breakpoint="Breakpoint.Desktop" Display="Display.None.Block.OnDesktop" Background="Background.White" Class="px-4 nci-dashboard-navbar">
                <BarStart>
                    <PrimaryNav @ref="@primaryNav" RenderButtons SelectedDashboardPrimaryNavChanged=DashboardChanged />
                </BarStart>
            </Bar>
            <AlertBar @ref="@dashboardAlerts" Alert Dashboard SelectedDashboard="selectedDashboard" Dismissable CSS="nci-alert-component" />
            <Divider Class="mt-1 mb-0"/>
        </LayoutHeader>
        <LayoutContent>
            <CascadingValue Value="this">
                <LoadingIndicator>
                    @Body
                </LoadingIndicator>
            </CascadingValue>
        </LayoutContent>
        <LayoutFooter>
            <Footer />
        </LayoutFooter>
    </Layout>
</Div>

 <Modal @ref="modalContactUs">
     <ModalContent Centered Size="ModalSize.Large" >
         <ModalHeader Background="Background.Primary" TextColor="TextColor.Light">
            <ModalTitle>Contact Us</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="validations" Mode="ValidationMode.Manual">
                <Validation Validator="@ValidationRule.IsNotEmpty">
                    <Field>
                         <FieldLabel ColumnSize="ColumnSize.Is4" TextWeight="TextWeight.Bold">Subject</FieldLabel>
                        <TextEdit Placeholder="Enter subject"  @bind-Text="@emailTitle" />
                    </Field>
                </Validation>
                 <Validation Validator="@ValidationRule.IsNotEmpty">
                 <Field>
                     <FieldLabel ColumnSize="ColumnSize.Is4" TextWeight="TextWeight.Bold">Categories</FieldLabel>
                     <FieldBody ColumnSize="ColumnSize.Is4" Margin="Margin.IsAuto">
                             <Select TValue="string" @bind-SelectedValue="@contactUsCategoryID">
                                   @{
                                    foreach (var cuTopItem in lstContactUsItems)
                                       {
                                           if (cuTopItem.IsGroupLevel)
                                           {
                                                <SelectGroup Label="@cuTopItem.Name" Class="categorySelectGroup">
                                                @foreach (var cuItem in cuTopItem.SecondLevel)
                                                {
                                                    <SelectItem Value="@cuItem.CategoryID">@cuItem.Name</SelectItem>
                                                }
                                                </SelectGroup>
                                           }
                                           else
                                           {
                                            <SelectItem Value="@cuTopItem.CategoryID">@cuTopItem.Name</SelectItem>
                                           }
                                       }
                                   }
                             </Select>
                     </FieldBody>
                 </Field>
                 </Validation>
                <Validation Validator="@ValidationRule.IsNotEmpty">
                <Field>
                    <FieldLabel ColumnSize="ColumnSize.Is4" TextWeight="TextWeight.Bold">Description</FieldLabel>
                    <FieldBody>
                             <MemoEdit @bind-Text="@emailDescription" MaxLength="250" Rows="3" Placeholder="Enter description" />
                    </FieldBody>
                </Field>
                </Validation>
                <Field>                    
                    <FieldLabel ColumnSize="ColumnSize.Is4" TextWeight="TextWeight.Bold">Attach File</FieldLabel>
                    <FileEdit @ref="@fileEditRef" AutoReset="false" Changed="@OnChanged" />
                </Field>           
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@HideContactUsModal">Cancel</Button>
            <Button Color="Color.Primary" Clicked="@SendContactUsEmail">Send Request</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private PrimaryNav? primaryNav;
    private AlertBar? systemAlerts;
    private AlertBar? systemNotes;
    private AlertBar? dashboardAlerts;
    private Dashboard? selectedDashboard { get; set; } = null!;
    private BarDropdown? alertBarDropDown;
    private BarDropdown? noteBarDropDown;
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject] private IUserService userService { get; set; } = null!;
    [Inject] private IAlertService alertService { get; set; } = null!;
    [Inject] INotificationService notificationService { get; set; }
    [Inject] IContactUsService contactUsCategoryService { get; set; } = null!;
    [Inject] IEmailService emailService { get; set; } = null!;


    Validations validations;
    private int iconHeight = 30;
    private int systemAlertsCount;
    private int systemNotesCount; 
    private bool systemAlertsDropdownVisible;
    private string systemAlertsTooltip = string.Empty;
    private string systemNotesTooltip = string.Empty;
    private readonly string noSystemAlertsMessage = "No current System Alerts";
    private readonly string noSystemNotesMessage = "No current System Notes";
    private readonly string currentSystemAlertsMessage = "System Alerts: ";
    private readonly string currentSystemNotesMessage = "System Notes: ";

    IFluentDisplay adminDisplay = Display.None;

    private string contactUsCategoryID ="", emailTo = "", emailCategory="", emailDescription = "", emailTitle = "";
    private List<ContactUsCategory> lstContactUsCategory;
    private List<ContactUsCategorySelectItemList> lstContactUsItems;
    FileEdit fileEditRef;
    string uploadFileName = "";
    List<string> lstAttachments = new List<string>();
    IFileEntry selectedFile;

    async Task OnChanged(FileChangedEventArgs e)
    {
        try
        {
            selectedFile = e.Files.FirstOrDefault();           
        }
        catch (Exception exc)
        {
            string errorMessage = exc.Message;
        }
        finally
        {
            this.StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Display or Hide Admin button
        bool isAdmin = Convert.ToBoolean(httpContextAccessor.HttpContext.User.FindFirst(WRClaimType.IsAdmin).Value);
        if (isAdmin)
            adminDisplay = Display.Block;
        else
            adminDisplay = Display.None;

        lstContactUsCategory = contactUsCategoryService.GetContactUsCategories();
        lstContactUsItems = contactUsCategoryService.GetContactUsCategoriesSelectItems();
        await base.OnInitializedAsync();
    }

    private string GetHeaderColor()
    {
        string color = configuration.GetValue<string>("System:SystemColor");
        return "background-color:" + color  + ";";    
    }

    Task OnButtonClicked()
    {
        int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(WRClaimType.UserId).Value);
        userService.SaveActivityLog(userId, WRActivityType.Logout);
        Navigation.NavigateTo($"Signout", true);

        return Task.CompletedTask;
    }

    public async Task UpdateDashboard(Dashboard dashboard)
    {
        this.dashboardAlerts?.UpdateDashboard(dashboard);
    }

    protected async Task DashboardChanged()
    {
        // this.selectedDashboard = this.primaryNav!.SelectedDashboardPrimaryNav;
        // this.dashboardAlerts?.UpdateDashboard(this.selectedDashboard);
    }

    protected async Task SystemAlertsCountChanged(int count)
    {
        this.systemAlertsCount = count;

        if (this.systemAlertsCount < 1)
        {
            await this.alertBarDropDown!.Hide();
            systemAlertsDropdownVisible = false;
            this.systemAlertsTooltip = this.noSystemAlertsMessage;
        }
        else
        {
            await this.alertBarDropDown!.Show();
            systemAlertsDropdownVisible = true;
            this.systemAlertsTooltip = this.currentSystemAlertsMessage + this.systemAlertsCount;
        }
    }

    protected async Task SystemNotesCountChanged(int count)
    {
        this.systemNotesCount = count;

        if (this.systemNotesCount < 1)
        {
            await this.noteBarDropDown!.Hide();
            this.systemNotesTooltip = this.noSystemNotesMessage;
        }
        else
        {
            this.systemNotesTooltip = this.currentSystemNotesMessage + this.systemNotesCount;
        }
    }


    private Modal modalContactUs;

    private Task ShowContactUsModal()
    {
        emailTitle = string.Empty;
        emailDescription = string.Empty;
        lstAttachments = new List<string>();
        uploadFileName = string.Empty;
        selectedFile = null;
        fileEditRef.Reset().AsTask();
        if( lstContactUsItems.Count >0)
        {
            if (lstContactUsItems[0].IsGroupLevel && lstContactUsItems[0].SecondLevel!= null && lstContactUsItems[0].SecondLevel.Count > 0)
            {
                contactUsCategoryID = lstContactUsItems[0].SecondLevel[0].CategoryID.ToString();
            }
        }
        validations.ClearAll();
        return modalContactUs.Show();
    }

    private Task HideContactUsModal()
    {
        return modalContactUs.Hide();
    }

     private async void SendContactUsEmail()
 {
     if (await validations.ValidateAll())
     {
         emailTo = string.Empty;
         emailCategory = string.Empty;
         string siteName = "NCI Oncology Data Hub-" + configuration.GetValue<string>("System:Environment");
         string baseURL = Navigation.BaseUri;
         string color = configuration.GetValue<string>("System:SystemColor");
         string dateTime = DateTime.Now.ToString("d-MMM-yyyy hh:mm tt");
         int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(WRClaimType.UserId).Value);
         User curUser = await userService.GetUserAsync(userId);
         string userName = curUser.FirstName + " " + curUser.LastName;

         ContactUsCategory category = lstContactUsCategory.Where(l => l.WRContactUsCategoryID == Convert.ToInt32(contactUsCategoryID)).FirstOrDefault();
         if(category != null)
         {
             if(category.ParentCategoryId != null)
             {
                 ContactUsCategory parentCategory = lstContactUsCategory.Where(l => l.WRContactUsCategoryID == Convert.ToInt32(category.ParentCategoryId)).FirstOrDefault();
                 if(parentCategory != null)
                 {
                     emailCategory = parentCategory.Name + "-";
                 }
             }
             emailCategory += category.Name;
             emailTo = category.EmailTo;
         }

         if (selectedFile != null)
         {
             try
             {
                 var fileNameWithoutExtension = Path.GetFileNameWithoutExtension(selectedFile.Name);
                 var fileExtension = Path.GetExtension(selectedFile.Name);
                 uploadFileName = fileNameWithoutExtension + "_" + Guid.NewGuid() + fileExtension;
                 lstAttachments.Add(uploadFileName);
                 using (var stream = new MemoryStream())
                 {
                     await selectedFile.WriteToStreamAsync(stream);
                     await emailService.UploadFileToS3(uploadFileName, stream);
                 }
             }
             catch (Exception exc)
             {
                 string errorMessage = exc.Message;
             }
         }
         ContactUs contactUsLog = new ContactUs();
         contactUsLog.WRContactUsID = 0;
         contactUsLog.Subject = emailTitle;
         contactUsLog.Description = "Category: " + emailCategory + " Description: " + emailDescription; ;
         contactUsLog.CategoryID = Convert.ToInt32(contactUsCategoryID);
         contactUsLog.UserID = userId;
         contactUsLog.AttachmentName = uploadFileName;
         
         contactUsCategoryService.SaveContactUs(contactUsLog);

         bool sendEmailResult = await emailService.SendContactUsEmail(siteName, baseURL, color, emailTo, emailTitle, emailCategory, emailDescription, userName, dateTime, lstAttachments);
         
         if ( sendEmailResult)
         {
             await notificationService.Success("An email to support has been sent.");         
         }
         else
         {
             await notificationService.Error("An error occured during sending the email to support.");
         }
         modalContactUs.Hide();
     }
 }

}