@using TheradexPortal.Data.Identity;
@inherits LayoutComponentBase
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services;
@using TheradexPortal.Data;
@using TheradexPortal.Data.Services.Abstract;
@layout AuthLayout

<Div Class="nci-main-wrapper">
    <Layout Class="nci-main-layout">
        <LayoutHeader>
            <Bar Breakpoint="Breakpoint.Desktop" NavigationBreakpoint="Breakpoint.Desktop" Background="Background.Light" Class="nci-navbar px-4">
                <BarBrand>
                    <Image Source="img/theradex-logo.png" AlternateText="Theradex Oncology" />
                </BarBrand>
                <BarToggler />
                <BarMenu>
                    <BarStart Display="Display.None.OnDesktop">
                        <PrimaryNav />
                    </BarStart>
                    <BarEnd>
                        <BarItem>
                            <BarDropdown RightAligned Visible>
                                <BarDropdownToggle>
                                    <Image Source="img/alert-icon.png" height="@iconHeight" />
                                    Alerts
                                </BarDropdownToggle>
                                <BarDropdownMenu>
                                    <AlertBar Alert System NoAlertsMessage Dismissable />
                                </BarDropdownMenu>
                            </BarDropdown>
                        </BarItem>
                        <BarItem>
                            <BarDropdown RightAligned>
                                <BarDropdownToggle>
                                    <Image Source="img/notification-icon.png" height="@iconHeight" />
                                    Notes
                                </BarDropdownToggle>
                                <BarDropdownMenu>
                                    <AlertBar Note System NoAlertsMessage Dismissable />
                                </BarDropdownMenu>
                            </BarDropdown>
                        </BarItem>
                        <BarItem>
                            <BarLink To="#Profile">
                                <Icon Name="IconName.UserCircle" IconSize="IconSize.Large" />
                            </BarLink>
                        </BarItem>
                        <BarItem>
                            <Button Flex="Flex.JustifyContent.Center" Block Color="Color.Secondary" Clicked="@OnButtonClicked">
                                <Image Source="img/logout-icon.png" height="@iconHeight" />
                            </Button>
                        </BarItem>
                    </BarEnd>
                </BarMenu>
            </Bar>
            <Bar Breakpoint="Breakpoint.Desktop" Display="Display.None.Block.OnDesktop" Background="Background.White" Class="px-4 nci-dashboard-navbar">
                <BarStart>
                    <PrimaryNav @ref="@primaryNav" RenderButtons SelectedDashboardPrimaryNavChanged=DashboardChanged />
                </BarStart>
            </Bar>
            <Bar Breakpoint="Breakpoint.Desktop" Display="Display.None.Block.OnDesktop" Background="Background.White">
                <BarStart>
                    <BarItem>
                        <AlertBar @ref="@dashboardAlertsBar" Alert Dashboard SelectedDashboard="selectedDashboard" Dismissable />
                    </BarItem>
                </BarStart>
                <BarToggler />
            </Bar>
            <Divider Class="mt-1 mb-0"/>
        </LayoutHeader>
        <LayoutContent>
            <LoadingIndicator>
                @Body
            </LoadingIndicator>
        </LayoutContent>
        <LayoutFooter>
            <Footer />
        </LayoutFooter>
    </Layout>
</Div>

@code {
    private PrimaryNav? primaryNav;
    private AlertBar? dashboardAlertsBar;
    private Dashboard? selectedDashboard { get; set; } = null!;
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject] private IAlertService alertService { get; set; } = null!;
    private int iconHeight = 24;
    private IList<WRAlert> activeAlerts = new List<WRAlert>();
    private IList<WRAlert> activeNotes = new List<WRAlert>();

    protected override async Task OnInitializedAsync()
    {
        this.activeAlerts = await this.alertService.GetActiveLoginAlertsAsync();
        this.activeNotes = await this.alertService.GetActiveLoginNotesAsync();
        await base.OnInitializedAsync();
    }

    Task OnButtonClicked()
    {
        Navigation.NavigateTo($"Signout", true);

        return Task.CompletedTask;
    }

    protected async Task DashboardChanged()
    {
        this.selectedDashboard = this.primaryNav!.SelectedDashboardPrimaryNav;
        this.dashboardAlertsBar?.UpdateDashboard(this.selectedDashboard);
    }
}