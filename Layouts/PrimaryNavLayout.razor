@using TheradexPortal.Data.Identity;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@inject IHttpContextAccessor httpContextAccessor

@inherits LayoutComponentBase
@using TheradexPortal.Data.Models;
@using TheradexPortal.Data.Services;
@using TheradexPortal.Data;
@using TheradexPortal.Data.Services.Abstract;
@layout AuthLayout

<Div Class="nci-main-wrapper">
    <Layout Class="nci-main-layout">
        <LayoutHeader>
            <Bar Breakpoint="Breakpoint.Desktop" NavigationBreakpoint="Breakpoint.Desktop" Background="Background.Light" Class="nci-navbar px-4">
                <BarBrand>
                    <Image Source="img/theradex-logo.png" AlternateText="Theradex Oncology" />
                </BarBrand>
                <BarToggler />
                <BarMenu>
                    <BarStart Display="Display.None.OnDesktop">
                        <PrimaryNav />
                    </BarStart>
                    <BarEnd>
                        <BarItem>
                            <EnvironmentLbl/>
                        </BarItem>
                        <BarItem>
                            <Tooltip Text="Alerts">
                                <BarDropdown RightAligned >
                                    <BarDropdownToggle Class="nci-bar-dropdown">
                                        <Badge Class="nci-alert-badge" Pill Position="Position.Absolute.Top.Is50.Start.Is100.Translate.Middle">@systemAlertsCount</Badge>
                                        <Image Source="img/alert-icon.png" height="@iconHeight" Class="nci-alert-icon" />
                                    </BarDropdownToggle>
                                    <BarDropdownMenu Class="nci-alert-dropdown">
                                        <AlertBar @ref="@systemAlerts" Alert System NoAlertsMessage Dismissable AlertsCountChanged=SystemAlertsCountChanged CSS="nci-alert-component" />
                                    </BarDropdownMenu>
                                </BarDropdown>
                            </Tooltip>
                        </BarItem>
                        <BarItem>
                            <Tooltip Text="Notes">
                                <BarDropdown RightAligned>
                                    <BarDropdownToggle Class="nci-bar-dropdown">
                                        <Badge Class="nci-note-badge" Pill Position="Position.Absolute.Top.Is50.Start.Is100.Translate.Middle">@systemNotesCount</Badge>
                                        <Image Source="img/notification-icon.png" height="@iconHeight" Class="nci-alert-icon" />
                                    </BarDropdownToggle>
                                    <BarDropdownMenu Class="nci-alert-dropdown">
                                        <AlertBar @ref="@systemNotes" Note System NoAlertsMessage Dismissable AlertsCountChanged=SystemNotesCountChanged CSS="nci-alert-component" />
                                    </BarDropdownMenu>
                                </BarDropdown>
                            </Tooltip>
                        </BarItem>
                        <BarItem>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                        </BarItem>
                        <BarItem>
                            <Tooltip Text="Contact Us">
                                <Button Flex="Flex.JustifyContent.Center" Type="ButtonType.Link" To="#">
                                    <Image Source="img/contact.png" height="@iconHeight" />
                                </Button>
                            </Tooltip>
                        </BarItem>
                        <BarItem>
                            <Tooltip Text="Administration">
                                <Button Flex="Flex.JustifyContent.Center" Display="@adminDisplay" Type="ButtonType.Link" To="admin">
                                    <Image Source="img/gear.jpg" height="@iconHeight" />
                                </Button>
                            </Tooltip>
                        </BarItem>
                        <BarItem>
                            <Tooltip Text="Logout">
                                <Button Flex="Flex.JustifyContent.Center" Block Clicked="@OnButtonClicked">
                                    <Image Source="img/logout.png" height="@iconHeight" />
                                </Button>
                            </Tooltip>
                        </BarItem>
                    </BarEnd>
                </BarMenu>
            </Bar>
            <Bar Breakpoint="Breakpoint.Desktop" Display="Display.None.Block.OnDesktop" Background="Background.White" Class="px-4 nci-dashboard-navbar">
                <BarStart>
                    <PrimaryNav @ref="@primaryNav" RenderButtons SelectedDashboardPrimaryNavChanged=DashboardChanged />
                </BarStart>
            </Bar>
            <AlertBar @ref="@dashboardAlerts" Alert Dashboard SelectedDashboard="selectedDashboard" Dismissable CSS="nci-alert-component" />
            <Divider Class="mt-1 mb-0"/>
        </LayoutHeader>
        <LayoutContent>
            <LoadingIndicator>
                @Body
            </LoadingIndicator>
        </LayoutContent>
        <LayoutFooter>
            <Footer />
        </LayoutFooter>
    </Layout>
</Div>

@code {
    private PrimaryNav? primaryNav;
    private AlertBar? systemAlerts;
    private AlertBar? systemNotes;
    private AlertBar? dashboardAlerts;
    private Dashboard? selectedDashboard { get; set; } = null!;
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject] private IUserService userService { get; set; } = null!;
    [Inject] private IAlertService alertService { get; set; } = null!;
    private int iconHeight = 24;
    private int systemAlertsCount;
    private int systemNotesCount;
    IFluentDisplay adminDisplay = Display.None;


    protected override async Task OnInitializedAsync()
    {
        // Display or Hide Admin button
        bool isAdmin = Convert.ToBoolean(httpContextAccessor.HttpContext.User.FindFirst(WRClaimType.IsAdmin).Value);
        if (isAdmin)
            adminDisplay = Display.Block;
        else
            adminDisplay = Display.None;

        await base.OnInitializedAsync();
    }

    Task OnButtonClicked()
    {
        int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(WRClaimType.UserId).Value);
        userService.SaveActivityLog(userId, WRActivityType.Logout);
        Navigation.NavigateTo($"Signout", true);

        return Task.CompletedTask;
    }

    protected async Task DashboardChanged()
    {
        this.selectedDashboard = this.primaryNav!.SelectedDashboardPrimaryNav;
        this.dashboardAlerts?.UpdateDashboard(this.selectedDashboard);
    }

    protected async Task SystemAlertsCountChanged(int count)
    {
        this.systemAlertsCount = count;
    }

    protected async Task SystemNotesCountChanged(int count)
    {
        this.systemNotesCount = count;
    }
}