@using TheradexPortal.Data.Identity;
@using Microsoft.JSInterop;
@using TheradexPortal.Data.Static;
@using TheradexPortal.Data.Services.Abstract;
@inherits LayoutComponentBase
@inject IConfiguration configuration
@inject IHttpContextAccessor httpContextAccessor

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <AuthorizeView Policy="IsRegistered">
                <Authorized Context="RegisteredAuth">
                     @Body
                </Authorized>
                <NotAuthorized Context="RegisteredAuth">
                    <LayoutView Layout="@typeof(LoginLayout)">
                    <Div Flex="Flex.JustifyContent.Center.AlignItems.Center" Height="Height.Is75">
                        <Card Margin="Margin.Is5.FromBottom.Is5.FromTop" Width="Width.Is50" Class="text-center">
                            <CardBody Margin="Margin.Is5">
                                <CardImage Source="img/theradex-logo.png" Alt="Card image cap 3" Width="Width.Is50"></CardImage>
                                <CardTitle Margin="Margin.Is4.FromBottom" Size="3">
                                    Unable to complete login process
                                </CardTitle>
                                <CardText>
                                    <p>We apoligize, but you do not have access to the NCI Theradex Oncology Reporting system at this time.<BR>
                                        If you need assistance, please contact us at <a href="mailto:@supportEmail">@supportEmail</a>.</p>
                                </CardText>
                                <Button Color="Color.Primary" Margin="Margin.Is5.FromTop" Clicked="@OnHomeClicked">
                                    Home
                                </Button>
                            </CardBody>
                        </Card>
                    </Div>
                </LayoutView>
                </NotAuthorized>
            </AuthorizeView>
        </Authorized>
        <NotAuthorized>
            <RedirectToLogin />
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject] IJSRuntime jsRuntime { get; set; }
    [Inject] private IUserService userService { get; set; } = null!;
    private string supportEmail = "";
    private static Func<Task> TimeoutUserAsync;

    protected override async Task OnInitializedAsync()
    { 
        supportEmail = configuration.GetValue<string>("EmailSettings:SupportEmail");
        TimeoutUserAsync = LocalTimeoutUserAsync;
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("initializeInactivityTimer");
        }
    }

    Task OnHomeClicked()
    {
        Navigation.NavigateTo($"Signout", true);

        return Task.CompletedTask;
    }

    private async Task LocalTimeoutUserAsync()
    {
        if (httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId) != null)
        {
            int userId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId).Value);

            // Check last activity
            bool canTimeout = userService.CheckActivityLogForTimeout(userId, Convert.ToInt32(configuration.GetValue<string>("System:TimeoutMS")));

            if (canTimeout)
            {
                userService.SaveActivityLog(userId, ThorActivityType.Logout, "Timeout");
                Navigation.NavigateTo($"Timeout", true);
            }
            else
            {
                userService.SaveActivityLog(userId, ThorActivityType.Navigation, "Timeout-Check");
                await jsRuntime.InvokeVoidAsync("initializeInactivityTimer");
            }
        }
    }

    [JSInvokable]
    public static async Task Timeout()
    {
        if (TimeoutUserAsync != null)
            await TimeoutUserAsync.Invoke();
    }
}
