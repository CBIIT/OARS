@using TheradexPortal.Data.Identity;
@using TheradexPortal.Data.Services.Abstract;
@using TheradexPortal.Data.Static;
@using System.Security.Claims;
@inject IHttpContextAccessor httpContextAccessor
@inject IConfiguration configuration

@inherits LayoutComponentBase
@layout AuthLayout

<AuthorizeView Policy="IsAdmin">
    <Authorized>
        <Div Class="nci-main-wrapper" Background="Background.Light">
        <Layout Class="nci-main-layout" Background="Background.Light">
            <LayoutHeader>
                <Bar Breakpoint="Breakpoint.Desktop" NavigationBreakpoint="Breakpoint.Desktop" Style="@GetHeaderColor()" Class="nci-navbar px-4">
                    <BarBrand>
                            <Image Source="img/theradex-logo.png" AlternateText="Theradex Oncology" /><span class="navbar-sitename">@environment</span>
                    </BarBrand>
                    <BarToggler />
                    <BarMenu>
                        <BarEnd>
                            <BarItem>
                                <Tooltip Text="Home">
                                    <BarLink To="studies">
                                            <img src="img/home.png" alt="Home" height="@iconHeight" />
                                    </BarLink>
                                </Tooltip>
                            </BarItem>
                            <BarItem>
                                <Tooltip Text="Logout">
                                    <BarLink onclick="@OnButtonClicked">
                                            <img src="img/logout.png" alt="Logout" height="@iconHeight" />
                                    </BarLink>
                                </Tooltip>
                            </BarItem>
                        </BarEnd>
                    </BarMenu>
                </Bar>
            </LayoutHeader>
            <Layout Sider>
                <LayoutSider>
                    <LayoutSiderContent Background="Background.Light">
                        <Div Class="nci-secondary-nav" Background="Background.Light">
                            <Bar Mode="BarMode.VerticalInline"
                                    CollapseMode="BarCollapseMode.Small"
                                    Breakpoint="Breakpoint.Desktop"
                                    NavigationBreakpoint="Breakpoint.Tablet"
                                    ThemeContrast="ThemeContrast.Light">
                                <BarBrand>
                                    <BarItem>
                                        <BarLink To="/admin">
                                            <BarIcon IconName="IconName.Dashboard" />
                                            Admin Home
                                        </BarLink>
                                    </BarItem>
                                </BarBrand>
                                <BarMenu>
                                    <BarStart>
                                        @if (CheckRole( new List<string> { "IT", "Content" }))
                                        {
                                            <BarItem>
                                                <BarLink To="/admin/alerts">
                                                    <BarIcon IconName="IconName.ExclamationCircle"  />
                                                    Alerts/Notes
                                                </BarLink>
                                            </BarItem>
                                        }
                                        @if (CheckRole(new List<string> { "IT", "Biz" }))
                                        {
                                            <BarItem>
                                                <BarLink To="/admin/users">
                                                    <BarIcon IconName="IconName.Users" />
                                                    Users
                                                </BarLink>
                                            </BarItem>
                                        }
                                        @if (CheckRole(new List<string> { "IT" }))
                                        {
                                        <BarItem>
                                            <BarLink To="/admin/roles">
                                                <BarIcon IconName="IconName.Coffee" />
                                                Roles
                                            </BarLink>
                                        </BarItem>
                                        <BarItem>
                                            <BarLink To="/admin/groups">
                                                <BarIcon IconName="IconName.PuzzlePiece" />
                                                Groups
                                            </BarLink>
                                        </BarItem>
                                        <BarItem>
                                            <BarLink To="/admin/dashboards">
                                                <BarIcon IconName="IconName.ChartPie" />
                                                Dashboards
                                            </BarLink>
                                        </BarItem>
                                        }
                                        @if (CheckRole(new List<string> { "IT" }) || context.User.HasTHORRole("DMU Global Admin"))
                                        {
                                        <BarItem>
                                            <BarLink To="/admin/dmu/select-profile">
                                                <BarIcon IconName="IconName.Wrench" />
                                                DMU Global Admin
                                            </BarLink>
                                        </BarItem>
                                        }
                                            @if (CheckRole(new List<string> { "IT" }) || context.User.HasAnyTHORRole("DMU Study Admin", "DMU Global Admin"))
                                            {
                                        <BarItem>
                                            <BarLink To="/admin/dmu/select-study">
                                                <BarIcon IconName="IconName.Book" />
                                                DMU Study Admin
                                            </BarLink>
                                        </BarItem>
                                        }
                                            @if (CheckRole(new List<string> { "IT" }) || context.User.HasAnyTHORRole("DMU Study Mapping", "DMU Study Admin", "DMU Global Admin"))
                                            {
                                        <BarItem>
                                            <BarLink To="/admin/dmu/study-mapping">
                                                <BarIcon IconName="IconName.Pen" />
                                                DMU Study Mapping
                                            </BarLink>
                                        </BarItem>
                                        }
                                    </BarStart>
                                </BarMenu>
                            </Bar>
                        </Div>
                    </LayoutSiderContent>
                </LayoutSider>
                <Layout>
                    <LayoutContent Class="mt-2 ms-4 me-2">
                        @Body
                    </LayoutContent>
                </Layout>
            </Layout>
            <LayoutFooter>
                <Footer />
            </LayoutFooter>
        </Layout>
        </Div>
    </Authorized>
    <NotAuthorized>
        <NotFound />
    </NotAuthorized>
</AuthorizeView>
<MessageProvider />

@code {
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject] private IUserService userService { get; set; } = null!;

    [Parameter] public int? UserId { get; set; }


    string environment = "";

    public bool isContentAdmin { get; set; }
    private int iconHeight = 30;

    protected override async Task OnInitializedAsync()
    {

        environment = configuration.GetValue<string>("System:Environment");
        if (environment != "Prod")
            environment = "NCI Theradex Oncology Reporting-" + environment;
        else
            environment = "NCI Theradex Oncology Reporting";
    }

    private string GetHeaderColor()
    {
        string color = configuration.GetValue<string>("System:SystemColor");
        return "background-color:" + color + ";";
    }

    Task OnButtonClicked()
    {
        if (httpContextAccessor.HttpContext == null)
        {
            Navigation.NavigateTo($"Signout", true);
            return Task.CompletedTask;
        }
        var userIdClaim = httpContextAccessor.HttpContext.User.FindFirst(ThorClaimType.UserId);
        if (userIdClaim == null)
        {
            Navigation.NavigateTo($"Signout", true);
            return Task.CompletedTask;
        }
        int userId = Convert.ToInt32(userIdClaim.Value);
        userService.SaveActivityLog(userId, ThorActivityType.Logout);
        Navigation.NavigateTo($"Signout", true);

        return Task.CompletedTask;
    }

    private bool CheckRole(List<string> allowedRoles)
    {
        if (httpContextAccessor?.HttpContext?.User == null)
        {
            return false;
        }
        return httpContextAccessor.HttpContext.User.HasAnyAdminRole(allowedRoles.ToArray());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var userClaim = httpContextAccessor.HttpContext?.User.FindFirst(ThorClaimType.UserId);
        if (userClaim == null)
        {
            return;
        }
        int userId = Convert.ToInt32(userClaim.Value);
        string pageUri = Navigation.ToBaseRelativePath(Navigation.Uri);
        string pageName = "admin", data1;

        if (pageUri.IndexOf(pageName) >= 0)
        {
            int firstPosition = pageUri.IndexOf("/") + 1;
            int nextPosition = pageUri.IndexOf("/", firstPosition);

            if (nextPosition > 0)
            {
                pageName = pageUri.Substring(firstPosition, nextPosition - firstPosition);
            }
            else if (firstPosition > 0)
            {
                pageName = pageUri.Substring(firstPosition, pageUri.Length - firstPosition);
            }

            switch (pageName)
            {
                case "users":
                    data1 = "User List";
                    break;
                case "groups":
                    data1 = "Group List";
                    break;
                case "alerts":
                    data1 = "Alert List";
                    break;
                case "roles":
                    data1 = "Role List";
                    break;
                case "dashboards":
                    data1 = "Dashboard List";
                    break;
                case "admin":
                    data1 = "Admin";
                    break;
                default:
                    data1 = "";
                    break;
            }
            if (!string.IsNullOrEmpty(data1))
            {
                userService.SaveActivityLog(userId, ThorActivityType.Navigation, data1, "");
            }
        }
    }
}
